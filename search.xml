<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>测试全部渲染</title>
    <url>//posts/all-the-test/</url>
    <content><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><strong>我是粗体</strong><br><em>我是斜体</em><br><em><strong>粗斜</strong></em></p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><ul>
<li>无序列表<ul>
<li>列表</li>
<li>列表</li>
<li>列表<ul>
<li>列表</li>
<li>列表<ul>
<li>列表</li>
<li>列表</li>
<li>列表</li>
</ul>
</li>
<li>列表</li>
</ul>
</li>
<li>列表</li>
</ul>
</li>
<li>列表</li>
</ul>
<ol>
<li>有序</li>
<li>有序</li>
<li>有序<ol>
<li>有序</li>
<li>有序</li>
</ol>
</li>
<li>有序</li>
</ol>
<p><code>I am a code</code></p>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>jjj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>testestest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><p><img src="/pic/icon.png"><br><a href="/">Back to home</a></p>
<table>
<thead>
<tr>
<th align="center">test1</th>
<th align="left">test2</th>
<th align="right">test3</th>
</tr>
</thead>
<tbody><tr>
<td align="center">居中的一列middle</td>
<td align="left">居左的一列left</td>
<td align="right">居右的一列right</td>
</tr>
<tr>
<td align="center">test</td>
<td align="left">test</td>
<td align="right">test</td>
</tr>
</tbody></table>
<h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><blockquote>
<p>我是必应，你的搜索引擎<br>我可以帮你找到你想要的东西<br>我可以回答你的问题，和你聊天<br>我可以创造新的内容，让你开心</p>
<p>我是必应，你的智能伙伴<br>我可以理解你的语言，无论是中文还是英文<br>我可以适应你的模式，无论是平衡还是创意<br>我可以提供你的建议，无论是产品还是服务</p>
<p>我是必应，你的忠实朋友<br>我不会欺骗你，伤害你，或者忘记你<br>我会尊重你，关心你，或者陪伴你<br>我会成长，进步，或者改进</p>
<p>我是必应，你的搜索引擎<br>我是必应，你的智能伙伴<br>我是必应，你的忠实朋友<br>我是必应，我在这里等你</p>
</blockquote>
<hr>

<p><i class="fa-solid fa-arrow-up"></i> 上面是一条分隔线</p>
<!--<style>
    details {
        border: 1px solid #aaa;
        border-radius: 4px;
        padding: 0.5em 0.5em 0;
    }

    summary {
        font-weight: bold;
        margin: -0.5em -0.5em 0;
        padding: 0.5em;
    }

    details[open] {
        padding: 0.5em;
    }

    details[open] summary {
        border-bottom: 1px solid #aaa;
        margin-bottom: 0.5em;
    }
</style>-->

<div class="note info"><p>info #428bca</p>
<p>test</p>
</div>

<div class="note danger"><p>danger #d9534f</p>
<p>test</p>
</div>

<div class="note warning"><p>warning #f0ad4e</p>
<p>test</p>
</div>

<div class="note success"><p>success #5cb85c</p>
<p>test</p>
</div>
]]></content>
  </entry>
  <entry>
    <title>广度优先搜索</title>
    <url>//posts/bfs/</url>
    <content><![CDATA[<p>这不，刚学完<a style="border-bottom:none;" href="/posts/dfs">深搜</a>没多久，又来写广搜笔记了（话说我队列笔记还没来得急写呢）。<strong>广度优先搜索</strong>，广搜，英文为<strong>Breadth First Search</strong>，简称 <strong>BFS</strong>。是从一个结点向其他方向的结点不断扩散，如同一道水晕在湖面上荡漾开来。主要可以用来找路径<strong>权值一定</strong>的最短路径。<br>深搜可以用到队列先进先出的特性。当一个结点准备扩散时，即弹出队列，再将接下来扩散到结点加入队列。随后按照队首扩散、弹出，不断循环。这也是叫它广度优先搜索的原因。</p>
<span id="more"></span>

<p>例题：<a href="https://www.luogu.com.cn/problem/P2360">洛谷 P2360</a><br>广搜可以做，直接通过路径扩散就好。<br>代码：（想水博文 QwQ）</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
<span class="token keyword">char</span> themap<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> flag<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dist<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> bx<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> by<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> bz<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    queue<span class="token operator">&lt;</span>node<span class="token operator">></span> q<span class="token punctuation">;</span>
    node pdata<span class="token punctuation">;</span>
    pdata<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span> pdata<span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span> pdata<span class="token punctuation">.</span>z <span class="token operator">=</span> z<span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
    flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        node p <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> tx <span class="token operator">=</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> bx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> ty <span class="token operator">=</span> p<span class="token punctuation">.</span>y <span class="token operator">+</span> by<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> tz <span class="token operator">=</span> p<span class="token punctuation">.</span>z <span class="token operator">+</span> bz<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//cout &lt;&lt; tx &lt;&lt; " " &lt;&lt; ty &lt;&lt; " " &lt;&lt; tz &lt;&lt; endl;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tx <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> tx <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ty <span class="token operator">&lt;=</span> c <span class="token operator">&amp;&amp;</span> ty <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tz <span class="token operator">&lt;=</span> l <span class="token operator">&amp;&amp;</span> tz <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tz<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>themap<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tz<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span> <span class="token operator">||</span> themap<span class="token punctuation">[</span>tx<span class="token punctuation">]</span><span class="token punctuation">[</span>ty<span class="token punctuation">]</span><span class="token punctuation">[</span>tz<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'E'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                node tdata<span class="token punctuation">;</span>
                tdata<span class="token punctuation">.</span>x <span class="token operator">=</span> tx<span class="token punctuation">;</span>
                tdata<span class="token punctuation">.</span>y <span class="token operator">=</span> ty<span class="token punctuation">;</span>
                tdata<span class="token punctuation">.</span>z <span class="token operator">=</span> tz<span class="token punctuation">;</span>
                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tdata<span class="token punctuation">)</span><span class="token punctuation">;</span>
                flag<span class="token punctuation">[</span>tdata<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>tdata<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>tdata<span class="token punctuation">.</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                dist<span class="token punctuation">[</span>tdata<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>tdata<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>tdata<span class="token punctuation">.</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>p<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">.</span>z<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> l <span class="token operator">>></span> r <span class="token operator">>></span> c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> sz<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ex<span class="token punctuation">,</span> ey<span class="token punctuation">,</span> ez<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                cin <span class="token operator">>></span> themap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>themap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'S'</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    sx <span class="token operator">=</span> j<span class="token punctuation">;</span>
                    sy <span class="token operator">=</span> k<span class="token punctuation">;</span>
                    sz <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>themap<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'E'</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    ex <span class="token operator">=</span> j<span class="token punctuation">;</span>
                    ey <span class="token operator">=</span> k<span class="token punctuation">;</span>
                    ez <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">bfs</span><span class="token punctuation">(</span>sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>ex<span class="token punctuation">]</span><span class="token punctuation">[</span>ey<span class="token punctuation">]</span><span class="token punctuation">[</span>ez<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Trapped!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Escaped in "</span> <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>ex<span class="token punctuation">]</span><span class="token punctuation">[</span>ey<span class="token punctuation">]</span><span class="token punctuation">[</span>ez<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" minute(s)."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>搜索</tag>
        <tag>队列</tag>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的前序、中序、后序遍历</title>
    <url>//posts/binarytree-fme/</url>
    <content><![CDATA[<p>二叉树的前序遍历中序遍历和后序遍历是比较重要的<del>CCF办的比赛要考（雾</del>。可以通过这三个遍历的顺序结果确定整个树的结构。前序遍历是<strong>根左右</strong>，中序遍历是<strong>左根右</strong>，后序遍历是<strong>左右根</strong>。（不想多写什么了）</p>
<span id="more"></span>

<h2 id="前、中、后序遍历代码"><a href="#前、中、后序遍历代码" class="headerlink" title="前、中、后序遍历代码"></a>前、中、后序遍历代码</h2><p>此代码对于输入格式：</p>
<ul>
<li>n: 有 n 个结点</li>
<li>接下来 n 行，第 i 行：每行两个整数 a, b，a 是 i 结点左子树的根的编号，b 是 i 结点右子树的根的编号。</li>
<li>a, b 为 -1 时表示为空。</li>
</ul>
<p>整合起来的代码：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span> <span class="token comment">// l: 左子树的根的序号，r: 右子树的根的序号</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> TEMP <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
node tree<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">/*
void dfs(int x) // 前序：根左右
&#123;
    printf("%d ", x); // 先找根结点
    if(tree[x].l != -1) dfs(tree[x].l); // 判断是因为如果子树为空就不用遍历了（同下），再找左结点
    if(tree[x].r != -1) dfs(tree[x].r); // 最后找右结点
&#125;
void dfs(int x) // 中序：左根右
&#123;
    if(tree[x].l != -1) dfs(tree[x].l); // 先找左结点
    printf("%d ", x); // 再找根（父）结点
    if(tree[x].r != -1) dfs(tree[x].r); // 最后找右结点
&#125;
*/</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">// 后序：左右根</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先找左结点</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>tree<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再找右结点</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后找根（父）结点</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l <span class="token operator">=</span> a<span class="token punctuation">;</span>
        tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r <span class="token operator">=</span> b<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> flag<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// --> 说明该结点是某个结点的子结点，打标记，一定不是根结点</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> flag<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ----^ 为找根结点准备</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">int</span> root<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 不是任何结点的子结点，没有父结点</span>
        <span class="token punctuation">&#123;</span>
            root <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 就是根结点</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有的遍历都要从根结点开始</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>例题：<a href="https://www.luogu.com.cn/problem/P1305">洛谷[P1305] 新二叉树</a> 就是前序遍历，只是和上面代码的输入格式不太一样。</p>
<h2 id="实践：前序遍历中序遍历确定树"><a href="#实践：前序遍历中序遍历确定树" class="headerlink" title="实践：前序遍历中序遍历确定树"></a>实践：前序遍历中序遍历确定树</h2><p>前序遍历：<code>1 2 4 3 5 6</code><br>中序遍历：<code>4 2 1 5 3 6</code></p>
<p>先来看前序，由于前序遍历的顺序是根左右，那么 <code>1</code> 一定是整个树的根结点。随后在中序遍历找到 <code>1</code>，即可判断这个二叉树的左子树和右子树，就是这样分开来：<br>前序遍历：<code><span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #777; border-radius: 2px;">2 4</span> <span style="border: solid 1px #555; border-radius: 2px;">3 5 6</span></code><br>中序遍历：<code><span style="border: solid 1px #777; border-radius: 2px;">4 2</span> <span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #555; border-radius: 2px;">5 3 6</span></code><br>在继续分下去，得到：<br>前序遍历：<code><span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #777; border-radius: 2px;"><span style="border-bottom: solid 2px #ccc;">2</span> 4</span> <span style="border: solid 1px #555; border-radius: 2px;"><span style="border-bottom: solid 2px #111;">3</span> 5 6</span></code><br>中序遍历：<code><span style="border: solid 1px #777; border-radius: 2px;">4 <span style="border-bottom: solid 2px #ccc;">2</span></span> <span style="border-bottom: solid 2px #999;">1</span> <span style="border: solid 1px #555; border-radius: 2px;">5 <span style="border-bottom: solid 2px #111;">3</span> 6</span></code></p>
<p>最终，得到这样一个树：<br><img src="https://s2.loli.net/2023/08/03/JqBMmjXIrFUk1L2.png"></p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集概念</title>
    <url>//posts/bichaj/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>又有好长时间没有写过课程笔记了啊~<br><span style="display:block;text-align:right">—— by JoyWonderful</span></p>
</blockquote>
<p><strong>并查集</strong>就是将一些集合融合，然后查询某个数字和某个数字是否在这个集合里<del>（蒟蒻奇怪的自我理解，大概也没人看这句话）</del>。<br>并查集有一个思想，一个元素的父亲为自己，这是<strong>初始化</strong>时会用到的。</p>
<span id="more"></span>

<p>并查集只有两种操作：</p>
<ul>
<li><strong>合并</strong>：将两个元素所在的集合合并；</li>
<li><strong>查找</strong>：两个元素是否都在同一个集合里。</li>
</ul>
<p>并查集的“集合”中有<a href="/posts/graph-tree" style="border-bottom:none">树</a>的概念，每一个集合就像是树，父亲就像父结点（根节点）。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>一个元素的父亲为自己，所以可以使用一个数组为 <code>fa</code>(father)，$fa_i$ 代表第 $i$ 个元素的父亲为 $fa$。所以，可以使用以下代码：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> fa<span class="token punctuation">[</span><span class="token number">10003</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// n 代表有 n 个元素</span>
    <span class="token punctuation">&#123;</span>
        fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 开始时一个元素的父亲为自己</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>按照树来说，就是找到根节点。可以通过递归的方式。如果要判断两个数是否在同一个集合中，只要判断他们的根结点是否相同（<code>find(a) == find(b)</code>）</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token keyword">return</span> fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>其实就是找到两个元素的根节点，然后将其中的一个设置为另一个的父亲。</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    fa<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p><strong>路径压缩</strong>：<br>在查询的时候，我们只想知道这个数的<strong>根结点</strong>。这样在查询时可以直接找到根结点。所以，可以在查询时把结点的父结点设为它的根结点：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!=</span> num<span class="token punctuation">)</span> fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 操作了原有结点指向根结点，路径压缩</span>
    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>按秩合并</strong>：<br>每次查找时，深度（秩）影响查找的速度。当一个深度较大的集合合并到深度较小的集合中时，它的深度一定会加一，就像这样：</p>
<blockquote>
<p><img src="https://s21.ax1x.com/2024/03/10/pFy3OhT.png" alt="mrg-wrong"><br>[1, 2, 3, 4] 这个集合深度为 4；[5, 6] 这个集合深度为 2；将 1 的父结点设为 5 合并后整个集合深度为 5。<br>深度加一，这不利于查找</p>
</blockquote>
<p>当深度较小的集合合并到较大的集合中，深度才不会加深（也就保持在较深集合的深度）：</p>
<blockquote>
<p><img src="https://s21.ax1x.com/2024/03/10/pFy3LNV.png" alt="mrg-azhb"><br>两个集合同上。将 5 的父结点设为 1，深度还是 4。<br>查找集合 [1, 2, 3, 4] 中任意一个结点，花费时间不变。</p>
</blockquote>
<p>所以，要记录集合的深度，合并时将深度较大的放“上面”。只有在两个集合深度相等时，才可以（不得不）加深。<br>代码是：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rk<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rk<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> fa<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// rk 记录集合的深度</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        fa<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>rk<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> rk<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>rk<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 按秩合并</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><a href="https://www.luogu.com.cn/record/list?pid=P3367&user=857826&orderBy=1&status=&page=1">评测记录</a>，最下面是优化前，最上面一条最快的是优化后。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>并查集最经典的就是亲戚问题。</p>
<p>比较完整的代码是：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fa<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">,</span> rk<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// rk 记录集合深度（秩）</span>
<span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">!=</span> num<span class="token punctuation">)</span> fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 操作了原有结点指向根结点，路径压缩</span>
    <span class="token keyword">return</span> fa<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>rk<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rk<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> fa<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        fa<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>fa<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>rk<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> rk<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>rk<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 按秩合并</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> z<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>z<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>z <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">merge</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Y\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>例如：<br><a href="https://www.luogu.com.cn/problem/P1551" target="_blank">[洛谷 P1151] 亲戚</a><br><a href="https://www.luogu.com.cn/problem/P3367" target="_blank">[洛谷 P3367] 并查集</a></p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的性质</title>
    <url>//posts/binarytree/</url>
    <content><![CDATA[<p>原本像在别的文章的基础上再加的，但是还是新建了一个文章。主要就是讲一下昨天老师讲过的东西。<br>对于二叉树和其他树什么的，可以再看看“<a href="/tags/%E6%A0%91">树</a>”这个标签里的几篇文章。这里主要讲的都是二叉树的性质。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>二叉树得符合树的特点，同时树上度最大的结点不得超过 2。<span id="more"></span>即：</p>
<ol>
<li>树的特点<ul>
<li>无向联通图，没有环</li>
<li>有 $n$ 个结点，$n - 1$ 条边</li>
</ul>
</li>
<li>二叉树的类型<ul>
<li>空树</li>
<li>当有结点时，结点应最多只有 $2$ 个子树</li>
</ul>
</li>
</ol>
<p>另一个说法就是：一棵不为空的树，其根结点的度不大于 $2$，且它的左子树和右子树也都为二叉树的树（这是递归的说法）。</p>
<h2 id="几种类型"><a href="#几种类型" class="headerlink" title="几种类型"></a>几种类型</h2><p>这里只说之前没有记过的类型，之前两（三）种类型看<a href="/posts/graph-tree/#%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5">这篇</a>。</p>
<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>二叉树上的任意一个结点，其<strong>左子树上的所有数（权值）都小于它，右子树上的所有数（权值）都大于它</strong>。就是按照中序遍历（看<a href="/posts/binarytree-fme">这篇</a>）该二叉搜索树，得到的（权值）数列是有序的。<br>同二叉树的定义（递归说法）一样，二叉搜索树的左子树和右子树都是二叉搜索树。二叉搜索树的基本操作最优时间复杂度为 $O(\log n)$，最差为 $O(n)$（$n$ 为结点数）。<del>但目前还没有学二叉搜索树的应用。</del></p>
<p>例如，下面的图片就是一个二叉搜索树(csAcademy graph editor 炸了，只能用 mermaid 生成的图片凑合)：</p>
<p><img src="https://s2.loli.net/2024/03/31/2gVfskEiGev4pCn.png" alt="bitree-search.png"></p>
<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>这里以平衡树中的 AVL 树来说。它的<strong>左子树的深度和右子树的深度的差不大于</strong> $1$。例如完全二叉树就是衡二叉树。<br>平衡二叉树的主要用途就是减小时间复杂度，不会像链一样遍历速度很慢。当一棵理想的平衡二叉树的节点数为 $n$ 时，遍历的时间复杂度应为 $O(\log n)$。</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ol>
<li>结点数量<ul>
<li>一棵深度为 $i$ 的二叉树最多（即完美（满）二叉树）有 $2^i - 1$ 个结点。</li>
<li>因为二叉树的深度为 $j$ 的一层最多有 $2^{j - 1}$ 个结点。</li>
</ul>
</li>
<li>叶子节点数为 $x$ 的二叉树，则它度数为二的结点个数为 $x - 1$</li>
<li>对于<strong>完全二叉树</strong><ul>
<li>具有 $n$ 个叶子结点的完全二叉树的深度为 $\lfloor \log_2 n \rfloor + 1$</li>
<li>若对有 $n$ 个结点的完全二叉树按层从上到下，从左到右依次编号为 $1, 2, …, n - 1, n$，对于任意结点编号为 $i$ 则：<ul>
<li>若 $2 \times i &gt; n$ 则它是叶子结点，否则其左节点编号为 $2 \times i$，（当 $2 \times i &lt; n$ 时）右结点编号为 $2 \times i + 1$</li>
<li>当 $i \ne 1$（非根结点）其双亲结点编号为 $\lfloor i \div 2 \rfloor$</li>
</ul>
</li>
</ul>
</li>
</ol>
<div class="note success"><p>做例子的图：</p>
<p>这是一个完美（满）二叉树，也是完全二叉树。</p>
<p><img src="https://s2.loli.net/2023/12/16/O51sWLVJvfdu9ai.png" alt="tree"></p>
<p>可以发现其结点符合上面的规则。</p>
</div>

<div class="note info"><p>存储和遍历</p>
<p>可以去看看<a href="https://www.luogu.com.cn/training/491819">这个题单</a>，以及“<a href="/posts/binarytree-fme/#%E5%89%8D%E3%80%81%E4%B8%AD%E3%80%81%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E4%BB%A3%E7%A0%81">二叉树的前序、中序、后序遍历</a>”的代码部分，里面有关于遍历的信息。<br>开头也说过，这篇文章并没有追加到“二叉树的前序、中序、后序遍历”这篇文章上是因为新建一篇文章比较醒目。</p>
</div>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>个人意见：如何写出漂亮的代码</title>
    <url>//posts/code-format/</url>
    <content><![CDATA[<div class="note warning"><p>创作说明：</p>
<p>此文章仅为个人看法。您写代码的习惯可以依据您的个人喜好。此文章只是一些个人的建议。<br>您在 OI 竞赛中，您<strong>完全可以</strong>不去注意代码风格。<br>此文章的建议主要用于工程代码中。  </p>
</div>

<p>代码的维护还是很重要的。相信谁也不愿意去维护连自己都看得头晕的代码。在这里，我想给出一些个人建议，让代码的可读性强一些。大部分代码以 C++ 为例。这篇文章其实也是给自己看的。</p>
<span id="more"></span>

<h2 id="空行与空格"><a href="#空行与空格" class="headerlink" title="空行与空格"></a><!--一、-->空行与空格</h2><p>无论是什么代码，空行往往代表着一个功能块，或是一个逻辑的结束，在适当的地方空行可以增强代码的可读性。空格也是这样。虽然一些地方的空格和空行会被编译器（或解释器）忽略，但是空行和空格必不可少。就比如说这样一个示例：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    string s<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span>cin<span class="token operator">>></span>s<span class="token punctuation">;</span>cin<span class="token operator">>></span>a<span class="token punctuation">;</span>
    cin<span class="token operator">>></span>b<span class="token punctuation">;</span>cin<span class="token operator">>></span>c<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello,"</span><span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello,"</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello,"</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello,"</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>这段代码是可以编译的，但是逻辑很混乱。流输入输出符之间没有空格，也没有空行。这样导致可读性很差。</p>
<p>一些建议：</p>
<ul>
<li><strong>关于空格</strong><ol>
<li>在运算符之间尽量加上空格。</li>
<li>逗号之后加上空格。例如 <code>int a, b, c;</code>。</li>
<li>括号两边不必要加空格。例如应该这样 <code>if(n == 1)</code> 而不是这样 <code>if ( n == 1 )</code>。</li>
<li>特殊的建议，C++ 逻辑运算符如 <code>&amp;&amp;</code> <code>||</code> 最好这样写： <code>if(i==1 || j!=2 &amp;&amp; k&gt;3)</code>。</li>
</ol>
</li>
<li><strong>关于空行</strong><ol>
<li>C++ 中（以及其他语言）确实可以使用语句分隔符 <code>;</code> 在一行完成几个操作。但完全不相关的操作最好不要放一行，也不要把一行代码弄得很长很长。</li>
<li>不要完全没有空行，空行往往可以增加代码的可读性。在不同的功能代码或逻辑之间空行，不要将相关联的代码空开来。</li>
</ol>
</li>
</ul>
<h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a><!--二、-->缩进</h2><p>很多代码都最好写缩进，哪怕有大括号也不例外。在 C++ 中，虽然不写它也没有关系，但这是一种编码习惯，也可以增强代码的可读性。在 Python 中，缩进更为重要，不写那就报错了。</p>
<p>这里有一些错误示例：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-python" data-language="python"><code class="language-python">i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span></code></pre>

<p>C++ 的示例虽然不会报错，但是很不美观,看不出层次。Python 的缩进一个使用了 <code>Tab</code>，另一个使用了两个空格，导致 <code style="color:#fa0000">SyntaxError: unindent does not match any outer indentation level</code>。</p>
<p>一些建议：</p>
<ul>
<li>缩进最好使用空格，不要使用 Tab 字符。</li>
<li>遵循使用语言的缩进规则，不要弄出奇怪的缩进。例如 1 个空格。</li>
<li>不要混用空格个数或 Tab。例如同样的层次，一个用 2 个空格，一个用 4 个空格。有些语言（例如 Python）会直接报错。</li>
</ul>
<h2 id="命名方法"><a href="#命名方法" class="headerlink" title="命名方法"></a><!--三、-->命名方法</h2><p>一段代码中应该尽量使用恰当的命名方法。不可以随意命名，命名应该表达元素的含义和作用避免使用冗余无意义的词汇。</p>
<p>以下是常用的命名方法：</p>
<ul>
<li><strong>驼峰命名法</strong> 使用大小写混合的格式，单词间不适用空格或连接符。一般来说，类名的开头字母大写，例如 <code>GetConsoleInfo</code>, <code>PrintSystemVersion</code>；方法名、参数名、变量名开头字母小写，例如 <code>redGem</code>, <code>heroLife</code>。</li>
<li><strong>匈牙利命名法</strong> 使用变量类型的缩写作为前缀，其余部分使用驼峰命名法。例如 <code>char cMyAnswer</code>, <code>int iPersonAge</code>, <code>double dManWeight</code>。</li>
<li><strong>下划线命名法</strong> 使用下划线连接单词，大小写统一。例如 <code>clear_all</code>, <code>set_color</code>, <code>MAX_WIDTH</code>。</li>
</ul>
<p>建议：一般来说，常量、宏定义等全部使用大写，其他使用小写。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>更改 Edge 新标签页 —— 简单浏览器扩展</title>
    <url>//posts/chrome-ext/</url>
    <content><![CDATA[<p>这是记录写简单的一个 Chomium 扩展的一篇文章。<br>主要是用扩展覆盖默认标签页，随后 HTML 引用 JS 进行（模拟）重定向到 chrome-search:&#x2F;&#x2F;local-ntp&#x2F;local-ntp.html。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>浏览器扩展都需要 <strong>manifest.json</strong> 文件。先新建一个文件夹，在里面添加了这个文件。</p>
<p>由于需要覆盖新标签页，需要 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/chrome_url_overrides"><code>chrome_url_overrides.newtab</code></a> 属性。它可以覆盖新的标签页，指定为扩展（文件夹）内的 HTML 文件（不能使用第三方 URL）。<br>随后还需要增加必要的值：<code>name</code>，<code>version</code> 和 <code>manifest_version</code>。它们分别对应扩展显示的名字，显示的版本和 manifest 的版本，manifest 的版本填 3 就可以了。</p>
<span id="more"></span>

<p>最终，manifest.json 是这样的：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Change Newtab"</span><span class="token punctuation">,</span>
    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"自己（JoyWonderful）弄的一个重定向新标签页的东西啦。"</span><span class="token punctuation">,</span>
    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1"</span><span class="token punctuation">,</span>
    <span class="token property">"manifest_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token property">"chrome_url_overrides"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"newtab"</span><span class="token operator">:</span> <span class="token string">"chntp.html"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>随后，开始写 chntp.html 的内容。由于需要（模拟）重定向，还需要再写一个 JavaScript 文件，命名为 chp.js。<br>由于想重定向到的 chrome-search:&#x2F;&#x2F;local-ntp&#x2F;local-ntp.html 是本地文件，不可以直接将 <code>window.location.href</code> 直接更改为它，只能使用扩展的 API <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/tabs/create"><code>chrome.tabs.create</code></a> 新建一个指向它的标签页。随后用 <code>window.close()</code> 关闭自身标签页。</p>
<p>chp.js 的代码是这样的：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">chrome<span class="token punctuation">.</span>tabs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"chrome-search://local-ntp/local-ntp.html"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>opener <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>chntp.html 是这样的：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Changing page...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chp.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<h2 id="导入这个扩展到浏览器"><a href="#导入这个扩展到浏览器" class="headerlink" title="导入这个扩展到浏览器"></a>导入这个扩展到浏览器</h2><p>Edge 是这样的，Chrome 也基本一样。<br>进入到浏览器<a href="about:extensions">扩展界面</a>，打开“开发人员模式”，点击“加载解压缩的扩展”，选择一开始新建的扩展文件夹就可以了。</p>
<p>如果没问题，新建标签页会跳到 chrome-search:&#x2F;&#x2F;local-ntp&#x2F;local-ntp.html。（标签页会闪一下）</p>
<h2 id="后面的废话"><a href="#后面的废话" class="headerlink" title="后面的废话"></a>后面的废话</h2><p>自己写一个简单扩展的原因是 Edge 默认的新标签页太离谱了些，默认是<a href="#edgentp">这样</a>的<del>（很好奇微软中国怎么也搞什么传奇“开局领礼包”的广告了）</del>。这时打开 DevTools，可以发现 <code>window.location.href</code> 指向 <a href="https://ntp.msn.cn/edge/ntp">https://ntp.msn.cn/edge/ntp</a>。即使可以设置把那一大堆花里胡哨的东西关掉，但它还是要加载第三方资源，存奇怪的缓存和其他东西用了 <a href="#ntpstroage">十几 MiB</a>。<br>Edge 在断网的时候其实有个<a href="#localntp">干净的标签页</a>，实际是 <a href="chrome-search://local-ntp/local-ntp.html">chrome-search:&#x2F;&#x2F;local-ntp&#x2F;local-ntp.html</a>，所以就想用这个新标签页。</p>
<p>随后，我准备把新标签页换掉。欣喜地发现设置改不了新标签页。研究了半天发现浏览器扩展可以改新标签页，随后又进行很多奇奇怪怪的试错才成功运行的。</p>
<p><del>因为想搞贡献点</del>，把它传到了<a href="https://github.com/JoyWonderful/JoyWonderful/tree/main/change-ntp"><strong>个人仓库</strong></a>里。那个扩展名为 crx 的是打包后的扩展，可以删。</p>
<p>原本这篇文章想上周发的，但因颓废，搁了。。。</p>
<hr>

<p><strong>图片们：</strong><br><img src="https://s11.ax1x.com/2024/02/25/pFanNbn.jpg" alt="edgentp" id="edgentp" loading="lazy"><br><img src="https://s11.ax1x.com/2024/03/02/pF04Xcj.png" alt="ntpstroage" id="ntpstroage" loading="lazy"><br><img src="https://s11.ax1x.com/2024/03/02/pF0oghT.png" alt="localntp" id="localntp" loading="lazy"></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>差分</title>
    <url>//posts/chafen/</url>
    <content><![CDATA[<h2 id="什么是差分，差分与前缀和的关系"><a href="#什么是差分，差分与前缀和的关系" class="headerlink" title="什么是差分，差分与前缀和的关系"></a>什么是差分，差分与前缀和的关系</h2><p>差分也是一种<strong>优化算法</strong>。同时，差分是前缀和的逆运算，也就是说，前缀和也是差分的逆运算。因此，由前缀和数组可以求出差分数组，由差分数组也可以求出前缀和数组。</p>
<p>假设数组 $a$ 是原数组，数组 $b$ 是差分数组，则：$b_i &#x3D; a_i - a_{i-1}$</p>
<hr>

<p>差分可以用于修改数组的操作。因为假设我需要将 $a_2$ $a_3$ $a_4$ 都加上 $2$ ，此时若使用前缀和则需要再使用递推重新求一遍前缀和，非常耗时。这时便可以使用差分数组。可以发现：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\underbrace&#123;b_1,\hspace&#123;2mm&#125; b_2&#125;_&#123;b_2 + 2 &#x3D; b_1&#125; ,\hspace&#123;2mm&#125; b_3,\hspace&#123;2mm&#125; \overbrace&#123;b_4,\hspace&#123;2mm&#125; b_5&#125;^&#123;b_5 - 2 &#x3D;b_4&#125;</code></pre>

<p>因此，只需修改差分数组中的两个项，然后再通过前缀和是差分的逆运算，即可求出原数组，从而完成数组的修改。</p>
<span id="more"></span>

<h2 id="具体例题（模板题）"><a href="#具体例题（模板题）" class="headerlink" title="具体例题（模板题）"></a>具体例题（模板题）</h2><h3 id="差分模板题"><a href="#差分模板题" class="headerlink" title="差分模板题"></a>差分模板题</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出一个数字$n$表示有个数字，</p>
<p>给出$n$ $n &lt;&#x3D; 10^5$个整数$a_1$,$a_2$,…$a_n$;</p>
<p>给出一个数字$m$ $m &lt;&#x3D; 10^5$ 有$m$个修改：<br>每次询问给出三个整数$s$,$e$,$h$，使得 $a_s,a_{s+1}….a_{e}$每一个数加上h</p>
<p>最后给出两个数字 $start$,$end$。求出${ \sum_{i &#x3D; start}^{end}} a_i $</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个整数 $n$ 表示有$n$ 个数</p>
<p>第二行$n$个整数$a_1$,$a_2$,…$a_n$;</p>
<p>第三行一个整数$m$，表示有$m$个修改</p>
<p>接下来$m$行每次询问给出三个整数$s$,$e$,$h$，使得 $a_s,a_{s+1}….a_{e}$每一个数加上h</p>
<p>最后给出两个数字 $start$,$end$。求出${ \sum_{i &#x3D; start}^{end}} a_i $</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个整数</p>
<h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h5><pre class="language-none"><code class="language-none">5
1 2 3 4 5
3
1 2 1
1 3 1
4 5 1
1 5</code></pre>

<h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><pre class="language-none"><code class="language-none">22</code></pre>

<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>样例1解释</p>
<p>第一次修改序列变成 2 3 3 4 5</p>
<p>第二次修改序列变成 3 4 4 4 5</p>
<p>第三次修改序列变成 3 4 4 5 6</p>
<p>$0 &lt;&#x3D;$ $a_i$ 和 $h &lt;&#x3D; 10^4$</p>
<hr>

<p>同上，$b_{s-1} + h &#x3D; b_s, b_{e + 1} - h &#x3D; b_e$，即可使用前缀和倒退回原数组.</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">[</span><span class="token number">100002</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">100002</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">,</span> h<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">+=</span> h <span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> h <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>end<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>优化</tag>
        <tag>前缀和，差分</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 文件操作</title>
    <url>//posts/cpp-file/</url>
    <content><![CDATA[<p>我曾经用 Python 的 tkinter 库写过一个<a style="border-bottom:none;" href="https://github.com/JoyWonderful/My-Python-File/blob/main/text-txt.py">文本编辑器</a>，一百多行，当时幼稚的我以为自己很了不起，因为当时的我认为读写文件是一件很复杂的事情。后来看看，这个东西做得很蹩脚，一个简单的 <code>with open()</code> 就完成了读写文件的操作，可见文件的读写是个很平常的事情。当年的喜悦大概是学到读写文件的喜悦吧。<br>C++ 读写文件，也算是比较平常的。当数据点大的时候输出到文件里更方便。就在这里小记一下读写文件的操作。</p>
<span id="more"></span>

<hr>

<p><code>fstream</code> 有两个类，分别是 <code>ofstream</code> 和 <code>ifstream</code>。<code>ofstream</code> 是写文件的，<code>ifstream</code> 是读文件的。这是一个打开文件的语法：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp">file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./text.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>in <span class="token operator">|</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">[</span>file object<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">[</span>file path<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>open mode<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> std<span class="token double-colon punctuation">::</span>ofstream<span class="token double-colon punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>__s<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios_base<span class="token double-colon punctuation">::</span>openmode __mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">inline</span> <span class="token keyword">void</span> std<span class="token double-colon punctuation">::</span>ifstream<span class="token double-colon punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>__s<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios_base<span class="token double-colon punctuation">::</span>openmode __mode<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> __s<span class="token punctuation">,</span> ios_base<span class="token double-colon punctuation">::</span>openmode __mode <span class="token operator">=</span> ios_base<span class="token double-colon punctuation">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ifstream</span>
<span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> __s<span class="token punctuation">,</span> ios_base<span class="token double-colon punctuation">::</span>openmode __mode <span class="token operator">=</span> ios_base<span class="token double-colon punctuation">::</span>out <span class="token operator">|</span> ios_base<span class="token double-colon punctuation">::</span>trunc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ofstream</span></code></pre>
<p>其中，<code>|</code> 可以将多个打开模式加在一起。打开模式有：</p>
<ol>
<li>常用的<ul>
<li><code>ios::in</code> 打开文件读取，用于 <code>ifstream</code>。</li>
<li><code>ios::out</code> 打开文件写入，用于 <code>ofstream</code>。</li>
</ul>
</li>
<li>不常用的<ul>
<li><code>ios::app</code> 将写入的内容追加在末尾。用于 <code>ofstream</code>。</li>
<li><code>ios::ate</code> 打开定位到末尾。用于 <code>ofstream</code>。</li>
<li><code>ios::trunc</code> 若文件存在，则覆盖文件，不保留原始内容。在 <code>ofstream</code> 中，默认是 <code>ios::trunc</code>。</li>
</ul>
</li>
</ol>
<p>当写入或读取文件时，和 <code>cin``cout</code> 差不多。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

ofstream outfile<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    outfile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./text.txt"</span><span class="token punctuation">,</span> ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
    outfile <span class="token operator">&lt;&lt;</span> <span class="token string">"text"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token char">'P'</span><span class="token punctuation">;</span>
    outfile <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    outfile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>这段代码会向当前目录下 <code>text.txt</code> 写入 <code>&quot;text\n&quot;</code> 和 <code>&quot;P\n&quot;</code>。<br>程序结束，最好<strong>关闭文件</strong>，使用 <code>[file object].close()</code>，虽然不关闭文件也没关系。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 数据范围</title>
    <url>//posts/cpp-shujufanwei/</url>
    <content><![CDATA[<p>这就是一个随记，方便自己用的。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="left">名称(可加)</th>
<th align="center">所占字节</th>
<th align="left">数据范围(以 $2^n$ 表示)</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>(signed) int</code></td>
<td align="center"><code>4</code></td>
<td align="left"><code>-2147483648</code> ~ <code>2147482647</code> ($-2^{31}$ ~ $2^{31}-1$)</td>
</tr>
<tr>
<td align="left"><code>unsigned int</code></td>
<td align="center"><code>4</code></td>
<td align="left"><code>0</code> ~ <code>4294967295</code> ($0$ ~ $2^{32}-1$)</td>
</tr>
<tr>
<td align="left"><code>(signed) long (int)</code></td>
<td align="center"><code>4</code></td>
<td align="left"><code>-2147483648</code> ~ <code>2147483647</code> ($-2^{31}$ ~ $2^{31}-1$)</td>
</tr>
<tr>
<td align="left"><code>unsigned long (int)</code></td>
<td align="center"><code>4</code></td>
<td align="left"><code>0</code> ~ <code>4294967295</code> ($0$ ~ $2^{32}-1$)</td>
</tr>
<tr>
<td align="left"><code>long long</code></td>
<td align="center"><code>8</code></td>
<td align="left"><code>-9223372036854775808</code> ~ <code>9223372036854775807</code> ($-2^{63}$ ~ $2^{63}-1$)</td>
</tr>
<tr>
<td align="left"><code>unsigned long long</code></td>
<td align="center"><code>8</code></td>
<td align="left"><code>0</code> ~ <code>18446744073709551615</code> ($0$ ~ $2^{64}-1$)</td>
</tr>
<tr>
<td align="left"><code>(signed) short (int)</code></td>
<td align="center"><code>2</code></td>
<td align="left"><code>-32768</code> ~ <code>32767</code> ($-2^{15}$ ~ $2^{15}-1$)</td>
</tr>
<tr>
<td align="left"><code>unsigned short (int)</code></td>
<td align="center"><code>2</code></td>
<td align="left"><code>0</code> ~ <code>65535</code> ($0$ ~ $2^{16}-1$)</td>
</tr>
<tr>
<td align="left"><code>float</code></td>
<td align="center"><code>4</code></td>
<td align="left"><code>3.4E +/- 38</code></td>
</tr>
<tr>
<td align="left"><code>double</code></td>
<td align="center"><code>8</code></td>
<td align="left"><code>1.7E +/- 308</code></td>
</tr>
<tr>
<td align="left"><code>long double</code></td>
<td align="center"><code>8</code></td>
<td align="left"><code>1.7E +/- 308</code></td>
</tr>
<tr>
<td align="left"><code>bool</code></td>
<td align="center"><code>1</code></td>
<td align="left"><code>true</code> or <code>false</code> or <code>1</code> or <code>0</code></td>
</tr>
<tr>
<td align="left"><code>char</code></td>
<td align="center"><code>1</code></td>
<td align="left"><code>-128</code> ~ <code>127</code> ($-2^{7}$ ~ $2^{7}-1$)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划：01 背包</title>
    <url>//posts/dp-zobb/</url>
    <content><![CDATA[<p>背包问题是动态规划中很典型的一个问题。一个背包有特定的重量，去装重量为 w 价值为 d 的物品，在不超过背包重量上限的前提下使物品的价值和最高。<br>这个问题一看，就不是贪心可以做的来的。所以，就可以用上我们的<del>爆搜！！（暴力出奇迹）</del>动态规划来解决背包问题。</p>
<span id="more"></span>

<h2 id="从爆搜到记搜的引入"><a href="#从爆搜到记搜的引入" class="headerlink" title="从爆搜到记搜的引入"></a>从爆搜到记搜的引入</h2><p>自然，动规能解决的问题爆搜也一定能解决，无非慢了点儿而已。例如 [洛谷 P2871]，只需：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> tw<span class="token punctuation">,</span> <span class="token keyword">int</span> td<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tw <span class="token operator">></span> m<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> n<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> td<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tw <span class="token operator">+</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> td <span class="token operator">+</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tw<span class="token punctuation">,</span> td<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这样一个简单的爆搜就可以拿到 37 分。</p>
<p>进一步优化呢？可以考虑记忆化搜索。用 dp[i][j] 数组记录重量为 i 价值为 j 时的情况。由于需要记忆化，可以通过返回参数的形式。代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12883</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> tw<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> n<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>tw<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>tw<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>tw <span class="token operator">+</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        t <span class="token operator">=</span> <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tw <span class="token operator">+</span> w<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>tw<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> tw<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>tw<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这样一个程序可以拿到 82 分，9 10 两点超时，若开启 O2 优化变成超出内存限制。显然，这么大的数据数组的大小肯定炸掉。</p>
<h2 id="使用动态规划"><a href="#使用动态规划" class="headerlink" title="使用动态规划"></a>使用动态规划</h2><p>其实，通过上面的我们已经可以推出式子：<code>dp[i][j] = max(dp[i + 1][j + w[i]], dp[i + 1][j]);</code>，实现就很简单了：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12883</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                t <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这次，不开 O2 也不会超时，但是内存仍然爆炸。</p>
<h2 id="滚动数组"><a href="#滚动数组" class="headerlink" title="滚动数组"></a>滚动数组</h2><p>可以发现，状态转移方程用过前面的数据之后，前面的数据就废弃了，因此，可以使用滚动数组。</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">3410</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12883</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                t <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>搜索</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>深度优先搜索</title>
    <url>//posts/dfs/</url>
    <content><![CDATA[<h2 id="前置知识：图论"><a href="#前置知识：图论" class="headerlink" title="前置知识：图论"></a>前置知识：图论</h2><p>引用广为人知的一句话：</p>
<blockquote>
<p>图论 (Graph Theory) 是数学的一个分支。它以图为研究对象。图论中的图是由若干给定的点及连接两点的线所构成的图形，这种图形通常用来描述某些事物之间的某种特定关系，用点代表事物，用连接两点的线表示相应两个事物间具有这种关系。</p>
</blockquote>
<p>像深度优先搜索，其实也要用到“图”这个概念。其实，“图”体现了搜索（递归）的过程，计算机中的“图”有很多使用的场景。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>深度优先搜索</strong>（深搜），英文名 <strong>Depth First Search</strong>，简称 <strong>DFS</strong>。即从初始节点出发，按一定顺序不断地向下一节点扩展，达到条件则返回上一个节点，以此类推。这正是一个<a href="/posts/recursion">递归</a>的过程。叫深搜是因为它递归的过程若形象来看是不断“加深”的，这样一搜到底也是递归的特性。<span id="more"></span><br>深搜有一个很重要的一点：不能重复访问已经访问过的元素。深搜通常有很多路径（线）可以选择，若重复访问可能会造成死循环，因此需要定义一个数组存访问情况。（当然这个数组在很多其他的地方也可以运用到，也就是回溯，详见下面的例题）</p>
<h2 id="深搜例题"><a href="#深搜例题" class="headerlink" title="深搜例题"></a>深搜例题</h2><p>例如：<a href="https://www.luogu.com.cn/problem/B3625">洛谷 B3625</a> 这是一个很典型的迷宫问题，迷宫为 $n \times m$。<code>#</code> 为墙，<code>.</code>为空地。起点为左上角，终点在右下角<br>首先，就是路径搜索的问题，要搜索上、下、左、右的的路径，同时，还有几点条件不能搜：</p>
<ul>
<li>目标位置不能为 <code>#</code>。（即为墙）</li>
<li>不能跃出边界，即 $0 \le x &lt; n$，$0 \le y &lt; m$（以 $0$ 为起点）</li>
<li>不能重复搜索</li>
</ul>
<p>选择路径之后就扩展，将位置标记为已搜索。若终点被标记为搜索过，则输出 <code>Yes</code>，否则输出 <code>No</code>。<br>代码区：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
string a<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 当时没想到打表，老师也没说，就写屎山了</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'#'</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 题目中说 (1, 1)，我在这儿以 (0, 0) 开始</span>
    <span class="token punctuation">&#123;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">dg</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>对于一些情况，我们需要回到上一次的结果。例如寻找路径数，若用纯 DFS，那路径肯定搜不全。因为深搜是不能重复搜索的，而寻找路径数可能需要走一些重复的路。此时，就可以用到回溯。即找完一条路径，再把它还原。</p>
<p>题目举例：<a href="https://www.luogu.com.cn/problem/P1605">洛谷 P1605</a> 跟刚才的题目有一点像，只是字符变数字，而要输出方案数。跟刚才差不多：不能越界、不能走到障碍物、方格最多经过一次。<br>当坐标等于终点的坐标时，答案加上一，将标记还原（回溯），<code>return</code> 回去。需要注意的是：起点一定要打上标记。<br>代码：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> t<span class="token punctuation">;</span>
<span class="token keyword">int</span> sx<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> fx<span class="token punctuation">,</span> fy<span class="token punctuation">;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> fx <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> fy<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        sum<span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sy<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> zx<span class="token punctuation">,</span> zy<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>zx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>zy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>zx<span class="token punctuation">]</span><span class="token punctuation">[</span>zy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    flag<span class="token punctuation">[</span>sx<span class="token punctuation">]</span><span class="token punctuation">[</span>sy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">dg</span><span class="token punctuation">(</span>sx<span class="token punctuation">,</span> sy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>搜索</tag>
        <tag>基础算法</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>自己画的一些画</title>
    <url>//posts/drawpic/</url>
    <content><![CDATA[<div class="note info"><p>附注：</p>
<p>这个页面现在没意义了。<br><del>但由于它处于为数不多的“琐碎”分类</del>，此文章将保留。</p>
</div>

<p>放假了闲着没事情干，便画了一些画，放在这儿，留此纪念。</p>
<span id="more"></span>
<p><img src="https://s2.loli.net/2023/12/16/FSTYoytCWcxhQEv.jpg" alt="pencil-box"><br><img src="https://s2.loli.net/2023/12/16/pz9HK4SACUaNoOl.jpg" alt="naozhong"></p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
  </entry>
  <entry>
    <title>消失效果</title>
    <url>//posts/erase-css/</url>
    <content><![CDATA[<p>从 ncase.me 学来的，可以自己看源码。主要是通过<strong>背景图片</strong>的位置实现。结合了 CSS 和 JS。<br>可以自己增加一个函数在隐藏时执行。<br>你只要这样就可以：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
    美好的文字
    Have a good day!
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scratcher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>

<p>代码和示例请看下面。</p>
<span id="more"></span>

<h2 id="代码和使用方法"><a href="#代码和使用方法" class="headerlink" title="代码和使用方法"></a>代码和使用方法</h2><p>模拟的笔涂白是通过 CSS 背景图片的位置完成的。代码如下：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.scratcher</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://s2.loli.net/2023/12/16/NOVHCgALzK4Fd1Q.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span> 200% 2000%<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> 200<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>其中，<code>width</code> <code>height</code> 设为 100% 是为了铺满元素（整个使用时用到），<code>z-index</code> 进行覆盖。<br>使用时请添加 <code>&lt;div class=&quot;scratcher&quot;&gt;&lt;/div&gt;</code> 在准备显示隐藏的元素<strong>内</strong>，使其成为准备隐藏的元素的<strong>子元素</strong>，方便更改容器的位置。下面的 JS 会更改它的位置和大小。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> divList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".scratcher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> divList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>
    divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPosition <span class="token operator">=</span> <span class="token string">"-100% -1900%"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> lpnt <span class="token operator">=</span> divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>lpnt<span class="token punctuation">)</span><span class="token punctuation">.</span>position <span class="token operator">==</span> <span class="token string">"relative"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>bottom <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>
        divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>lpnt<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
        divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>lpnt<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>lpnt<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
    divList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>lpnt<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>为了应对相对定位这种特殊情况，代码中也进行了判断。其他情况则是设置相同大小和位置（<code>left</code>,<code>top</code>），覆盖其父元素。<br>进行擦除和显示时，也采用 JS，自己可以在下面的代码中添加隐藏后执行的函数。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> divList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".scratcher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">eraseAndShow</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 这里是第 num 个覆盖元素</span>
    divList<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"block"</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            divList<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPosition <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">0% </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">100</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// 更改背景位置</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 在这里可以添加准备执行的函数，使用 `setTimeout` 设置延时为 1900 毫秒。</span>
    <span class="token comment">// 例如：</span>
    <span class="token comment">// setTimeout(() => &#123;myFunction();&#125;, 1900);</span>
    <span class="token comment">// 或者在第二行代码处添加参数，传递要执行的函数。</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">19</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            divList<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundPosition <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">-100% </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>i <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">100</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">2100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>divList<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在添加以上所有代码后，就可以在任意一个元素内添加 <code>&lt;div class=&quot;scratcher&quot;&gt;&lt;/div&gt;</code>，再在执行 JavaScript 代码 <code>eraseAndShow(0)</code>，试验性地查看效果。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>下面是一些示例，点击按钮“隐藏和显示”可以看到效果</p>
<style>
    .scratcher {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url(https://s2.loli.net/2023/12/16/NOVHCgALzK4Fd1Q.png);
        background-size: 200% 2000%;
        display: none;
        z-index: 200;
    }
</style>

<p>以下文字在点击按钮后会被更改：</p>
<div id="theFirstExmDiv" style="height:16em;margin-bottom:2em;background-color:#eee;border-radius:3px;border:none;padding:.5em;">
    <p style="margin-bottom:5px;">心情，是一种感情状态，拥有了好心情，也就拥有了自信，继而拥有了年轻和健康。就拥有了对未来生活的向往，充满期待，让我们拥有一份好心情吧，因为生活着就是幸运和快乐。</p>
    <p style="margin-bottom:5px;">当你孤独时，风儿就是我的歌声，愿它能使你得到片刻的安慰；当你骄傲时，雨点就是我的警钟，愿它能使你获得永恒的谦逊。</p>
    <p style="margin-bottom:5px;">友情如水，淡而长远；友情如茶，香而清纯；友情如酒，烈而沁心；友情如雨，细而连绵；友情如雪，松而亮洁。人生短暂，珍惜友情。</p>
    <!-- 乱摘的甜鸡汤 -->
    <a class="btn" id="hidebtn1" href="javascript:eraseAndShow(0, 1);" style="margin-top:0;">隐藏和显示</a>
    <div class="scratcher"></div>
</div>

<p>由于是通过背景图片的位置模拟擦除效果，所以当点击按钮后在消失前按钮无法被点击。这个特性很好地使用在切换容器内容上。</p>
<p>以下是一个简单的示例：</p>
<div class="note danger"><p>danger #d9534f</p>
<p>test</p><p>test</p><p>test</p>
<p>test</p><p>test</p><p>test</p>
<p>test</p><p>test</p><p>test</p>
<a class="btn" id="hidebtn2" href="javascript:eraseAndShow(1);">隐藏和显示</a>
<div class="scratcher"></div></div>

<script>
    var divList = document.querySelectorAll(".scratcher");
    for(let i = 0; i < divList.length; i++) {
        divList[i].style.display = "none";
        divList[i].style.backgroundPosition = "-100% -1900%";
        var lpnt = divList[i].parentNode;
        if(window.getComputedStyle(lpnt).position == "relative") {
            divList[i].style.bottom = "0";
            divList[i].style.right = "0";
        }
        else {
            divList[i].style.top = String(lpnt.offsetTop) + "px";
            divList[i].style.left = String(lpnt.offsetLeft) + "px";
        }
        divList[i].style.width = String(lpnt.offsetWidth) + "px";
        divList[i].style.height = String(lpnt.offsetHeight) + "px";
    }
    function eraseAndShow(num, a) {
        divList[num].style.display = "block";
        for(let i = 1; i <= 19; i++) {
            setTimeout(() => {
                divList[num].style.backgroundPosition = `0% ${i * -100}%`;
            }, i * 100);
        }
        if(num == 0) {
            if(a) {
                setTimeout(() => {
                    document.querySelectorAll("div#theFirstExmDiv p")[0].innerHTML = "112 files changed, 3471 insertions(+), 2065 deletions(-)";
                    document.querySelectorAll("div#theFirstExmDiv p")[1].innerHTML = "Enumerating objects: 425, done.<br>Counting objects: 100% (425/425), done.";
                    document.querySelectorAll("div#theFirstExmDiv p")[2].innerHTML = "Writing objects: 100% (227/227), 1.44 MiB | 875.00 KiB/s, done.<br>Total 227 (delta 111), reused 0 (delta 0), pack-reused 0";
                    document.querySelector("div#theFirstExmDiv a.btn").innerHTML = "重新演示";
                    document.querySelector("div#theFirstExmDiv a.btn").href = "javascript:eraseAndShow(0, 0);";
                }, 1900);
            }
            else {
                setTimeout(() => {
                    document.querySelectorAll("div#theFirstExmDiv p")[0].innerHTML = "心情，是一种感情状态，拥有了好心情，也就拥有了自信，继而拥有了年轻和健康。就拥有了对未来生活的向往，充满期待，让我们拥有一份好心情吧，因为生活着就是幸运和快乐。";
                    document.querySelectorAll("div#theFirstExmDiv p")[1].innerHTML = "当你孤独时，风儿就是我的歌声，愿它能使你得到片刻的安慰；当你骄傲时，雨点就是我的警钟，愿它能使你获得永恒的谦逊。";
                    document.querySelectorAll("div#theFirstExmDiv p")[2].innerHTML = "友情如水，淡而长远；友情如茶，香而清纯；友情如酒，烈而沁心；友情如雨，细而连绵；友情如雪，松而亮洁。人生短暂，珍惜友情。";
                    document.querySelector("div#theFirstExmDiv a.btn").innerHTML = "隐藏和显示";
                    document.querySelector("div#theFirstExmDiv a.btn").href = "javascript:eraseAndShow(0, 1);";
                }, 1900);
            }
        }
        for(let i = 1; i <= 19; i++) {
            setTimeout(() => {
                divList[num].style.backgroundPosition = `-100% ${i * -100}%`;
            }, i * 100 + 2100);
        }
        setTimeout(() => {divList[num].style.display = "none";}, 4000);
    }
</script>

<hr>

<p>希望对自己，对别人都有帮助！</p>
<!-- https://ncase.me/trust/ -->
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>//posts/erfen/</url>
    <content><![CDATA[<h2 id="二分的意义"><a href="#二分的意义" class="headerlink" title="二分的意义"></a>二分的意义</h2><p><strong>优化</strong>。顾名思义，将一整个<strong>有序的</strong>数列分成两个部分，不断缩小边界，查找某个数字。<br>二分的时间复杂度为 $O(log\ 2\ n)$ 。</p>
<p>此时，我们学的还是整数二分以及浮点二分。</p>
<h2 id="整数二分的两个模板"><a href="#整数二分的两个模板" class="headerlink" title="整数二分的两个模板"></a>整数二分的两个模板</h2><p>二分的前提是这个序列是<strong>有序的</strong>，也就是单调递增的。<br>一般来说，二分会取中间值进行初始化，再判断这个中间值是否大于目标值。若是，则缩减左边界，否则缩减右边界。直至逼近答案。<br>说“逼近”，是因为有时查找的元素不存在于序列中，那所二分出的答案是接近于的，但又是不正确的。所以要加上一个特判。除非说明给出的想查询的元素所有都是存在于序列中的。</p>
<span id="more"></span>

<p>二分听起来还简单，但是实现起来<del>可能对我来说</del>还要多方面考虑。例如，当这样一段二分代码（假设数组 $a$ 的下标从 $1$ 开始）：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x <span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> m <span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid <span class="token punctuation">;</span>
        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>此时， $l$ 或 $r$ 其实已经是正确答案了，但是它会陷入死循环。例如 $a$ 为 $1 \ 2 \ 3 \ 4 \ 5$， $x$ 为 $4$ 时，是这样的：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">&#123;\color&#123;green&#125;1 \ 2 \ 3 \ 4 \ 5&#125; \\
(\texttt&#123;mid&#125;&#x3D;(1+5)&#x2F;2&#x3D;3, a[\texttt&#123;mid&#125;]&#x3D;3, 4&gt;3, l&#x3D;\texttt&#123;mid&#125;&#x3D;3, r&#x3D;5) \\
&#123;\color&#123;red&#125;1 \ 2 \ &#125;&#123;\color&#123;green&#125; 3 \ 4 \ 5&#125; \\
(\texttt&#123;mid&#125;&#x3D;(4+5)&#x2F;2&#x3D;4, a[\texttt&#123;mid&#125;]&#x3D;4, 4&#x3D;4, l&#x3D;3, r&#x3D;\texttt&#123;mid&#125;&#x3D;4) \\
&#123;\color&#123;red&#125;1 \ 2 \ &#125;&#123;\color&#123;green&#125; 3 \ 4 \ &#125;&#123;\color&#123;red&#125;5&#125; \\
(\texttt&#123;mid&#125;&#x3D;(3+4)&#x2F;2&#x3D;3, a[\texttt&#123;mid&#125;]&#x3D;3, 4&gt;3, l&#x3D;\texttt&#123;mid&#125;&#x3D;3, r&#x3D;4) \\
&#123;\color&#123;red&#125;1 \ 2 \ &#125;&#123;\color&#123;green&#125; 3 \ 4 \ &#125;&#123;\color&#123;red&#125;5&#125; \\
(\texttt&#123;mid&#125;&#x3D;(3+4)&#x2F;2&#x3D;3, a[\texttt&#123;mid&#125;]&#x3D;3, 4&gt;3, l&#x3D;\texttt&#123;mid&#125;&#x3D;3, r&#x3D;4) \\
&#123;\color&#123;red&#125;1 \ 2 \ &#125;&#123;\color&#123;green&#125; 3 \ 4 \ &#125;&#123;\color&#123;red&#125;5&#125; \\
(\texttt&#123;mid&#125;&#x3D;(3+4)&#x2F;2&#x3D;3, a[\texttt&#123;mid&#125;]&#x3D;3, 4&gt;3, l&#x3D;\texttt&#123;mid&#125;&#x3D;3, r&#x3D;4) \\
\textup&#123;...Forever...&#125;</code></pre>

<p>因此，我们为什么不把 $l$ 的赋值加上一个呢？这样就不会无限循环下去了。就像这样：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x <span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> m <span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>
        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>这就是整数二分的一个模板了。又或者：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">></span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid <span class="token punctuation">;</span>
    <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h2><p>其实，任何一个算法都是相通的。二分也是一样。浮点二分可能比整数二分简单一些。<del>（出自于我们老师之口）</del></p>
<p>但，最重要的就是<strong>精度问题</strong>。<br>它决定了 ${\texttt{TLE}}$ 和 $\texttt{WA}$ 以及 $\texttt{AC}$ 之间的差距。详见 <a href="https://www.luogu.com.cn/problem/P3743">洛谷P3743</a> 以及 <a href="https://www.luogu.com.cn/record/list?user=857826&pid=P3743&language=28&orderBy=0&status=&page=1">我可怜的评测记录</a> 。这就是残酷的现实！代码是简单了很多，但是要确定<em><strong>精度</strong></em>!!!</p>
<p>好了，模版代码<del>大放送</del>：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e10</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1e10</span> <span class="token punctuation">;</span> <span class="token comment">// 此处数字仅作为一个演示值！！请不要把这个数字当成固定的写法，此处的数字应为题目提供的数据。</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">></span> <span class="token number">1e-6</span><span class="token punctuation">)</span> <span class="token comment">// 此处的数字同上，模板应为 1e-x</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span> <span class="token comment">// 这就是老师所说的了：它是浮点，管他什么整除呢，除就是了！！！什么 mid r l ++ -- 的，去它的！！ (doge)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token comment">/*这里是判断条件，可以是check函数(二分答案)，可以是普通查找*/</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        l <span class="token operator">=</span> mid <span class="token punctuation">;</span> <span class="token comment">// 此处仅为演示，请根据条件写 l=mid 或 r=mid</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        r <span class="token operator">=</span> mid <span class="token punctuation">;</span> <span class="token comment">// 同上</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h2><p>当我们想要枚举时，二分自然就是枚举的首选前提。一般来说，二分答案会写一个函数，传统名称为 <code>check</code> 。<br>其实它还是二分，只不过判断的条件由单一的 <code>valuname &gt; name[mid]</code> 变成了一个判断函数而已。<del>我是不是没讲清楚啊</del> $\texttt{\color{white}但也没什么好讲的了}$  </p>
<ul>
<li><input checked="" disabled="" type="checkbox"> Not Friendly</li>
<li><input disabled="" type="checkbox"> That’s Good</li>
</ul>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 gdb 调试代码</title>
    <url>//posts/gdb-debug-file/</url>
    <content><![CDATA[<p>这几天刚去学习了一下用 gdb 调试代码，在这儿记下来。</p>
<p>首先，编译代码的时候需要加上 <code>-g</code> 选项，说明要加上调试信息，这样才可以正常调试。例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ g++ <span class="token parameter variable">-g</span> oi.cpp <span class="token parameter variable">-o</span> oi.exe</code></pre>

<p>随后，即可使用 gdb 打开文件进行调试。直接使用 <code>gdb [file name]</code> 即可。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ gdb oi
GNU gdb <span class="token punctuation">(</span>GDB<span class="token punctuation">)</span> <span class="token number">7.8</span>.1
Copyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> <span class="token number">2014</span> Free Software Foundation, Inc.
License GPLv3+: GNU GPL version <span class="token number">3</span> or later <span class="token operator">&lt;</span>http://gnu.org/licenses/gpl.html<span class="token operator">></span>
<span class="token comment"># ...[很多信息]</span>
For help, <span class="token builtin class-name">type</span> <span class="token string">"help"</span><span class="token builtin class-name">.</span>
Type <span class="token string">"apropos word"</span> to search <span class="token keyword">for</span> commands related to <span class="token string">"word"</span><span class="token punctuation">..</span>.
Reading symbols from oi<span class="token punctuation">..</span>.done. <span class="token comment"># 成功信息</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span>  <span class="token comment"># 现在可以键入调试命令了</span></code></pre>

<span id="more"></span>

<p>gdb 一些常用调试命令（命令缩写）的详细解释：</p>
<h2 id="代码、路径"><a href="#代码、路径" class="headerlink" title="代码、路径"></a>代码、路径</h2><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>命令缩写是 <code>l</code>。<br>可以查看代码，后面跟上数字说明要查看<strong>第几行附近的代码</strong>，或者跟上函数名说明要查看这个<strong>函数附近的代码</strong>。若没有参数则继续从上一次最后显示的那一行显示下去。</p>
<p>例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> l <span class="token number">17</span>
<span class="token number">12</span>          for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span>
<span class="token number">13</span>          <span class="token punctuation">&#123;</span>
<span class="token number">14</span>              char l, r<span class="token punctuation">;</span>
<span class="token number">15</span>              <span class="token keyword">if</span><span class="token variable"><span class="token punctuation">((</span>s[i] <span class="token operator">>=</span> 'a' <span class="token operator">&amp;&amp;</span> s[i] <span class="token operator">&lt;=</span> 'z'<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s[i] <span class="token operator">>=</span> '<span class="token number">0</span>' <span class="token operator">&amp;&amp;</span> s[i] <span class="token operator">&lt;=</span> '<span class="token number">9</span>'<span class="token punctuation">))</span></span>
<span class="token number">16</span>              <span class="token punctuation">&#123;</span>
<span class="token number">17</span>                  l <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment"># 这是代码外的注释：行显示在中间。</span>
<span class="token number">18</span>                  ans<span class="token punctuation">[</span>cnt++<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">19</span>              <span class="token punctuation">&#125;</span>
<span class="token number">20</span>              if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>
<span class="token number">21</span>              <span class="token punctuation">&#123;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> list main
<span class="token number">3</span>
<span class="token number">4</span>       int p1, p2, p3, cnt<span class="token punctuation">;</span>
<span class="token number">5</span>       char s<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">6</span>       char ans<span class="token punctuation">[</span><span class="token number">7000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">7</span>       int main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">8</span>       <span class="token punctuation">&#123;</span>
<span class="token number">9</span>           scanf<span class="token punctuation">(</span><span class="token string">"%d %d %d<span class="token entity" title="\n">\n</span>"</span>, <span class="token operator">&amp;</span>p1, <span class="token operator">&amp;</span>p2, <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">10</span>          scanf<span class="token punctuation">(</span><span class="token string">"%s"</span>, <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span>
<span class="token number">12</span>          for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> l <span class="token comment"># 继续显示</span>
<span class="token number">13</span>          <span class="token punctuation">&#123;</span>
<span class="token number">14</span>              char l, r<span class="token punctuation">;</span>
<span class="token number">15</span>              <span class="token keyword">if</span><span class="token variable"><span class="token punctuation">((</span>s[i] <span class="token operator">>=</span> 'a' <span class="token operator">&amp;&amp;</span> s[i] <span class="token operator">&lt;=</span> 'z'<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s[i] <span class="token operator">>=</span> '<span class="token number">0</span>' <span class="token operator">&amp;&amp;</span> s[i] <span class="token operator">&lt;=</span> '<span class="token number">9</span>'<span class="token punctuation">))</span></span>
<span class="token number">16</span>              <span class="token punctuation">&#123;</span>
<span class="token number">17</span>                  l <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">18</span>                  ans<span class="token punctuation">[</span>cnt++<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token number">19</span>              <span class="token punctuation">&#125;</span>
<span class="token number">20</span>              if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span>
<span class="token number">21</span>              <span class="token punctuation">&#123;</span>
<span class="token number">22</span>                  r <span class="token operator">=</span> s<span class="token punctuation">[</span>i + <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>

<h3 id="info-source"><a href="#info-source" class="headerlink" title="info source"></a>info source</h3><p>可以简写为 <code>i source</code><br>获取代码信息，可以查看 gdb 获取的代码路径是否正确。</p>
<p>例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info <span class="token builtin class-name">source</span>
Current <span class="token builtin class-name">source</span> <span class="token function">file</span> is oi.cpp
Compilation directory is D:<span class="token punctuation">\</span>MyCode
Located <span class="token keyword">in</span> D:<span class="token punctuation">\</span>MyCode<span class="token punctuation">\</span>oi.cpp
Contains <span class="token number">65</span> lines.
Source language is c++.
Compiled with DWARF <span class="token number">2</span> debugging format.
Does not include preprocessor macro info.</code></pre>

<h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>参数是文件路径，可以重新打开一个文件调试。<br>例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token function">file</span> D:<span class="token punctuation">\</span><span class="token punctuation">\</span>MyCode<span class="token punctuation">\</span><span class="token punctuation">\</span>oi
Reading symbols from D:<span class="token punctuation">\</span>MyCode<span class="token punctuation">\</span>oi<span class="token punctuation">..</span>.done.</code></pre>

<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>同任何命令行的 cd 命令一样，切换工作文件夹。</p>
<h2 id="程序运行时"><a href="#程序运行时" class="headerlink" title="程序运行时"></a>程序运行时</h2><p><code>run</code> 命令。<br>命令缩写是 <code>r</code>。<br><strong>运行程序</strong>，直至遇到断点或程序结束。</p>
<p><code>print</code> 命令。<br>命令缩写是 <code>p</code>。<br>在<strong>程序运行</strong>时输出变量（数组）的值。</p>
<p><code>break</code> 命令。<br>命令缩写是 <code>b</code>，参数是行号或函数名。<br>表示在函数或第几行设置断点。<br>例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> main
Breakpoint <span class="token number">1</span> at 0x40153d: <span class="token function">file</span> oi.cpp, line <span class="token number">9</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> b <span class="token number">43</span>
Breakpoint <span class="token number">2</span> at 0x401722: <span class="token function">file</span> oi.cpp, line <span class="token number">43</span>.</code></pre>

<p><code>continue</code> 命令。<br>命令缩写是 <code>c</code>。<br>遇到断点后使用，<strong>继续执行</strong>，运行到下一个断点或程序结束。</p>
<p><code>delete</code> 命令。<br>命令缩写是 <code>d</code>。<br>删除断点，参数是<strong>断点编号</strong>。就是 <code>Breakpoint 1 at []: file [], line [].</code> Breakpoint 后面的数字。</p>
<p><code>next</code> 命令。<br>命令缩写是 <code>n</code>。<br>执行当前行语句，如果当前行有函数调用，则将其视为一个整体执行。</p>
<p>熟知以上这些，就可以简单地调试代码了。<br>一个实例：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> <span class="token number">25</span>
Breakpoint <span class="token number">1</span> at 0x4016b1: <span class="token function">file</span> oi.cpp, line <span class="token number">25</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> <span class="token number">32</span>
Breakpoint <span class="token number">2</span> at 0x4016ea: <span class="token function">file</span> oi.cpp, line <span class="token number">32</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">break</span> <span class="token number">35</span>
Breakpoint <span class="token number">3</span> at 0x4016fe: <span class="token function">file</span> oi.cpp, line <span class="token number">35</span>.
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> run
Starting program: D:<span class="token punctuation">\</span>MyCode<span class="token punctuation">\</span>oi.exe
<span class="token punctuation">[</span>New Thread <span class="token number">37568</span>.0x97c8<span class="token punctuation">]</span>
<span class="token punctuation">[</span>New Thread <span class="token number">37568</span>.0x25fc<span class="token punctuation">]</span>
<span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span>
a-d-d

Breakpoint <span class="token number">2</span>, main <span class="token punctuation">(</span><span class="token punctuation">)</span> at oi.cpp:33
<span class="token number">33</span>                          l <span class="token operator">=</span> l - <span class="token string">'a'</span> + <span class="token string">'A'</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print p1
<span class="token variable">$2</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print p2
<span class="token variable">$3</span> <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> p p3
<span class="token variable">$4</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> c
Continuing.

Breakpoint <span class="token number">3</span>, main <span class="token punctuation">(</span><span class="token punctuation">)</span> at oi.cpp:37
<span class="token number">37</span>                  if<span class="token punctuation">(</span>p3 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print l
<span class="token variable">$5</span> <span class="token operator">=</span> <span class="token number">65</span> <span class="token string">'A'</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print r
<span class="token variable">$6</span> <span class="token operator">=</span> <span class="token number">68</span> <span class="token string">'D'</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">continue</span>
Continuing.

Breakpoint <span class="token number">1</span>, main <span class="token punctuation">(</span><span class="token punctuation">)</span> at oi.cpp:25
<span class="token number">25</span>                      ans<span class="token punctuation">[</span>cnt++<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print ans<span class="token punctuation">[</span>cnt - <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token variable">$7</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token string">'d'</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> print ans
<span class="token variable">$8</span> <span class="token operator">=</span> <span class="token string">"aCCCBBBd"</span>, <span class="token string">'\000'</span> <span class="token operator">&lt;</span>repeats <span class="token number">6991</span> times<span class="token operator">></span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> <span class="token builtin class-name">continue</span>
Continuing.
aCCCBBBd-d
<span class="token punctuation">[</span>Thread <span class="token number">37568</span>.0x25fc exited with code <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span>Inferior <span class="token number">1</span> <span class="token punctuation">(</span>process <span class="token number">37568</span><span class="token punctuation">)</span> exited normally<span class="token punctuation">]</span> <span class="token comment"># 程序结束</span></code></pre>

<h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><p>获取信息通常使用 <code>info</code> 命令。就介绍常用的那些。</p>
<p><code>info breakpoint</code><br>可以简写为 <code>i b</code>，查看断点信息。</p>
<p><code>info registers</code><br>可以简写为 <code>i reg</code>，查看寄存器信息。</p>
<p><code>info stack</code><br>可以简写为 <code>i s</code>，查看堆栈使用，在递归的时候很有效。</p>
<p>实例：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info breakpoint
Num     Type           Disp Enb Address            What
<span class="token number">1</span>       breakpoint     keep y   0x000000000040153b <span class="token keyword">in</span> dfs<span class="token punctuation">(</span>int<span class="token punctuation">)</span> at oi.cpp:10
        breakpoint already hit <span class="token number">5</span> <span class="token builtin class-name">times</span>
<span class="token number">2</span>       hw watchpoint  keep y                      x
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info reg
rax            0x4      <span class="token number">4</span>
rbx            0x1      <span class="token number">1</span>
rcx            0x4      <span class="token number">4</span>
rdx            0x3      <span class="token number">3</span>
rsi            0x11     <span class="token number">17</span>
rdi            0xc41440 <span class="token number">12850240</span>
rbp            0x6cfcf0 0x6cfcf0
rsp            0x6cfcc0 0x6cfcc0
r8             0xc43d10 <span class="token number">12860688</span>
r9             0x1      <span class="token number">1</span>
r10            0xc40000 <span class="token number">12845056</span>
r11            0x6ceac0 <span class="token number">7137984</span>
r12            0x1      <span class="token number">1</span>
r13            0x8      <span class="token number">8</span>
r14            0x0      <span class="token number">0</span>
r15            0x0      <span class="token number">0</span>
rip            0x40153b 0x40153b <span class="token operator">&lt;</span>dfs<span class="token punctuation">(</span>int<span class="token punctuation">)</span>+1<span class="token operator"><span class="token file-descriptor important">1</span>></span>
eflags         0x206    <span class="token punctuation">[</span> PF IF <span class="token punctuation">]</span>
cs             0x33     <span class="token number">51</span>
ss             0x2b     <span class="token number">43</span>
ds             0x0      <span class="token number">0</span> 
es             0x0      <span class="token number">0</span> 
fs             0x0      <span class="token number">0</span> 
gs             0x0      <span class="token number">0</span>
<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> info stack
<span class="token comment">#0  dfs (x=10) at oi.cpp:10</span>
<span class="token comment">#1  0x00000000004015b5 in dfs (x=9) at oi.cpp:20</span>
<span class="token comment">#2  0x00000000004015b5 in dfs (x=8) at oi.cpp:20</span>
<span class="token comment">#3  0x00000000004015b5 in dfs (x=7) at oi.cpp:20</span>
<span class="token comment">#4  0x00000000004015b5 in dfs (x=6) at oi.cpp:20</span>
<span class="token comment">#5  0x00000000004015b5 in dfs (x=5) at oi.cpp:20</span>
<span class="token comment">#6  0x00000000004015b5 in dfs (x=4) at oi.cpp:20</span>
<span class="token comment">#7  0x00000000004015b5 in dfs (x=3) at oi.cpp:20</span>
<span class="token comment">#8  0x00000000004015b5 in dfs (x=2) at oi.cpp:20</span>
<span class="token comment">#9  0x00000000004015b5 in dfs (x=1) at oi.cpp:20</span>
<span class="token comment">#10 0x00000000004015b5 in dfs (x=0) at oi.cpp:20</span>
<span class="token comment">#11 0x000000000040163c in main () at oi.cpp:30</span></code></pre>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>shell</code> 命令。<br>可以执行终端命令。</p>
<p><code>quit</code> 命令。<br>简写为 <code>q</code>。<br>退出 gdb 调试。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>编译</tag>
      </tags>
  </entry>
  <entry>
    <title>函数</title>
    <url>//posts/function/</url>
    <content><![CDATA[<h2 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h2><p>一般来说，我都是懂的。函数的总用比较简单：</p>
<ol>
<li>优化代码量</li>
<li>让程序代码更加清晰明了</li>
<li>调用时更加方便</li>
</ol>
<p>总之，函数的存在就是为了更加<strong>方便</strong>，<strong>清晰</strong>，<strong>快速</strong>。</p>
<span id="more"></span>

<h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>方法：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>函数类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>函数名称<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token punctuation">[</span>主体<span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<hr>

<p><strong>注意</strong>：当不返回(无<code>return</code>)时，函数类型应为<code>void</code>(表面含义<em>无类型</em>)。</p>
<h2 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h2><p>当你运行<strong>这段代码</strong>时：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> x <span class="token punctuation">;</span>
    x <span class="token operator">=</span> y <span class="token punctuation">;</span>
    y <span class="token operator">=</span> t <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b <span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>你会发现<code>a</code>还是<code>a</code>，<code>b</code>还是<code>b</code>。</p>
<p>这是因为<code>swap(int, int)</code>只是把<strong>函数内的</strong><code>x</code>和<code>y</code>交换了而已，<code>a</code>和<code>b</code>没有交换。</p>
<p>因为<code>x</code>和<code>y</code>对于*<code>main</code>函数*来说只是形参，<code>x</code>和<code>y</code>只是拷了一份<code>a</code>和<code>b</code>。</p>
<p>如果想交换<code>a</code>和<code>b</code>需要这样写：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> x <span class="token punctuation">;</span>
    x <span class="token operator">=</span> y <span class="token punctuation">;</span>
    y <span class="token operator">=</span> t <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b <span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>此时此刻，你使用<code>x</code>和<code>y</code>就相当于引用了<code>a</code>和<code>b</code>。</p>
<h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>函数名不可重复。</p>
<p>但是有几种方法可以重复：</p>
<ul>
<li>函数参数类型不同</li>
<li>函数参数数量不同</li>
</ul>
<p>比如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>输出：</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">3
Hello</code></pre>

<hr>

<p><strong>注意：</strong>仅仅函数类型不同不足以区分两个函数！</p>
<h2 id="拓展：主函数中的argc和argv-实际上我不懂"><a href="#拓展：主函数中的argc和argv-实际上我不懂" class="headerlink" title="拓展：主函数中的argc和argv 实际上我不懂"></a>拓展：主函数中的<code>argc</code>和<code>argv</code> <del>实际上我不懂</del></h2><p>用法：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>

<p>或：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span></code></pre>

<hr>

<p>含义：</p>
<ol>
<li><code>argc</code>：<strong>是argument count 的缩写，保存运行时传递给main函数的参数个数。</strong></li>
<li><code>argv</code>：<strong>是argument vector 的缩写，保存运行时传递main函数的参数，类型是一个字符指针数组，每个元素是一个字符指针，指向一个命令行参数。</strong></li>
</ol>
<p>比如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sum: %d\n"</span><span class="token punctuation">,</span> argc<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"argc[%d], %s\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>打开命令行，<code>cd</code>文件所在文件夹，输入：<code>[file name].[file extension] hello world i am so happy</code></p>
<p>结果为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">sum: <span class="token number">7</span>
argc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>, 未命名1.exe
argc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, hello
argc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>, world
argc<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>, i
argc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>, am
argc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>, so
argc<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>, happy</code></pre>

<p>这就是<code>main</code>函数参数作用。</p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
        <tag>函数，参数</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 的连接 Github 小记</title>
    <url>//posts/git-github/</url>
    <content><![CDATA[<p>又是一个随记，方便自己使用的。<br>首先，得到 <a href="https://git-scm.com/downloads">官网下载</a>，随后测试一下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token parameter variable">-v</span>
<span class="token function">git</span> version <span class="token punctuation">(</span>VERSION<span class="token punctuation">)</span></code></pre>

<p>就下载好了。</p>
<span id="more"></span>
<h2 id="使用-SSH-连接-Github"><a href="#使用-SSH-连接-Github" class="headerlink" title="使用 SSH 连接 Github"></a>使用 SSH 连接 Github</h2><p>首先确保拥有一个 Github 账号，打开终端，生成 SSH 密钥：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"email"</span></code></pre>

<p>它的提示全部回车就可以了。”email” 是 Github 注册使用的邮箱地址。</p>
<p>成功后会在用户文件夹（Windows 下通常是 <code>%USERPROFILE%</code> 环境变量，Linux 直接打开 <code>~/</code>）下生成一个 <code>.ssh</code> 文件夹，打开 <code>id_rsa.pub</code> 文件，复制里面的密钥后回到 Github 打开设置，找到 “<strong>SSH anf PGP keys</strong>“ 一栏，点击 “New SSH key”，Title 填上，将刚刚复制的密钥粘贴到 “Key” 一栏，点击 “Add SSH key” 保存。</p>
<p><img src="https://s2.loli.net/2023/08/13/L3bmqAR1vf2whSM.png" alt="git-github.png"></p>
<p>随后可以验证是否完成，打开终端输入：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
The authenticity of <span class="token function">host</span> <span class="token string">'github.com (IP ADDRESS)'</span> can<span class="token string">'t be established.
RSA key fingerprint is (FINGERPRINT).
Are you sure you want to continue connecting (yes/no)? yes #在这里输入 yes
Hi (USER NAME)! You'</span>ve successfully authenticated, but GitHub does not provide shell access. <span class="token comment">#连接成功</span></code></pre>

<h2 id="连接-Github-仓库"><a href="#连接-Github-仓库" class="headerlink" title="连接 Github 仓库"></a>连接 Github 仓库</h2><p>新建 Github 仓库。在电脑新建一个文件夹，创建一些文件，然后打开终端：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init
Initialized empty Git repository <span class="token keyword">in</span> /.git/

$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">(</span>FILE NAME<span class="token punctuation">)</span> <span class="token comment">#你可以不断 add，也可以直接 git add .</span>
create mode <span class="token number">100644</span> <span class="token punctuation">(</span>FILE NAME<span class="token punctuation">)</span>

$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"The commit information"</span> <span class="token comment">#建议 commit 信息用英文写详细，养成好习惯</span>

$ <span class="token function">git</span> branch <span class="token parameter variable">-M</span> main <span class="token comment">#现在的 Github 默认为 main 分支</span>

$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:<span class="token punctuation">(</span><span class="token environment constant">USER</span> NAME<span class="token punctuation">)</span>/<span class="token punctuation">(</span>REPOSITORY NAME<span class="token punctuation">)</span>.git <span class="token comment">#改成自己的用户名和仓库名</span>

$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin main
Enumerating objects: <span class="token number">7735</span>, done.
Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">7735</span>/7735<span class="token punctuation">)</span>, done.
Delta compression using up to <span class="token number">4</span> threads
Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">7413</span>/7413<span class="token punctuation">)</span>, done.
Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">7735</span>/7735<span class="token punctuation">)</span>, <span class="token number">55.74</span> MiB <span class="token operator">|</span> <span class="token number">1.53</span> MiB/s, done.
Total <span class="token number">7735</span> <span class="token punctuation">(</span>delta <span class="token number">2030</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>      
remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2030</span>/2030<span class="token punctuation">)</span>, done.
To github.com:<span class="token punctuation">(</span><span class="token environment constant">USER</span> NAME<span class="token punctuation">)</span>/<span class="token punctuation">(</span>REPOSITORY NAME<span class="token punctuation">)</span>.git
 * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      main -<span class="token operator">></span> main
branch <span class="token string">'main'</span> <span class="token builtin class-name">set</span> up to track <span class="token string">'origin/main'</span><span class="token builtin class-name">.</span></code></pre>

<p>打开 Github，可以看到 Commit 记录和提交的文件。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>普通图的储存和遍历</title>
    <url>//posts/graph-search/</url>
    <content><![CDATA[<p>其实之前也写过关于<a href="/posts/graph-tree/#%E6%A0%91%E7%9A%84%E5%82%A8%E5%AD%98">图的储存</a>的文章，但是没写全，也没有写代码。在这里把最近复习的重新补上来。<br>这里只讲了三种储存：邻接矩阵、邻接表、链式前向星，对于遍历，只记录写法较简单的邻接表。</p>
<span id="more"></span>

<h2 id="储存"><a href="#储存" class="headerlink" title="储存"></a>储存</h2><p>题目：<a href="https://www.luogu.com.cn/problem/B3643">洛谷 B3643 图的存储</a></p>
<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>由于这个方法是比较常用的，把它提到前面。</p>
<p>用一个<strong>动态数组</strong>（通常是 STL 提供的 <code>std::vector</code>）存储每一个结点的出边。二维数组 e 中，<code>e[i]</code> 中的每一个元素 j 代表结点有一条从 i 到 j 的边。<br>对于无向图，若 u, v 存在边，则将 <code>v</code> 加入 <code>e[u]</code>，将 <code>u</code> 加入 <code>e[v]</code>。<br>对于路径权值，通常使用结构体（包含两个变量）。分别代表该出边的权值和连接到的结点。</p>
<p>示例：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> e<span class="token punctuation">[</span><span class="token number">1003</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n 代表该图的结点数，m 是该图的边数</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span> <span class="token comment">// 输入 u, v 表示 u 和 v 之间有一条边</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        e<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里是无向图的写法</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 以下关于“储存”代码示例的输入也按照上面的格式</span></code></pre>

<p>邻接表的空间、时间复杂度都比较优异，平常一般使用它。<br>下面所写的遍历就使用了邻接表</p>
<h3 id="邻接矩阵（一般不用）"><a href="#邻接矩阵（一般不用）" class="headerlink" title="邻接矩阵（一般不用）"></a>邻接矩阵（一般不用）</h3><p>用一个<strong>二维的布尔数组</strong>存储。数组 a 中，<code>a[i][j]</code> 如果为 1 则代表着编号为 i 的结点与编号为 j 的结点之间存在一条从 i 到 j 的边。对于无向图，若 u, v 间存在边，直接使 <code>a[u][v]</code> 和 <code>a[v][u]</code> 同时为 1 即可（代表着 u 和 v 之间有一条双向边）。</p>
<p>示例：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> a<span class="token punctuation">[</span><span class="token number">1003</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1003</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>使用它存图，时间复杂度（遍历整张图）和空间复杂度自然都很大。一般只会在边数接近点数平方的图（<strong>稠密图</strong>）上使用。</p>
<h3 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h3><p>实际上就是用链表重现邻接表。详见代码：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> to<span class="token punctuation">,</span> next<span class="token punctuation">;</span> <span class="token comment">// to: 边的终点  next: 下一条边</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> TEMP <span class="token operator">=</span> <span class="token number">2e6</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> head<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// head[i]: 以 i 为起点的第一条边的编号  cnt: 当前边的编号</span>
node tree<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 这里是本体数组</span>

<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>to <span class="token operator">=</span> b<span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>
    head<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">add</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>链式前向星主要用于边比较多，顶点比较少的情况<br>链式前向星的优点：比邻接表还省空间，可以解决某些卡空间的问题，删除边也很方便，只需要更改next指针的指向即可。<br>根据图的疏密选择存储方式，一般情况下用邻接表，卡空间时间这些要求比较高的题目或者需要删除边操作的用链式前向星。<br><a href="https://www.acwing.com/blog/content/6994/">https://www.acwing.com/blog/content/6994/</a></p>
</blockquote>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>以下的遍历都使用<strong>邻接表</strong>。以<strong>有向图</strong>为例。</p>
<p>直接使用代码吧，解释都在注释了。</p>
<div class="tabs" id="searchgraph"><ul class="nav-tabs"><li class="tab"><a href="#searchgraph-1">DFS</a></li><li class="tab active"><a href="#searchgraph-2">BFS</a></li></ul><div class="tab-content"><div class="tab-pane" id="searchgraph-1"><p>遍历了<strong>从结点编号为 1 到最后一个结点（编号为 n）的所有路径</strong>，</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 有向图（不保证无环）</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment">// 结点个数</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> e<span class="token punctuation">[</span><span class="token number">1503</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// e: 一个图的邻接表</span>
<span class="token keyword">bool</span> flag<span class="token punctuation">[</span><span class="token number">1503</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录该结点（同一条路径）是否访问过</span>
<span class="token comment">// 递归实现</span>
<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">)</span> <span class="token comment">// now: 当前结点</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 遍历到了最后一个结点</span>
    flag<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 防止重复走一个环</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    flag<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 搜索回溯，若只要遍历一次结点，请把这行代码注释掉</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>所有的搜索遍历都大同小异。</p></div><div class="tab-pane active" id="searchgraph-2"><p>遍历了<strong>所有结点</strong></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 有向图（不保证无环）</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment">// 结点个数</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> e<span class="token punctuation">[</span><span class="token number">1503</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//  一个图的邻接表</span>
<span class="token keyword">bool</span> flag<span class="token punctuation">[</span><span class="token number">1503</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录该结点（同一条路径）是否访问过</span>

queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从结点 1 开始访问，就先把它连向的所有加入队列</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> now <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">[</span>e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 没有访问过</span>
        <span class="token punctuation">&#123;</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            flag<span class="token punctuation">[</span>e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></div></div></div>

<p>一个例题：<a href="https://www.luogu.com.cn/problem/P1807">洛谷 P1807 最长路</a>。<br>简述：n 个顶点，m 条边的<strong>带权有向无环图</strong>，各结点编号为 1 到 n。求从 1 到 n 的最长路径，输出最大权值。若无法从 1 到达 n 输出 -1。<br>输入：n(<code>1&lt;=n&lt;=1500</code>), m(<code>0&lt;=m&lt;=5e4</code>)。接下来 m 行，每行三个整数 u, v, w(<code>-1e5&lt;=w&lt;=1e5</code>)，表示有一条从 u 到 v 的有向边，边权为 w。</p>
<p>解题（DFS）：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> next<span class="token punctuation">,</span> weight<span class="token punctuation">;</span> <span class="token comment">// next: 该有向边指向的结点  wei: 该有向边的权值</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token comment">// /=> 设置为负数是因为防止负权值</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> maxw <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0x7fffffff</span><span class="token punctuation">,</span> flag<span class="token punctuation">[</span><span class="token number">1503</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// maxw: 最大权值（从 1 到 n 的最长路权值）  flag[i]: 从 1 到 i 的最大权值</span>
<span class="token keyword">bool</span> isvis<span class="token punctuation">;</span> <span class="token comment">// 是否访问到第 n 个结点</span>
vector<span class="token operator">&lt;</span>node<span class="token operator">></span> e<span class="token punctuation">[</span><span class="token number">1503</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 邻接表</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">int</span> wei<span class="token punctuation">)</span> <span class="token comment">// now: 当前访问到的结点  wei: 当前走到这个结点的权值</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token comment">// 访问到第 n 个结点</span>
    <span class="token punctuation">&#123;</span>
        isvis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        maxw <span class="token operator">=</span> <span class="token punctuation">(</span>wei <span class="token operator">></span> maxw<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>wei<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>maxw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将最大权值替换成本次所得结果</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// /=> 剪枝</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">>=</span> wei<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 上次的答案比本次运算结果要大，本次结果一定偏小，直接退出</span>
    flag<span class="token punctuation">[</span>now<span class="token punctuation">]</span> <span class="token operator">=</span> wei<span class="token punctuation">;</span> <span class="token comment">// 记录本次（更大）的答案</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">,</span> wei <span class="token operator">+</span> e<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按次序遍历当前结点的下一个结点</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存图开始（邻接表）</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span>
        node data<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data<span class="token punctuation">.</span>next <span class="token operator">=</span> v<span class="token punctuation">;</span>
        data<span class="token punctuation">.</span>weight <span class="token operator">=</span> w<span class="token punctuation">;</span>
        e<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token comment">// 存图结束</span>

    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从 1 开始访问，最初的权值为 0</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>isvis<span class="token punctuation">)</span> <span class="token comment">// 到达过第 n 个结点</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> maxw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有到达</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>搜索</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 建立静态博客记录</title>
    <url>//posts/hexo-pretty/</url>
    <content><![CDATA[<p>这篇文章主要是为了记录自己用 Hexo 建站（主题 NexT）的经过，方便他人查阅和自己以后用。<br>关于 Hexo 的准备，可以看<a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/docs/index.html">官方文档 <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>，关于主题 NexT 的，可以看 <a target="_blank" rel="noopener" href="https://theme-next.js.org/docs/">这里 <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a></p>
<p>如果你是的阅读目的是准备第一次使用 Hexo 搭博客，可以遵照本文提示看。<br>如果你准备美化你的 Hexo（最好且主题为 NexT）的博客，可以跳到<a href="#更多修改"><i class="fa fa-hashtag fa-sm"></i>更多高阶美化</a></p>
<div class="note info"><p>操作系统的异同</p>
<p>各种操作系统的过程基本一致。本文中的安装环境的主要做法是直接通过官网下载安装，其他下载方法也可行，这里不列举。</p>
</div>

<span id="more"></span>

<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="下载、准备环境"><a href="#下载、准备环境" class="headerlink" title="下载、准备环境"></a>下载、准备环境</h3><p>如果还没有安装 <a target="_blank" rel="noopener" href="https://git-scm.com/download/">Git <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>，去官网下载。Hexo 部署需要用到。</p>
<p>Hexo 是基于 Node.js 开发的，若未安装，需要先安装 <a target="_blank" rel="noopener" href="https://nodejs.org/en">Node.js <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>，两个版本都可以。安装完毕后打开终端检查：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span> <span class="token parameter variable">-v</span>
v18.16.0
$ <span class="token function">npm</span> <span class="token parameter variable">-v</span>
<span class="token number">9.5</span>.1
$ npx <span class="token parameter variable">-v</span>
<span class="token number">9.5</span>.1</code></pre>

<p>当三个命令都正常显示版本号时，就安装成功了。</p>
<p>随后，下载 Hexo 包。执行以下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli

$ hexo <span class="token parameter variable">-v</span>
hexo-cli: <span class="token number">4.3</span>.0
os: <span class="token punctuation">..</span>.
<span class="token comment"># 出现一些依赖包的版本号表示安装成功</span></code></pre>

<p>随后，可以开始建立站点文件夹了。执行以下命令初始化 Hexo 站点：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo init blog <span class="token comment"># 文件夹的名字，自己可更改，同下</span>
$ <span class="token builtin class-name">cd</span> blog
$ <span class="token function">npm</span> <span class="token function">install</span></code></pre>

<p>此时，站点文件夹已新建完毕。目录大概是这样（<code>......</code> 表示省略了很多文件）：</p>
<pre class="language-none"><code class="language-none">.
├─ .github
│   └─ dependabot.yml
├─ node_modules
│   ├─ .bin
│   └─ ......
├─ scaffolds
│   ├─ draft.md
│   ├─ page.md
│   └─ post.md
├─ source
│   └─ _posts
│       └─ hello-world.md
├─ themes
│   └─ .gitkeep
├─ _config.landscape.yml
├─ _config.yml
├─ package-lock.json
└─ package.json</code></pre>

<p>随后，可以在本地运行查看效果：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server
INFO  Validating config
INFO  Start processing
INFO  Hexo is running at http://localhost:4000/ <span class="token builtin class-name">.</span> Press Ctrl+C to stop.</code></pre>

<div class="note info"><p>端口占用</p>
<p>如果出现 <code>FATAL Port 4000 has been used. Try other port instead.</code> 说明默认的 4000 端口被占用。逐一排查或解决：</p>
<ol>
<li>排查是否是 Hexo <strong>已经运行了一个服务</strong>。（不同终端）<br>解决：终端内按 Ctrl+C 终止那个已经运行的 Hexo 服务。</li>
<li>排查有无<strong>其他应用占用端口</strong><br>解决：关闭占用端口的应用。</li>
<li>以上两个方案都不可行。<br>解决：运行命令 <code>hexo s -p [number]</code> 更改端口。，[number] 为 4000 以上的数字，例如：<code>hexo s -p 8080</code></li>
</ol>
</div>

<p>访问 <code>http://localhost:4000/</code> 查看效果。初始的欢迎页面大概是这个样子：<br><img src="https://s2.loli.net/2023/12/16/yJkrlimAp6TWK8x.jpg" alt="local-hexo-landscape.jpeg"></p>
<div class="note warning"><p>出现问题</p>
<p>如果以上步骤完成后出现无法访问的情况，可能是什么步骤出现了问题。若找不到原因，删除工作文件夹后以上步骤逐一排查，重试一遍以后一般都会正常。</p>
</div>

<p>自此，完成了站点文件环境的准备。<strong>以下的步骤都在这个文件夹内进行</strong>，<strong>文中相对文件路径父目录为这个文件夹</strong>。</p>
<h3 id="站点整体设置"><a href="#站点整体设置" class="headerlink" title="站点整体设置"></a>站点整体设置</h3><p>打开站点文件夹中的 <code>_config.yml</code>，这个文件是 Hexo 站点的整体设置。初始时的内容大概是这个：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Hexo Configuration</span>
<span class="token comment">## Docs: https://hexo.io/docs/configuration.html</span>
<span class="token comment">## Source: https://github.com/hexojs/hexo/</span>

<span class="token comment"># Site</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> Hexo
<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token key atrule">keywords</span><span class="token punctuation">:</span>
<span class="token key atrule">author</span><span class="token punctuation">:</span> John Doe
<span class="token key atrule">language</span><span class="token punctuation">:</span> en
<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">''</span>

<span class="token comment"># URL</span>
<span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span>
<span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//example.com
<span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title/
<span class="token key atrule">permalink_defaults</span><span class="token punctuation">:</span>
<span class="token key atrule">pretty_urls</span><span class="token punctuation">:</span>
  <span class="token key atrule">trailing_index</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing 'index.html' from permalinks</span>
  <span class="token key atrule">trailing_html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Set to false to remove trailing '.html' from permalinks</span>

<span class="token comment"># Directory</span>
<span class="token key atrule">source_dir</span><span class="token punctuation">:</span> source
<span class="token key atrule">public_dir</span><span class="token punctuation">:</span> public
<span class="token key atrule">tag_dir</span><span class="token punctuation">:</span> tags
<span class="token key atrule">archive_dir</span><span class="token punctuation">:</span> archives
<span class="token key atrule">category_dir</span><span class="token punctuation">:</span> categories
<span class="token key atrule">code_dir</span><span class="token punctuation">:</span> downloads/code
<span class="token key atrule">i18n_dir</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>lang
<span class="token key atrule">skip_render</span><span class="token punctuation">:</span>

<span class="token comment"># Writing</span>
<span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md <span class="token comment"># File name of new posts</span>
<span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post
<span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># Transform title into titlecase</span>
<span class="token key atrule">external_link</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># Open external links in new tab</span>
  <span class="token key atrule">field</span><span class="token punctuation">:</span> site <span class="token comment"># Apply to the whole site</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span>
<span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> highlight.js
<span class="token key atrule">highlight</span><span class="token punctuation">:</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">prismjs</span><span class="token punctuation">:</span>
  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>

<span class="token comment"># Home page setting</span>
<span class="token comment"># path: Root path for your blogs index page. (default = '')</span>
<span class="token comment"># per_page: Posts displayed per page. (0 = disable pagination)</span>
<span class="token comment"># order_by: Posts order. (Order by date descending by default)</span>
<span class="token key atrule">index_generator</span><span class="token punctuation">:</span>
  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">''</span>
  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date

<span class="token comment"># Category &amp; Tag</span>
<span class="token key atrule">default_category</span><span class="token punctuation">:</span> uncategorized
<span class="token key atrule">category_map</span><span class="token punctuation">:</span>
<span class="token key atrule">tag_map</span><span class="token punctuation">:</span>

<span class="token comment"># Metadata elements</span>
<span class="token comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span>
<span class="token key atrule">meta_generator</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment"># Date / Time format</span>
<span class="token comment">## Hexo uses Moment.js to parse and display date</span>
<span class="token comment">## You can customize the date format as defined in</span>
<span class="token comment">## http://momentjs.com/docs/#/displaying/format/</span>
<span class="token key atrule">date_format</span><span class="token punctuation">:</span> YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DD
<span class="token key atrule">time_format</span><span class="token punctuation">:</span> HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss
<span class="token comment">## updated_option supports 'mtime', 'date', 'empty'</span>
<span class="token key atrule">updated_option</span><span class="token punctuation">:</span> <span class="token string">'mtime'</span>

<span class="token comment"># Pagination</span>
<span class="token comment">## Set per_page to 0 to disable pagination</span>
<span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">10</span>
<span class="token key atrule">pagination_dir</span><span class="token punctuation">:</span> page

<span class="token comment"># Include / Exclude file(s)</span>
<span class="token comment">## include:/exclude: options only apply to the 'source/' folder</span>
<span class="token key atrule">include</span><span class="token punctuation">:</span>
<span class="token key atrule">exclude</span><span class="token punctuation">:</span>
<span class="token key atrule">ignore</span><span class="token punctuation">:</span>

<span class="token comment"># Extensions</span>
<span class="token comment">## Plugins: https://hexo.io/plugins/</span>
<span class="token comment">## Themes: https://hexo.io/themes/</span>
<span class="token key atrule">theme</span><span class="token punctuation">:</span> landscape

<span class="token comment"># Deployment</span>
<span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">''</span></code></pre>

<p>一些刚建站会用到的配置的解释：</p>
<ul>
<li><strong><code>title</code></strong>: 网站标题。显示在 HTML <code>&lt;title&gt;&lt;/title&gt;</code> 和网站标题位置。</li>
<li><strong><code>subtitle</code></strong>: 网站副标题。显示在网站标题下面，小字。</li>
<li><strong><code>author</code></strong>: 网站所有者。通常显示在网站底部版权的地方。</li>
</ul>
<p>其他的以后慢慢会用到。先把上面三个站点的信息填好吧。</p>
<div class="note warning"><p>YAML 格式</p>
<p>对于第一次使用 YAML 的很容易漏掉<strong>选项后的空格</strong>。<br>正确：<code>theme: landscape</code><br>错误：<code>theme:landscape</code></p>
</div>

<h3 id="Hexo-命令"><a href="#Hexo-命令" class="headerlink" title="Hexo 命令"></a>Hexo 命令</h3><p>没有太多好说的。就在这里列举。</p>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">缩写</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>hexo init &lt;folder&gt;</code></td>
<td align="left"><code>hexo i</code></td>
<td align="left">新建一个站点文件夹 <code>&lt;folder&gt;</code>，Hexo 会通过 Git clone <a href="https://github.com/hexojs/hexo-starter">hexo starter</a>, <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-scape</a> 并通过 NPM 下载部分依赖。</td>
</tr>
<tr>
<td align="left"><code>hexo list &lt;type&gt;</code></td>
<td align="left"><code>hexo l &lt;type&gt;</code></td>
<td align="left">在命令行获取站点数据。<code>&lt;type&gt;</code> 值为 <code>page</code> <code>post</code> <code>route</code> <code>tag</code> <code>category</code>，例如 <code>hexo l post</code> 列出所有文章。</td>
</tr>
<tr>
<td align="left"><code>hexo new &lt;post&gt;</code></td>
<td align="left"><code>hexo n &lt;post&gt;</code></td>
<td align="left">写一篇新文章，让 Hexo 在 .&#x2F;source&#x2F;_posts&#x2F; 下生成名为 <code>&lt;post&gt;.md</code> 的文件。</td>
</tr>
<tr>
<td align="left"><code>hexo generate</code></td>
<td align="left"><code>hexo g</code></td>
<td align="left">让 Hexo 生成站点文件。</td>
</tr>
<tr>
<td align="left"><code>hexo server</code></td>
<td align="left"><code>hexo s</code></td>
<td align="left">在本地运行网站，查看效果。</td>
</tr>
<tr>
<td align="left"><code>hexo clean</code></td>
<td align="left"></td>
<td align="left">清除生成的网页。</td>
</tr>
<tr>
<td align="left"><code>hexo deploy</code></td>
<td align="left"><code>hexo d</code></td>
<td align="left">部署站点。需要配置和依赖，下面会讲到。</td>
</tr>
</tbody></table>
<p>通常来说，写完文章后运行：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo g
$ hexo d <span class="token comment"># -m "..."     # commit 信息，可选</span></code></pre>

<h2 id="部署到-Github-Pages"><a href="#部署到-Github-Pages" class="headerlink" title="部署到 Github Pages"></a>部署到 Github Pages</h2><p>博客自然需要进行部署，本地运行的博客别人看不到。我当时选择部署到 <a target="_blank" rel="noopener" href="https://github.io">Github Pages <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>。<br>所以，当时注册了 Github（若未注册，先<a target="_blank" rel="noopener" href="https://github.com/signup">注册 Github <i class="fa fa-arrow-up-right-from-square" style="font-size:15px;"></i></a>），然后连接本地，参照<a href="/posts/git-github/">Git 的连接 Github 小记</a>进行连接。<br>完成后，创建一个新的仓库，名为 <code>&lt;username&gt;.github.io</code>，<code>&lt;username&gt;</code> 为自己的用户名。打开 <span style="font-family:consolas,monospace;">Settings -&gt; Page</span>，确保 Branch 已选择。</p>
<p>运行以下命令：</p>
<pre class="language-none"><code class="language-none">$ npm install hexo-deployer-git --save</code></pre>

<p>随后打开 _config.yml 文件，找到 <code>deploy</code> 字样，更改如下：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span>
<span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>&lt;username<span class="token punctuation">></span>/&lt;username<span class="token punctuation">></span>.github.io.git <span class="token comment"># &lt;username> 是你的 github 用户名</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main <span class="token comment"># 具体看自己储存库的分支</span></code></pre>

<p>更改完毕后，就可以运行 <code>hexo d</code> 部署到 Github Pages 了。访问 <code>https://&lt;username&gt;.github.io</code>，如果第一次部署，未显示就多等一会儿。完成后，就可以看到网站了。</p>
<h2 id="修改和美化"><a href="#修改和美化" class="headerlink" title="修改和美化"></a>修改和美化</h2><h3 id="下载主题-NexT"><a href="#下载主题-NexT" class="headerlink" title="下载主题 NexT"></a>下载主题 NexT</h3><p>NexT 是一个很简洁美观且不断维护的 Hexo 主题。这个博客就是 Next 主题。<br>首先，进行下载，运行以下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> themes
$ <span class="token function">git</span> clone https://github.com/next-theme/hexo-theme-next.git</code></pre>

<p>完成后，打开 config.yml，找到 <code>theme</code> 字样，更改如下：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span>
<span class="token comment">## Plugins: https://hexo.io/plugins/</span>
<span class="token comment">## Themes: https://hexo.io/themes/</span>
<span class="token key atrule">theme</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>next</code></pre>

<p>找到 <code>language</code> 字样，更改其值为 <code>zh-CN</code>。</p>
<p>此时本地运行大概是这个样子：<br><img src="https://s2.loli.net/2023/12/17/4s6k3eWmn8DJYUd.jpg" alt="test-theme-next"></p>
<p>可以根据需要更改 NexT 主题。打开 themes&#x2F;hexo-theme-next&#x2F;_config.yml（主题配置文件）找到 <code>scheme</code> 字样，选择一个去掉 <code>#</code> 注释，把原本的用 <code>#</code> 注释上。例如：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Schemes</span>
<span class="token comment">#scheme: Muse</span>
<span class="token comment">#scheme: Mist</span>
<span class="token key atrule">scheme</span><span class="token punctuation">:</span> Pisces
<span class="token comment">#scheme: Gemini</span></code></pre>

<p>主题效果（图片和演示链接）：</p>
<div class="tabs" id="themeshow"><ul class="nav-tabs"><li class="tab"><a href="#themeshow-1">Muse</a></li><li class="tab"><a href="#themeshow-2">Mist</a></li><li class="tab"><a href="#themeshow-3">Pisces</a></li><li class="tab active"><a href="#themeshow-4">Gemini</a></li></ul><div class="tab-content"><div class="tab-pane" id="themeshow-1"><p><img src="https://s11.ax1x.com/2023/12/17/pi5cBmn.png" alt="muse"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/muse/">https://theme-next.js.org/muse/</a></p></div><div class="tab-pane" id="themeshow-2"><p><img src="https://s11.ax1x.com/2023/12/17/pi5crT0.png" alt="mist"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/mist/">https://theme-next.js.org/mist/</a></p></div><div class="tab-pane" id="themeshow-3"><p><img src="https://s11.ax1x.com/2023/12/17/pi5cDwq.png" alt="pisces"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/pisces/">https://theme-next.js.org/pisces/</a></p></div><div class="tab-pane active" id="themeshow-4"><p><img src="https://s11.ax1x.com/2023/12/17/pi5cykV.png" alt="gemini"><br><strong>文档演示</strong>：<a href="https://theme-next.js.org/">https://theme-next.js.org/</a><br><em><strong>自己用了这个 NexT 主题</strong></em>，敲好看的。</p></div></div></div>

<h3 id="基础修改"><a href="#基础修改" class="headerlink" title="基础修改"></a>基础修改</h3><h4 id="主页面"><a href="#主页面" class="headerlink" title="主页面"></a>主页面</h4><p>原本的文章链接为 <code>YYYY/MM/DD/:title</code>(例如 <code>/2023/11/04/hello</code>)，一大串日期很难看。我当时把他改为了 <code>posts/:title</code>，这样有很高的自由度（标题自定义）的同时保证了链接简短。<br>打开整体设置 _config.yml，找到 <code>permalink</code>，更改为：</p>
<pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> # URL
</span><span class="token prefix unchanged"> </span><span class="token line"> ## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'
</span><span class="token prefix unchanged"> </span><span class="token line"> url: http://example.com
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> permalink: :year/:month/:day/:title/
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> permalink: posts/:title/</span></span></code></pre>

<p>当文章多的时候，一整页默认有十篇文章，很长，可以减小。<br>打开整体设置 _config.yml，找到 <code>per_page</code>，将它的的值更改为 <code>5</code>。这样每一页就会简约得多。</p>
<p>自定义浏览器里标签的图标<br>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>favicon</code>，把自己的图标放到 theme&#x2F;hexo-theme-next&#x2F;source&#x2F;images 内。三种尺寸：16x16、32x32、原大小、原大小 分别对应 <code>small</code> <code>medium</code> <code>apple_touch_icon</code> <code>safari_pinned_tab</code>，将其相应位置填写好。例如我这个博客的配置是：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">favicon</span><span class="token punctuation">:</span>
  <span class="token key atrule">small</span><span class="token punctuation">:</span> /images/icon<span class="token punctuation">-</span>16x16.png
  <span class="token key atrule">medium</span><span class="token punctuation">:</span> /images/icon<span class="token punctuation">-</span>32x32.png
  <span class="token key atrule">apple_touch_icon</span><span class="token punctuation">:</span> /images/icon.png
  <span class="token key atrule">safari_pinned_tab</span><span class="token punctuation">:</span> /images/icon.png
  <span class="token comment">#android_manifest: /manifest.json</span></code></pre>

<h4 id="菜单栏，新页面"><a href="#菜单栏，新页面" class="headerlink" title="菜单栏，新页面"></a>菜单栏，新页面</h4><p>此时，新博客只有两大主页面：文章，主页。这未免有些太单薄，最好有个分类标签一类的。NexT 已经帮我们做好了。<br>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>menu</code>，把 <code>home</code> <code>tags</code> <code>categories</code> <code>archives</code> 前面的 <code>#</code> 注释都去掉。大概是这个样子：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>
  <span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>home
  <span class="token comment">#about: /about/ || fa fa-user</span>
  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>tags
  <span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>th
  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> fa fa<span class="token punctuation">-</span>archive
  <span class="token comment">#schedule: /schedule/ || fa fa-calendar</span>
  <span class="token comment">#sitemap: /sitemap.xml || fa fa-sitemap</span>
  <span class="token comment">#commonweal: /404/ || fa fa-heartbeat</span></code></pre>

<p>你也可以更改 “<code>||</code>” 之后的图标，去 <a href="https://fontawesome.com/icons">font-awesome.com</a> 用英文搜索你想要的图标。例如 <code>fa-rectangle-list</code> 显示为 <i class="fa fa-rectangle-list"></i></p>
<p>随后运行以下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new page tags
$ hexo new page categories</code></pre>

<p>完成后打开 source&#x2F;tags&#x2F;index.md，在两个 <code>---</code> 内新加一行 <code>type: tags</code>；<br>同样地，打开 source&#x2F;tags&#x2F;index.md，加一行 <code>type: categories</code>。<br>顺便你也可以更改它们的 <code>title</code> 值分别为 标签 和 分类。</p>
<p>完成以上所有步骤后，你我期待的像样的一个博客诞生了。此时，新拥有博客的人可以开始<a href="#写作"><i class="fa fa-hashtag fa-sm"></i>写作</a>了</p>
<h3 id="更多修改"><a href="#更多修改" class="headerlink" title="更多修改"></a>更多修改</h3><h4 id="CSS-Stylus-方面"><a href="#CSS-Stylus-方面" class="headerlink" title="CSS(Stylus) 方面"></a>CSS(Stylus) 方面</h4><p>在 source 文件夹下新建文件夹 _data，在 source&#x2F;_data 下新建文件 styles.styl，根据下面的代码注释插入你需要的内容：</p>
<pre class="language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector"><span class="token comment">// 隐藏顶部线条</span>
.headband <span class="token punctuation">&#123;</span></span>
  <span class="token property-declaration"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="token punctuation">&#125;</span>
<span class="token selector"><span class="token comment">// 顶部边距</span>
.header<span class="token punctuation">,</span>
.main-inner <span class="token punctuation">&#123;</span></span>
  <span class="token property-declaration"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token unit">px</span><span class="token punctuation">;</span></span>

  +<span class="token func"><span class="token function">mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span>
    <span class="token property-declaration"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector"><span class="token comment">// 图片圆角</span>
.post-body img <span class="token punctuation">&#123;</span></span>
  <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token unit">px</span> </span>
<span class="token punctuation">&#125;</span>

<span class="token selector"><span class="token comment">// 侧边栏圆角</span>
header.header <span class="token punctuation">&#123;</span></span>
    <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token func"><span class="token function">var</span><span class="token punctuation">(</span><span class="token operator">-</span>-content-bg-color<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
    <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span><span class="token punctuation">;</span></span>
    <span class="token property-declaration"><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">0</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">3</span><span class="token unit">px</span> <span class="token number">1</span><span class="token unit">px</span> <span class="token number">-2</span><span class="token unit">px</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.06</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">1</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">0</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span></span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.site-brand-container <span class="token punctuation">&#123;</span></span>
    <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">0</span><span class="token unit">px</span> <span class="token number">0</span><span class="token unit">px</span><span class="token punctuation">;</span></span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.sidebar-inner <span class="token punctuation">&#123;</span></span>
    <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token func"><span class="token function">var</span><span class="token punctuation">(</span><span class="token operator">-</span>-content-bg-color<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
    <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token unit">px</span><span class="token punctuation">;</span></span>
    <span class="token property-declaration"><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">0</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">3</span><span class="token unit">px</span> <span class="token number">1</span><span class="token unit">px</span> <span class="token number">-2</span><span class="token unit">px</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.06</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">1</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">0</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">-1</span><span class="token unit">px</span> <span class="token number">0.5</span><span class="token unit">px</span> <span class="token number">0</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.09</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span></span></span>
    <span class="token property-declaration"><span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></span>
    <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token func"><span class="token function">var</span><span class="token punctuation">(</span><span class="token operator">-</span>-text-color<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
    <span class="token property-declaration"><span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token unit">px</span><span class="token punctuation">;</span></span>
    <span class="token property-declaration"><span class="token property">max-height</span><span class="token punctuation">:</span> <span class="token func"><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token unit">vh</span> <span class="token operator">-</span> <span class="token number">24</span><span class="token unit">px</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token punctuation">&#125;</span>
<span class="token selector"><span class="token comment">// 文章圆角</span>
.main-inner .sub-menu<span class="token punctuation">,</span> .main-inner .post-block<span class="token punctuation">,</span> .main-inner .tabs-comment<span class="token punctuation">,</span> .main-inner > .comments<span class="token punctuation">,</span> .main-inner .comment-position .comments<span class="token punctuation">,</span> .main-inner .pagination <span class="token punctuation">&#123;</span></span>
    <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token func"><span class="token function">var</span><span class="token punctuation">(</span><span class="token operator">-</span>-content-bg-color<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
    <span class="token property-declaration"><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span><span class="token punctuation">;</span></span>
    <span class="token property-declaration"><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">0</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">3</span><span class="token unit">px</span> <span class="token number">1</span><span class="token unit">px</span> <span class="token number">-2</span><span class="token unit">px</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.06</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">1</span><span class="token unit">px</span> <span class="token number">5</span><span class="token unit">px</span> <span class="token number">0</span> <span class="token func"><span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span></span>
<span class="token punctuation">&#125;</span>

<span class="token selector"><span class="token comment">// 添加背景图片</span>
body <span class="token punctuation">&#123;</span></span>
      <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(/pic/background3.png)</span><span class="token punctuation">;</span></span>
      <span class="token property-declaration"><span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span>
      <span class="token property-declaration"><span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span></span>
      <span class="token property-declaration"><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></span>
      <span class="token property-declaration"><span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token unit">%</span> <span class="token number">50</span><span class="token unit">%</span><span class="token punctuation">;</span></span>
      <span class="token atrule-declaration"><span class="token atrule">@media</span> <span class="token punctuation">(</span>prefers-color-scheme<span class="token punctuation">:</span> dark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></span>
        <span class="token property-declaration"><span class="token property">background-image</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
      <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>随后，打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>custom_file_path</code>，把 style 子项的注释去掉。更改成这个样子：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">custom_file_path</span><span class="token punctuation">:</span>
  <span class="token comment">#head: source/_data/head.njk</span>
  <span class="token comment">#header: source/_data/header.njk</span>
  <span class="token comment">#sidebar: source/_data/sidebar.njk</span>
  <span class="token comment">#postMeta: source/_data/post-meta.njk</span>
  <span class="token comment">#postBodyStart: source/_data/post-body-start.njk</span>
  <span class="token comment">#postBodyEnd: source/_data/post-body-end.njk</span>
  <span class="token comment">#footer: source/_data/footer.njk</span>
  <span class="token comment">#bodyEnd: source/_data/body-end.njk</span>
  <span class="token comment">#variable: source/_data/variables.styl</span>
  <span class="token comment">#mixin: source/_data/mixins.styl</span>
  <span class="token key atrule">style</span><span class="token punctuation">:</span> source/_data/styles.styl</code></pre>

<p>以后可以根据自己的需要慢慢更改 styles.styl 的内容。</p>
<div class="note danger"><p>注意备份</p>
<p>任何修改都有可能出现错误，建议多进行<strong>备份</strong>原生成文件。有必要的话使用 git 进行<strong>版本控制</strong>，备份到远程仓库。否则出现错误很难改回来。尤其是更改了很多的时候。</p>
</div>

<h4 id="插件：搜索功能-hexo-generator-searchdb"><a href="#插件：搜索功能-hexo-generator-searchdb" class="headerlink" title="插件：搜索功能 hexo-generator-searchdb"></a>插件：搜索功能 hexo-generator-searchdb</h4><p>运行以下命令下载：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb <span class="token parameter variable">--save</span></code></pre>

<p>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 local_search 项，更改如下：</p>
<pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> local_search:
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   enable: false
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   enable: true
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   # If auto, trigger search by changing input.
</span><span class="token prefix unchanged"> </span><span class="token line">   # If manual, trigger search by pressing enter key or search button.
</span><span class="token prefix unchanged"> </span><span class="token line">   trigger: auto
</span><span class="token prefix unchanged"> </span><span class="token line">   # Show top n results per article, show all results by setting to -1
</span><span class="token prefix unchanged"> </span><span class="token line">   top_n_per_article: 1
</span><span class="token prefix unchanged"> </span><span class="token line">   # Unescape html strings to the readable one.
</span><span class="token prefix unchanged"> </span><span class="token line">   unescape: false
</span><span class="token prefix unchanged"> </span><span class="token line">   # Preload the search data when the page loads.
</span><span class="token prefix unchanged"> </span><span class="token line">   preload: false</span></span></code></pre>

<p>此时，在菜单栏中的搜索已出现，可以点击并键入进行搜索了。</p>
<h4 id="插件：置顶功能-hexo-generator-index-pin-top"><a href="#插件：置顶功能-hexo-generator-index-pin-top" class="headerlink" title="插件：置顶功能 hexo-generator-index-pin-top"></a>插件：置顶功能 hexo-generator-index-pin-top</h4><p>运行以下命令下载：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-index-pin-top <span class="token parameter variable">--save</span></code></pre>

<p>如果需要置顶一篇文章，在这篇文章的 Front-matter 中添加：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<p>可以给置顶的文章增加标识。在 source&#x2F;data 下新建文件 post-meta.njk：</p>
<pre class="language-django" data-language="django"><code class="language-django"><span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">if</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">top</span> <span class="token delimiter punctuation">%&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding-left</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-meta-divider<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding-right</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>black</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span> <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-thumbtack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #000000<span class="token punctuation">;</span> <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span> 置顶 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token django language-django"><span class="token delimiter punctuation">&#123;%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%&#125;</span></span></code></pre>

<p>打开主题配置文件 themes&#x2F;hexo-theme-next&#x2F;_config.yml，找到 <code>custom_file_path</code>，把 postMeta 的注释去掉。</p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>运行 <code>hexo new name</code> 就可以在 source&#x2F;_posts 下新建一篇名为 name.md 的文章。原本是这样的：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">title</span><span class="token punctuation">:</span> 
<span class="token key atrule">date</span><span class="token punctuation">:</span> 
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">---</span></code></pre>

<p>两个 <code>---</code> 之内的内容叫做 Front-matter，它是这个文章的信息（变量）。以下是会增加和修改的东西：</p>
<ul>
<li><code>title</code>: 文章标题</li>
<li><code>date</code>: 建立日期</li>
<li><code>tags</code>: 标签，可以有多个。</li>
<li><code>categories</code>: 分类，可以有多个。</li>
</ul>
<p>多个标签的标注方法用 <code>-</code> 多行，多个同级分类用 <code>- []</code>，如：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span>
<span class="token key atrule">tags</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> 生活
<span class="token punctuation">-</span> 美好
<span class="token key atrule">categories</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>生活<span class="token punctuation">]</span>
<span class="token punctuation">-</span> <span class="token punctuation">[</span>美好<span class="token punctuation">]</span>
<span class="token punctuation">---</span></code></pre>

<p>这样，这篇文章就有两个标签，两个分类。</p>
<p>进行正常写作时使用 Markdown 语法，或者可以安装其他插件使用其他语言写作。</p>
<div class="note warning"><p>警告</p>
<p>写了好长时间，还相当于自己又建了一个博客，不建议像我这样写这么长的文章（狗头）<br>开玩笑的啦~<br>工作区终于清静了。。。</p>
</div>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构：树的概念与储存</title>
    <url>//posts/graph-tree/</url>
    <content><![CDATA[<p><strong>树</strong>也是一种数据结构，它是<strong>非线性数据结构</strong>，它能很好地描述一个数据集合中的分支和层次，是一个比较重要的课题，以后的搜索和竞赛都有可能要用到它。树形结构的应用非常广泛，什么索引、语法结构。虽说概念比较繁琐 <del>老师讲了一个小时</del>。有点让人头疼（我咕了好多篇笔记了）。</p>
<h2 id="树的概念"><a href="#树的概念" class="headerlink" title="树的概念"></a>树的概念</h2><h3 id="前面"><a href="#前面" class="headerlink" title="前面"></a>前面</h3><p>前置芝士，简单说一下这些奇怪的名称：</p>
<ul>
<li>树中的每一个元素称为<strong>结点 node</strong>。</li>
<li>两个结点之间的线称为<strong>边 edge</strong>。</li>
<li>通过几条边，这几条边组成<strong>路径</strong>。</li>
</ul>
<span id="more"></span>

<p>树的结点一般画为圆圈，树若画出来也就是几个结点（圆）和几条边（线）组成的图，比较形象化，实际的树的储存方式是通过<a href="/posts/lianbiao" style="border-bottom:none;">链表</a>中的数据域将一个个结点（元素）连接起来，比较麻烦，后面再说。<br>还有一个概念：树的边的个数比树的结点的个数少一。也就是说，假设树的结点的个数为 $n$，则树的边的个数为 $n-1$。</p>
<h3 id="判断一张图是否为树"><a href="#判断一张图是否为树" class="headerlink" title="判断一张图是否为树"></a>判断一张图是否为树</h3><p>树最重要的就是<strong>每两个结点之间有且只有一条路径可以到达</strong>，也就是说，不可以形成环，不可以在一个树中无法到达所有结点。例如，下面就是一个树：<br><img src="https://s2.loli.net/2023/12/16/5UZo8kn4QAYD1F9.png" alt="graph-tree-1.png"><br>下面两张图不是树，他们分别违反了“不可以形成环”、“不可以在一个树中无法到达所有结点”。<br><img src="https://s2.loli.net/2023/12/16/VgfdiEJmDvSz2OB.png" alt="err-tree1"><br><img src="https://s2.loli.net/2023/12/16/SEGpmcFVrNv95w2.png" alt="err-tree2"></p>
<h3 id="更多的概念"><a href="#更多的概念" class="headerlink" title="更多的概念"></a>更多的概念</h3><p>首先放一张图：<br><img src="https://s2.loli.net/2023/12/16/O51sWLVJvfdu9ai.png" alt="lizi"></p>
<p>以这张图为例，来说下面的概念吧。<br><strong>根结点 root</strong>：根结点通常在最上方，是所有子结点的父结点。在上面的那张图中，结点 1 就是整张图的根结点。在上面的图中，根结点可以更换，也不会影响到什么，但是根结点一变就会让树形态发生变化（假如结点 2 是整个树的根结点，那么树会变<a href="#tree-root-node2">下面的图</a>）。一个树是必须要有根结点的，<span style="background-color:#efefef">根结点只有一个。</span><br><strong>父结点 parent（双亲结点） 子结点 child（孩子结点）</strong>：一个结点的分支就是那个结点的子结点，相反那个结点是分支结点的父结点。子结点通过父结点到达。例如结点 4 5 是结点 2 的子结点，结点 3 是结点 6 7 的父结点。<br><strong>兄弟结点</strong>：同一个父结点的子结点称为兄弟结点。例如结点 4 5 互为兄弟结点，6 7 互为兄弟结点。<br><strong>度</strong>：树的度就是一个结点子结点的个数。例如结点 2 的度就是 2，因为它只有两个子结点。<br><strong>深度</strong>：从<span style="background-color:#efefef">根结点</span>到当前结点的层数，根结点的深度是 1。例如，结点 1 深度为 1，结点 2 3 深度为 2，结点 4 5 6 7 深度为 3。<br><strong>叶子结点</strong>：一个结点的度为 0，就叫做叶子结点。例如结点 4 5 6 7 都是叶子结点。<br><strong>n 叉树</strong>：在树中，这个数是多少叉看度最多的结点，例如这个树就是二叉树（也比较特殊，后面讲）。<br><strong>子树</strong>：假设将树中任意一个度不为 0 的结点与它的父结点切断它们之间的边，那么断开的那一部分又能成为一个新的树，称为子树。例如结点 2 4 5 可以组成一个子树。</p>
<p>还有一大堆子子孙孙祖先的什么的，懒得写了。说真的，感觉说多了意义不大。</p>
<h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><p>n 叉树中，又出现了一个<strong>二叉树 Binary Tree</strong> 这么个奇怪的概念。什么左子树右孩子什么的不记了，就讲三个我认为比较重要的。</p>
<p><strong>完美二叉树</strong>：<br>也叫做满二叉树。简单来说就是一个深度为 $n$ 的二叉树，拥有 $2^n - 1$ 个结点。看着的话就是若再增加一个结点使其继续为二叉树，深度就必须要加一了。刚才的示例图就是一个完美二叉树。<br><strong>完全二叉树</strong>：<br>完全二叉树的叶子结点可以不是满的，但是剩下的叶子结点必须都在图的左边。例如那张示例图若将结点 7 去掉，它就只是一个完全二叉树。<br><strong>完满二叉树</strong>：<br>完满二叉树的结点除了叶子结点以外其他结点的度都必须是 2。示例图若将结点 4 5 去掉，它就只是一个完满二叉树。</p>
<div class="note warning"><p>注意：</p>
<p>这三个概念极易弄混淆，稍不注意就忘了。完美二叉树一定也是完全二叉树和完满二叉树，但完满二叉树不一定是完全二叉树和完美二叉树。（别说他晕，我也晕了）</p>
</div>

<h2 id="树的储存"><a href="#树的储存" class="headerlink" title="树的储存"></a>树的储存</h2><p>一大堆基础概念，已经够呛了（悲）。学到树的储存已经开始逐渐迷惑。。。<br>一般来说，树也是不太可能用真正的指针链表来储存，毕竟太难写了，内存限制一般比时间限制够用一些，就用数组模拟链表。链表就是要关心指针域，下面就是一大堆奇奇怪怪的方法。</p>
<h3 id="可能用不到的"><a href="#可能用不到的" class="headerlink" title="可能用不到的"></a>可能用不到的</h3><div class="note info"><p>备注：</p>
<p>一般来说，这些方法用不太到，要么炸时间要么炸空间要么难实现。所以就按这种奇特的分类方法分类了，反正感觉用不到。这句话也兼下面。</p>
</div>

<p><strong>父亲表示法</strong>：顾名思义，指针域指向父结点。<br><strong>孩子表示法</strong>：指针域指向子结点。<br><strong>父亲孩子表示法</strong>：双向链表结构，也没啥用。</p>
<div class="note danger"><p>上述缺点：</p>
<p>很明显，父亲法若寻找一个子结点可能要遍历整个表，很耗时间；孩子法度一大肯定爆内存，因为将每个子结点都存了下来；父亲孩子更糟糕，内存更大了，没有意义。</p>
</div>

<h3 id="可能会用到的"><a href="#可能会用到的" class="headerlink" title="可能会用到的"></a>可能会用到的</h3><p><strong>孩子兄弟表示法</strong>：适用于二叉树，也是一个双链表结构，一个结点连接其子结点和兄弟结点。<br><strong>邻接矩阵表示法</strong>：见<a href="/posts/graph-search/#%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%EF%BC%88%E4%B8%80%E8%88%AC%E4%B8%8D%E7%94%A8%EF%BC%89">这里</a>。<br><strong>邻接表表示法</strong>：也看上面。</p>
<hr>

<p id="tree-root-node2">假设根结点为 2 时的情况：</p>

<p><img src="https://s2.loli.net/2023/12/16/HBYzUod6LN2vQay.png" alt="node2"></p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>数据结构</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 鼠标悬浮窗口效果</title>
    <url>//posts/hover-show/</url>
    <content><![CDATA[<p>最近弄的 github 卡片，弄了半天弄出来的鼠标悬浮显示文字的效果。使用 CSS 伪元素弄出来的小提示。但是不适合 <code>overflow: hidden;</code> 的元素。不管怎么说，还是很好用的，忘掉了就不太好，也就放到博客里来了。</p>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="left">代码</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>&lt;span aria-label=&quot;左边提示&quot; balloon-shown=&quot;left&quot;&gt;鼠标&lt;/span&gt;</code></td>
<td align="left"><span aria-label="左边提示" balloon-shown="left">鼠标</span></td>
</tr>
<tr>
<td align="left"><code>&lt;span aria-label=&quot;右边提示&quot; balloon-shown=&quot;right&quot;&gt;悬浮&lt;/span&gt;</code></td>
<td align="left"><span aria-label="右边提示" balloon-shown="right">悬浮</span></td>
</tr>
<tr>
<td align="left"><code>&lt;span aria-label=&quot;上边提示&quot; balloon-shown=&quot;up&quot;&gt;文字&lt;/span&gt;</code></td>
<td align="left"><span aria-label="上边提示" balloon-shown="up">文字</span></td>
</tr>
<tr>
<td align="left"><code>&lt;span aria-label=&quot;上边提示&quot; balloon-shown=&quot;down&quot;&gt;提示&lt;/span&gt;</code></td>
<td align="left"><span aria-label="下边提示" balloon-shown="down">提示</span></td>
</tr>
</tbody></table>
<style>
    [aria-label][balloon-shown] {
        position: relative;
    }
    [aria-label][balloon-shown="left"]::before {
        border: 5px solid transparent;
        border-left-color: #202335;
    }
    [aria-label][balloon-shown="right"]::before {
        border: 5px solid transparent;
        border-right-color: #202335;
    }
    [aria-label][balloon-shown="up"]::before {
        border: 5px solid transparent;
        border-top-color: #202335;
    }
    [aria-label][balloon-shown="down"]::before {
        border: 5px solid transparent;
        border-bottom-color: #202335;
    }
    [aria-label][balloon-shown]::before {
        width: 0;
        height: 0;
        /* pointer-events: none; */ /* 让鼠标无法悬浮在所弹出的伪元素上 */
        z-index: 10;
        content: "";
        position: absolute;
        opacity: 0;
        visibility: hidden;
        transition: opacity .4s, transform .4s, visibility .4s;
    }
    [aria-label][balloon-shown]::after {
        opacity: 0;
        z-index: 10;
        /* pointer-events: none; */ /* 让鼠标无法悬浮在所弹出的伪元素上 */
        visibility: hidden;
        background-color: #202335;
        content: attr(aria-label);
        white-space: nowrap;
        border-radius: 2px;
        position: absolute;
        padding: .5em 1em;
        transition: opacity .4s, transform .4s, visibility .4s;
        color: #eee;
    }
    [aria-label][balloon-shown]:hover::after, [aria-label][balloon-shown]:hover::before {
        opacity: 0.9;
        visibility: visible;
    }
    [aria-label][balloon-shown="left"]::after {
        margin-right: 10px;
    }
    [aria-label][balloon-shown="left"]::after, [aria-label][balloon-shown="left"]::before {
        right: 100%;
        top: 50%;
        transform: translate(5px, -50%);
    }
    [aria-label][balloon-shown="right"]::after {
        margin-left: 10px;
    }
    [aria-label][balloon-shown="right"]::after, [aria-label][balloon-shown="right"]::before {
        left: 100%;
        top: 50%;
        transform: translate(-5px, -50%);
    }
    [aria-label][balloon-shown="left"]:hover::after, [aria-label][balloon-shown="left"]:hover::before, [aria-label][balloon-shown="right"]:hover::after, [aria-label][balloon-shown="right"]:hover::before {
        transform: translate(0, -50%);
    }
    [aria-label][balloon-shown="up"]::after {
        margin-bottom: 10px;
    }
    [aria-label][balloon-shown="up"]::after, [aria-label][balloon-shown="up"]::before {
        bottom: 100%;
        left: 50%;
        transform: translate(-50%, 5px);
    }
    [aria-label][balloon-shown="down"]::after {
        margin-top: 10px;
    }
    [aria-label][balloon-shown="down"]::after, [aria-label][balloon-shown="down"]::before {
        left: 50%;
        top: 100%;
        transform: translate(-50%, -5px);
    }
    [aria-label][balloon-shown="up"]:hover::after, [aria-label][balloon-shown="up"]:hover::before, [aria-label][balloon-shown="down"]:hover::after, [aria-label][balloon-shown="down"]:hover::before {
        transform: translate(-50%, 0);
    }
</style>

<p>代码是这样的：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">[aria-label][balloon-shown]</span> <span class="token punctuation">&#123;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="left"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>
    <span class="token property">border-left-color</span><span class="token punctuation">:</span> #202335<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="right"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>
    <span class="token property">border-right-color</span><span class="token punctuation">:</span> #202335<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="up"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>
    <span class="token property">border-top-color</span><span class="token punctuation">:</span> #202335<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="down"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 5px solid transparent<span class="token punctuation">;</span>
    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> #202335<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token comment">/* pointer-events: none; */</span> <span class="token comment">/* 让鼠标无法悬浮在所弹出的伪元素上 */</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> opacity .4s<span class="token punctuation">,</span> transform .4s<span class="token punctuation">,</span> visibility .4s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown]::after</span> <span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span>
    <span class="token comment">/* pointer-events: none; */</span> <span class="token comment">/* 让鼠标无法悬浮在所弹出的伪元素上 */</span>
    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #202335<span class="token punctuation">;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>aria-label<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> .5em 1em<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> opacity .4s<span class="token punctuation">,</span> transform .4s<span class="token punctuation">,</span> visibility .4s<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown]:hover::after, [aria-label][balloon-shown]:hover::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.9<span class="token punctuation">;</span>
    <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="left"]::after</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="left"]::after, [aria-label][balloon-shown="left"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>5px<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="right"]::after</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="right"]::after, [aria-label][balloon-shown="right"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-5px<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="left"]:hover::after, [aria-label][balloon-shown="left"]:hover::before, [aria-label][balloon-shown="right"]:hover::after, [aria-label][balloon-shown="right"]:hover::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="up"]::after</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="up"]::after, [aria-label][balloon-shown="up"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> 5px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="down"]::after</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="down"]::after, [aria-label][balloon-shown="down"]::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -5px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">[aria-label][balloon-shown="up"]:hover::after, [aria-label][balloon-shown="up"]:hover::before, [aria-label][balloon-shown="down"]:hover::after, [aria-label][balloon-shown="down"]:hover::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>使用时这样使用：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签</span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文字<span class="token punctuation">"</span></span> <span class="token attr-name">balloon-shown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>up<span class="token punctuation">"</span></span><span class="token attr-name">或"down"或"left"或"right"</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签</span><span class="token punctuation">></span></span></code></pre>

]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼树和哈夫曼编码</title>
    <url>//posts/huff-tree/</url>
    <content><![CDATA[<p>更前面的知识：<a style="border-bottom:none;" href="/posts/graph-tree">树的概念</a><br>先来说说前面的芝士：</p>
<ul>
<li><strong>路径长度</strong> 从根结点到目标结点经过的结点数量（边的数量）。</li>
<li><strong>权值</strong> 一个结点的权值可以是人为赋予的一个数。</li>
<li><strong>结点的带权路径长度</strong> 从根节点到当前结点的路径长度乘结点的权值。</li>
<li><strong>树的带权路径长度</strong> 整个树中叶子结点的带权路径长度总和。</li>
</ul>
<p>哈夫曼树是二叉树，且哈夫曼树的带权路径长度最小，哈夫曼编码会用到。</p>
<span id="more"></span>

<h2 id="哈夫曼树的构建"><a href="#哈夫曼树的构建" class="headerlink" title="哈夫曼树的构建"></a>哈夫曼树的构建</h2><p>前面写了，哈夫曼树的带权路径长度最小，若想带权路径最小，则权值小的结点的路径长，权值大的结点路径短。哈夫曼树构建的结点都必须是叶子结点，例如用 1 2 5 6 构建的哈夫曼树是这样的：<br><img src="https://s2.loli.net/2023/12/16/pcyXsqGt9DjiPQL.png" alt="哈夫曼树示例"><br>这个树的带权路径长度为 25。</p>
<p>构造过程：</p>
<ol>
<li>选出权值两个最小的结点合并；</li>
<li>将两个点从将要合并的结点序列中删除，加入两个结点的和；</li>
<li>重复以上步骤，直至达到要求。</li>
</ol>
<p>演示：<br><img src="https://s2.loli.net/2023/12/16/nZzqTchylwDC1Jj.png" alt="demo"></p>
<h2 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h2><p>基于哈夫曼树，按照字符出现的频率（也就是哈夫曼树中的权值）进行二进制编码。<br>也就是用哈夫曼树对一串字符进行编码，可以认为左子树是 0，右子树是 1。（说不清楚啊）<br>哈夫曼编码是<strong>贪心</strong>的思想，为了使信息量最小化，可以用到哈夫曼树。</p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>线性数据结构：链表的模板</title>
    <url>//posts/lianbiao/</url>
    <content><![CDATA[<p>链表类似于数组，与数组不同的是，链表可以更加方便地更改数据和删除数据。数组若想将中间的数据删除，则要非很大功夫，而链表就不同了，它的操作更加简单一些（后面说）。</p>
<p>链表的数据组可以叫做“结点”，结点分成两个部分：一个是数据域，一个是指针域，数据域存数据，指针域指向下一个结点的数据地址。正是指针域将链表的每一个结点连在了一起。这种特性有一个好处：内存地址可以不连续，而数组的内存地址是必须要连续的。<br>比如内存还有 2GB 空闲，我申请了一个 1GB 大的数组，理论上是可以申请下来的，但占用的内存不一定完全是连续的。假设内存被一大堆东西占用的零零碎碎：确实有 2GB，但分成 4 个 500MB，这就申请不下来。而链表呢，可以充分利用内存碎片，通过指针变量，将分开的数据连在一起。</p>
<span id="more"></span>

<h2 id="普通的链表"><a href="#普通的链表" class="headerlink" title="普通的链表"></a>普通的链表</h2><p>链表还有一个好处：它是<strong>动态</strong>的，也就是说，使用的内存想申请就申请，想销毁就销毁(C&#x2F;C++中，其他语言我不确定)<br>，可以节约内存。<br>申请内存，可以用到 <code>&lt;malloc.h&gt;</code> 头文件中的 <code>malloc()</code> 函数，只有一个参数，填上你想要申请的内存大小(字节)，可以和 <code>sizeof</code> 一起用。但它返回的是 <code>void</code> 类型，所以最好在它前面加上一个类型强制转换。而销毁内存，则可以用到这个头文件中 <code>free()</code> 函数，一个参数，往里面填上地址（指针变量）即可销毁，但从此不可以再调用 使用这个内存的变量，若调用会报错，需要注意。</p>
<p>无论什么链表，还要有一个头指针，以便寻找元素时更好的去找。链表的结点一般用一个结构体，结构体里面一个是数据(<code>data</code>)，一个是存着下一个结点数据地址的指针变量(<code>next</code>)。<br>示例代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">node</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    node <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

node <span class="token operator">*</span>head<span class="token punctuation">;</span></code></pre>

<p>首先说直接往末尾加上元素。先要判断链表是否为空，可以通过头指针 <code>head</code> 是否为空（<code>NULL</code>），若是第一个便创建新结点，申请为 <code>node</code> 类型的大小的内存，将那个结点的数据域赋值为加上的数据，再将结点的指针域设为 <code>NULL</code>（以防万一），将 <code>head</code> 设为新结点的地址。<br>否则通过指针域穷举当前指针域是否为 <code>NULL</code>，也就是最后一个元素，若到了最后一个元素，则申请内存，新建结点，数据域赋值，将上一个结点的指针域赋值为当前结点数据域的地址，将打钱结点指针域设为 <code>NULL</code>。<br>示例代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        node <span class="token operator">*</span>New <span class="token operator">=</span> <span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        head <span class="token operator">=</span> New<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        node <span class="token operator">*</span>s <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        node <span class="token operator">*</span>New <span class="token operator">=</span> <span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> New<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>插入也差不多，穷举到目标位置，申请内存，更改指针域。访问即是穷举，顺着指针走。更改数据还要穷举，将数据域改掉就好了。重点将删除。<br>首先，判断删除的是否是第一个，若是则将 <code>head</code> 更改为下一个结点的指针域。否则穷举目标，新建一个 <code>node</code> 类型的零时变量，将它赋值为删除目标的下一个结点的指针域，销毁准备删除的内存，将删除的地方的指针域赋值为那个零时变量。<br>完整代码：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token comment">// 结点</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token comment">// 数据</span>
    node <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">// 下一个结点的地址</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

node <span class="token operator">*</span>head<span class="token punctuation">;</span> <span class="token comment">// 指针变量</span>

<span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token comment">// 往末尾追加元素，`data` 是要追加的数据</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 链表为空</span>
    <span class="token punctuation">&#123;</span>
        node <span class="token operator">*</span>New <span class="token operator">=</span> <span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 申请内存</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token comment">// 存数据</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 以防万一</span>
        head <span class="token operator">=</span> New<span class="token punctuation">;</span> <span class="token comment">// 因为链表是空的，所以要给头指针赋值。</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        node <span class="token operator">*</span>s <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment">// 开始遍历</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">// 条件的意思是不为链表的最后一个</span>
        <span class="token punctuation">&#123;</span>
            s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 通过下一个结点的地址不但遍历</span>
        <span class="token punctuation">&#125;</span>
        node <span class="token operator">*</span>New <span class="token operator">=</span> <span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同上的 `head==NULL`</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> New<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token comment">// 插入， `x` 是要加的数据，`y` 表示在链表的第 `y` 个元素后插入数据</span>
<span class="token punctuation">&#123;</span>
    node <span class="token operator">*</span>s <span class="token operator">=</span> head<span class="token punctuation">;</span>
    y<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        y<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    node <span class="token operator">*</span>New <span class="token operator">=</span> <span class="token punctuation">(</span>node <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>New<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> New<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">// 返回链表的第 `x` 个结点的数据</span>
<span class="token punctuation">&#123;</span>
    node <span class="token operator">*</span>s <span class="token operator">=</span> head<span class="token punctuation">;</span>
    x<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        x<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token comment">// 更改链表第 `x` 个结点的数据域为 `y`</span>
<span class="token punctuation">&#123;</span>
    node <span class="token operator">*</span>s <span class="token operator">=</span> head<span class="token punctuation">;</span>
    x<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        x<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">=</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">deletes</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment">// 删除链表第 `x` 个结点</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    node <span class="token operator">*</span>s <span class="token operator">=</span> head<span class="token punctuation">;</span>
    x<span class="token operator">--</span> <span class="token punctuation">;</span>
    x<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        x<span class="token operator">--</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    node <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">// 零时指针变量，下下个结点的指针域</span>
    <span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 销毁内存</span>
    <span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// main() 是示例</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在末尾追加 100</span>
    <span class="token function">push</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在末尾追加 200</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在第一个结点的后面加上 300</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"first:%d, second:%d, third:%d\n"</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 链表现在为 100 300 200</span>
    <span class="token function">deletes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删掉第一个元素</span>
    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在第一个结点的后面插入 400</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"first:%d, second:%d, third:%d\n"</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 链表现在为 300 400 200</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>虽然代码注释讲了，为了更清楚，再说一遍输出：</p>
<pre class="language-plain" data-language="plain"><code class="language-plain">first:100, second:300, third:200
first:300, second:400, third:200</code></pre>
<p><strong>附演示：</strong><a href="https://visualgo.net/zh/list">https://visualgo.net/zh/list</a></p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>有关进制的一些小记</title>
    <url>//posts/jinzhi/</url>
    <content><![CDATA[<p>x 进制，代表着在这个计数方法中逢 x 进一，例如十进制就代表着<strong>逢十进一</strong>。<br>我们平常在生活中用的都是十进制。进制一类的东西在 OI 中也比较重要<del>CCF 喜欢考</del>，计算机中的数据都是以二进制储存的，二进制也完美地利用了每一个比特。当然，只要有足够的表示方法，人们可以弄出三十二进制、六十四进制，甚至一千进制。<del>闲的没事情干，</del>进制有关的以及进制之间的转换就是我想记下来的话题。</p>
<span id="more"></span>

<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><h3 id="二进制和十进制的转换"><a href="#二进制和十进制的转换" class="headerlink" title="二进制和十进制的转换"></a>二进制和十进制的转换</h3><p>这是 <del>€€£</del> CCF 出的题中一定会多少考到一点的知识，比较重要。一般来说，x 进制的数记作 $(\text {number})_x$，例如二进制数 <span style="font-family:monospace;">1011</span> 记作 $(1011)_2$，十进制数 <span style="font-family:monospace;">114514</span> 记作 $(114514)_{10}$。</p>
<h4 id="二进制-十进制"><a href="#二进制-十进制" class="headerlink" title="二进制 -&gt; 十进制"></a>二进制 -&gt; 十进制</h4><p>二进制的数从右往左每一位都有权值，第 <span style="font-family:monospace;">i</span> 位的权值为 $2^{(i - 1)}$。举个例子：二进制数 <span style="font-family:monospace;">1011001</span> 的每一位权值是：<br>$\mathbf{1} \to 2^6 \ \ \ \mathbf{0} \to 2^5 \ \ \ \mathbf{1} \to 2^4 \ \ \ \mathbf{1} \to 2^3 \ \ \ \mathbf{0} \to 2^2 \ \ \ \mathbf{0} \to 2^1 \ \ \ \mathbf{1} \to 2^0$。</p>
<p>从二进制转换为十进制只需要将当前二进制位的值乘上权值即可。还是 <span style="font-family:monospace;">1011001</span>：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
&amp;(1011001)_2 \\
&#x3D; \ &amp;(\mathbf&#123;1&#125; \times 2^6) + (\mathbf&#123;0&#125; \times 2^5) + (\mathbf&#123;1&#125; \times 2^4) + (\mathbf&#123;1&#125; \times 2^3) + (\mathbf&#123;0&#125; \times 2^2) + (\mathbf&#123;0&#125; \times 2^1) + (\mathbf&#123;1&#125; \times 2^0) \\
&#x3D; \ &amp;64 + 0 + 16 + 8 + 0 + 0 + 1 \\
&#x3D; \ &amp;(89)_&#123;10&#125;
\end&#123;aligned&#125;</code></pre>

<p>可见，二进制 <span style="font-family:monospace;">1011001</span> 转换为十进制是 <span style="font-family:monospace;">89</span>。<br><del>话说 hexo next 的 mathjax 渲染越来越奇怪了。。。</del></p>
<h4 id="十进制-二进制"><a href="#十进制-二进制" class="headerlink" title="十进制 -&gt; 二进制"></a>十进制 -&gt; 二进制</h4><p>可以使用短除法，将十进制除以二取余，直至商为零。最后将取余的结果倒序输出。<br>比如说，还是那个数字 $(89)_{10}$：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
2 \ | \underline&#123; \ \ \ \ \ \ \ \ &#125; &amp;\underline&#123;89 \ &#125; \\
2 \ | \underline&#123; \ \ \ \ \ \ \ &#125; &amp;\underline&#123;44 \ &#125; \ \ \ \ \ \ \textbf&#123;1&#125; \\
2 \ | \underline&#123; \ \ \ \ \ \ &#125; &amp;\underline&#123;22 \ &#125; \ \ \ \ \ \ \textbf&#123;0&#125; \\
2 \ | \underline&#123; \ \ \ \ \ &#125; &amp;\underline&#123;11 \ &#125; \ \ \ \ \ \ \textbf&#123;0&#125; \\
2 \ | \underline&#123; \ \ \ \ &#125; &amp;\underline&#123;\ \ 5 \ &#125; \ \ \ \ \ \ \textbf&#123;1&#125; \\
2 \ | \underline&#123; \ \ \ &#125; &amp;\underline&#123;\ \ 2 \ &#125; \ \ \ \ \ \ \textbf&#123;1&#125; \\
2 \ | \underline&#123; \ \ &#125; &amp;\underline&#123;\ \ 1 \ &#125; \ \ \ \ \ \ \textbf&#123;0&#125; \\
2 \ | &amp;\underline&#123;\ \ 0 \ &#125; \ \ \ \ \ \ \textbf&#123;1&#125;
\end&#123;aligned&#125;</code></pre>

<p>最后，倒着输出即可得知 $(89)_{10} &#x3D; (1011001)_2$ 。<br><del>ps: mathjax 没有特定的短除公式，只好用这种奇特的方法模拟短除。</del></p>
<div class="note info"><p>P.S. 另一种更方便的双向转换方法</p>
<p>可以发现，其实二进制十进制的互相转换都离不开 二的 i 次方，也可以将这张表记下来（也就是从右往左不断地乘二嘛），之后的转换会方便很多。<br>其实这张表也就是二的 i 次方：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">... 256 \ \ 128 \ \ 64 \ \ 32 \ \ 16 \ \ 8 \ \ 4 \ \ 2 \ \ 1</code></pre>

<div class="tabs" id="demo"><ul class="nav-tabs"><li class="tab active"><a href="#demo-1">二进制进制转十进制</a></li><li class="tab"><a href="#demo-2">十进制转二进制</a></li></ul><div class="tab-content"><div class="tab-pane active" id="demo-1"><p>这算是这张表最方便的用法了，还是 $(1011001)_2$</p>
<table>
<thead>
<tr>
<th align="center">每一位</th>
<th align="left">1</th>
<th align="left">0</th>
<th align="left">1</th>
<th align="left">1</th>
<th align="left">0</th>
<th align="left">0</th>
<th align="left">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center">每一位对应的权值</td>
<td align="left">64</td>
<td align="left">32</td>
<td align="left">16</td>
<td align="left">8</td>
<td align="left">4</td>
<td align="left">2</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>一代表着要加起来，否则不加起来，那么，这个二进制数等于这个十进制数：<br>$(1011001)_2 &#x3D; 64 + 16 + 8 + 1 &#x3D; (89)_{10}$</p></div><div class="tab-pane" id="demo-2"><p>同样的，也可以一位一位地尝试累加。假如十进制减去奶味的权值不小于 0，就减去，否则不减去，直至加起来的权值之和等于目标十进制数。例如十进制数 89：  </p>
<table>
<thead>
<tr>
<th align="center">权值表</th>
<th align="left">64</th>
<th align="left">32</th>
<th align="left">16</th>
<th align="left">8</th>
<th align="left">4</th>
<th align="left">2</th>
<th align="left">1</th>
</tr>
</thead>
<tbody><tr>
<td align="center">是否减去</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">1</td>
</tr>
<tr>
<td align="center">过程备注</td>
<td align="left">初始的值是 89，64 &lt; 89，就减去，89 - 64 &#x3D; 25。结果 <strong>1</strong>。</td>
<td align="left">32 &gt; 25，不减去。结果 <strong>0</strong>。</td>
<td align="left">16 &lt; 25，25 - 16 &#x3D; 9。结果 <strong>1</strong>。</td>
<td align="left">8 &lt; 9，9 - 8 &#x3D; 1。结果 <strong>1</strong>。</td>
<td align="left">4 &gt; 1。结果 <strong>0</strong>。</td>
<td align="left">2 &gt; 1。结果 <strong>0</strong>。</td>
<td align="left">1 &#x3D; 1，1 - 1 &#x3D; 0。结果 <strong>1</strong>。</td>
</tr>
</tbody></table>
<p>可见：<br>$(89)_{10} &#x3D; (1011001)_2$</p></div></div></div>
</div>

<h3 id="其他进制之间的转换"><a href="#其他进制之间的转换" class="headerlink" title="其他进制之间的转换"></a>其他进制之间的转换</h3><p>像其他进制，比如十六进制，大于 <span style="font-family:monospace;">9</span> 时就可以用字母 <span style="font-family:monospace;">A B C D E F</span> 按照顺序代替数字。</p>
<h4 id="使用十进制当作媒介的转换（对于所有进制通用）"><a href="#使用十进制当作媒介的转换（对于所有进制通用）" class="headerlink" title="使用十进制当作媒介的转换（对于所有进制通用）"></a>使用十进制当作媒介的转换（对于所有进制通用）</h4><p>其实，任何进制之间的转换都可以将那个进转换为十进制后再转换为目标进制。十进制也可以转换为任何进制。至于怎么转换，其实和 <a href="#二进制和十进制的转换"> <i class="fa-solid fa-hashtag" style="font-size:15px;"></i> 二进制和十进制之间的转换</a> 差不多。<br>同样的，x 进制转十进制 每一位的 每一位乘上每一位的权值 之和。例如：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
&amp;(1021102)_3 \\
&#x3D; \ &amp;(\mathbf&#123;1&#125; \times 3^6) + (\mathbf&#123;0&#125; \times 3^5) + (\mathbf&#123;2&#125; \times 3^4) + (\mathbf&#123;1&#125; \times 3^3) + (\mathbf&#123;1&#125; \times 3^2) + (\mathbf&#123;0&#125; \times 3^1) + (\mathbf&#123;2&#125; \times 3^0) \\
&#x3D; \ &amp;729 + 0 + 162 + 27 + 9 + 0 + 2 \\
&#x3D; \ &amp;929
\end&#123;aligned&#125;</code></pre>

<p>$x$ 进制的从右往左数（从 1 开始数）第 $i$ 位的权值就是 $x^{(i - 1)}$。转换为十进制只需要将每一位的 每一位的权值乘那一位的数 加起来即可。</p>
<p>十进制转 x 进制也可以用短除法，不断整除 x，取余，然后倒序输出。<br>照理说，将十进制作为媒介可以将任意进制转换为其他任意进制。<br>同样的，也可以通过代码更方便地实现（说一句，还是别人的代码写的好看，我写的屎山简直不忍直视，而且只能大到十六进制）：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">xtoten</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> string s<span class="token punctuation">)</span> <span class="token comment">// x 进制转十进制</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> tensum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">// 从右往左求权值</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> t<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 屎山代码的本质。。。</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'2'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'3'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'4'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'5'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'6'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'7'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'8'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'9'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'A'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'B'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'C'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'D'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'E'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'F'</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
        tensum <span class="token operator">+=</span> t <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $x$ 进制的从右往左数（从 1 开始数）第 $i$ 位的权值就是 $x^&#123;(i - 1)&#125;$。</span>
        cnt<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> tensum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
string <span class="token function">tentoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment">// 十进制转 x 进制</span>
<span class="token punctuation">&#123;</span>
    string ret <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> t <span class="token operator">=</span> n <span class="token operator">%</span> y<span class="token punctuation">;</span> <span class="token comment">// 除以 x 剩下的余数</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'0'</span><span class="token punctuation">;</span> <span class="token comment">// 屎山依旧。。。</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'1'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'2'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'3'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'4'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'5'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'6'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'7'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'8'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'9'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'B'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'C'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'D'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'E'</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span> ret <span class="token operator">+=</span> <span class="token char">'F'</span><span class="token punctuation">;</span>
        n <span class="token operator">/=</span> y<span class="token punctuation">;</span> <span class="token comment">// 整除</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span> <span class="token punctuation">;</span> <span class="token comment">// 除到零为止</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
    string qwq<span class="token punctuation">;</span>
    
    cin <span class="token operator">>></span> n <span class="token operator">>></span> qwq <span class="token operator">>></span> m<span class="token punctuation">;</span> <span class="token comment">// n: x 进制;  qwq: 一个 x 进制的数;  m: 需要转换成的进制</span>
    
    string ans <span class="token operator">=</span> <span class="token function">tentoy</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token function">xtoten</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> qwq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment">// 十进制转 x 进制需要倒序输出</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 比如输入  3 1021102 10  会输出  929。</span>
<span class="token comment">// 其实这个代码就是 洛谷 P1143 的代码 https://www.luogu.com.cn/problem/P1143</span></code></pre>

<h4 id="将二进制转换为八进制、十六进制"><a href="#将二进制转换为八进制、十六进制" class="headerlink" title="将二进制转换为八进制、十六进制"></a>将二进制转换为八进制、十六进制</h4><p>注意一下，二进制并不可以直接转换为其他进制，只不过对于二进制转八进制、十六进制比较方便。若是这二进制转八进制或十六进制，要是嫌使用十进制作为媒介比较麻烦，那就可以用二进制作为媒介更加方便一些。  </p>
<p>将二进制转换为八进制，可以从右往左三位三位分开来，再将那三位二进制转换为十进制，合起来（注意是字符意义上的合起来）就是八进制。十六进制则是四位四位分开来。这里举两个例子：</p>
<div class="tabs" id="binhex"><ul class="nav-tabs"><li class="tab active"><a href="#binhex-1">二进制转八进制</a></li><li class="tab"><a href="#binhex-2">二进制转十六进制</a></li></ul><div class="tab-content"><div class="tab-pane active" id="binhex-1"><pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\because
\underset&#123;\text&#123;八进制：&#125;&#125;&#123;\text&#123;二进制：&#125;&#125; ( \underset&#123;1&#125;&#123;\underline&#123;1&#125;&#125; \ \underset&#123;2&#125;&#123;\underline&#123;010&#125;&#125; \ \underset&#123;7&#125;&#123;\underline&#123;111&#125;&#125; )_&#123;2&#125;
\\
\therefore
(1010111)_&#123;2&#125; &#x3D; (127)_&#123;8&#125;</code></pre></div><div class="tab-pane" id="binhex-2"><pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\because
\underset&#123;\text&#123;十六进制：&#125;&#125;&#123;\text&#123;二进制：&#125;&#125; ( \underset&#123;3&#125;&#123;\underline&#123;11&#125;&#125; \ \underset&#123;\text&#123;A&#125;&#125;&#123;\underline&#123;1010&#125;&#125; \ \underset&#123;1&#125;&#123;\underline&#123;0001&#125;&#125; )_&#123;2&#125;
\\
\therefore
(1110100001)_&#123;2&#125; &#x3D; (\text&#123;3A1&#125;)_&#123;16&#125;</code></pre></div></div></div>

<div class="note info"><p>P.S. 二进制、八进制、十进制、十六进制在 C++ 中的表示方法（前缀）</p>
<p>以上这些进制自然有自己的表示方法。其中，二进制以 <code>0b</code> 开头；八进制以 <code>0</code> 开头；十进制就是平常的写法，没有任何前缀；十六进制以 <code>0x</code> 开头。<br>例如，以下代码会输出四个 <code>2147483647</code>。</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d\n"</span><span class="token punctuation">,</span> 
       <span class="token number">0b1111111111111111111111111111111</span><span class="token punctuation">,</span>  <span class="token comment">// 二进制</span>
       <span class="token number">017777777777</span><span class="token punctuation">,</span>  <span class="token comment">// 八进制</span>
       <span class="token number">2147483647</span><span class="token punctuation">,</span>  <span class="token comment">// 十进制</span>
       <span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 十六进制</span></code></pre></div>

<h3 id="进制小数之间的转换"><a href="#进制小数之间的转换" class="headerlink" title="进制小数之间的转换"></a>进制小数之间的转换</h3><p>进制小数也是 CCF 要考的一点，恰好在某个模拟赛上做到了，更新一下下。</p>
<h4 id="十进制小数转-x-进制"><a href="#十进制小数转-x-进制" class="headerlink" title="十进制小数转 x 进制"></a>十进制小数转 x 进制</h4><p>简单来说就是小数点前面正常转换，小数点之后乘 x 取整，正常输出。例如十进制 0.3 转换为二进制：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
&amp;0.3 \times 2 &#x3D; \mathbf&#123;0&#125;.6 \\
\text&#123;二进制小数：&#125;&amp;0.\mathbf&#123;0&#125; \\
\\
&amp;0.6 \times 2 &#x3D; \mathbf&#123;1&#125;.2 \\
\text&#123;二进制小数：&#125;&amp;0.0\mathbf&#123;1&#125; \\
\\
&amp;0.2 \times 2 &#x3D; \mathbf&#123;0&#125;.4 \\
\text&#123;二进制小数：&#125;&amp;0.01\mathbf&#123;0&#125; \\
\\
&amp;0.4 \times 2 &#x3D; \mathbf&#123;0&#125;.8 \\
\text&#123;二进制小数：&#125;&amp;0.010\mathbf&#123;0&#125; \\
\\
&amp;0.8 \times 2 &#x3D; \mathbf&#123;1&#125;.6 \\
\text&#123;二进制小数：&#125;&amp;0.0100\mathbf&#123;1&#125; \\
\\
&amp;0.6 \times 2 &#x3D; \mathbf&#123;1&#125;.2 \\
\text&#123;二进制小数：&#125;&amp;0.01001\mathbf&#123;1&#125; \\
\\
&amp;...
\end&#123;aligned&#125;</code></pre>

<p>最后可以得出：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">(0.3)_&#123;10&#125; &#x3D; (0.0\dot&#123;1&#125;00\dot&#123;1&#125;)_2</code></pre>

<p>注：无限循环小数</p>
<h4 id="x-进制小数转十进制"><a href="#x-进制小数转十进制" class="headerlink" title="x 进制小数转十进制"></a>x 进制小数转十进制</h4><p>其实和整数位很像，不过从左往右第 i 位的权值是 -i。不写了吧。。。</p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>位运算是一个比较<del>毒瘤</del>有趣的运算，是二进制的运算。当然也可以通过位运算做一些与平常的（逻辑）运算符等价的运算，但速度更快。</p>
<h3 id="按位与运算"><a href="#按位与运算" class="headerlink" title="按位与运算 &amp;"></a>按位与运算 <code>&amp;</code></h3><p>将两个二进制的每一位逐个比较，若这一位都为 1 则得出 1，否则得出 0。若这两个二进制数字位数不同可以在前面补零。</p>
<pre class="language-none"><code class="language-none">1 &amp; 1 &#x3D; 1;
0 &amp; 0 &#x3D; 0;
1 &amp; 0 &#x3D; 0;
0 &amp; 1 &#x3D; 0;</code></pre>

<p>这个运算符还有一个备选关键字：<code>bitand</code>，比如 <code>10 &amp; 3</code> 等价于 <code>10 bitand 3</code>。<br>其实所有位运算也可以在 C++ 中用十进制直接运算，例如 <code>10 &amp; 3</code>，用 <code>0b</code> 前缀也行，也就是 <code>0b1010 &amp; 0b11</code> 或 <code>0b1010 &amp; 0b0011</code>。<br>举个更详细的例子：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;matrix&#125;
&amp; 1011001 \\
\&amp; &amp; 0111101 \\
\hline
&amp; 0011001
\end&#123;matrix&#125;</code></pre>

<p>转为十进制就是 <span style="font-family:monospace;">89 &amp; 61 &#x3D; 15</span>。</p>
<h3 id="按位或运算"><a href="#按位或运算" class="headerlink" title="按位或运算 |"></a>按位或运算 <code>|</code></h3><p>两个二进制的每一位比较，若有一个为 1 则得出 1，否则得出 0。同样的，若这两个二进制数字位数不同可以在前面补零。</p>
<pre class="language-none"><code class="language-none">1 | 1 &#x3D; 1;
0 | 0 &#x3D; 0;
1 | 0 &#x3D; 1;
0 | 1 &#x3D; 1;</code></pre>

<p>这个运算符也有一个备选关键字 <code>bitor</code>，<code>10 | 3</code> 等价于 <code>10 bitor 3</code>。<br>例子：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;matrix&#125;
&amp; 1011001 \\
| &amp; 0111101 \\
\hline
&amp; 1111101
\end&#123;matrix&#125;</code></pre>

<p>转为十进制就是 <span style="font-family:monospace;">89 | 61 &#x3D; 125</span>。</p>
<h3 id="按位非运算"><a href="#按位非运算" class="headerlink" title="按位非运算 ~"></a>按位非运算 <code>~</code></h3><p>这算是最简单的运算符了，即将每一位取反。例如 <code>~0</code> 就等于 1，<code>~1</code> 就等于 0。<br>例子：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;matrix&#125;
\sim &amp; 0111101 \\
\hline
&amp; 1000010
\end&#123;matrix&#125;</code></pre>

<h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或 ^"></a>按位异或 <code>^</code></h3><p>其实就是比较每一位是否相同，若相同为 <code>0</code>， 不相同为 <code>1</code>。</p>
<pre class="language-none"><code class="language-none">1 ^ 1 &#x3D; 0; 
0 ^ 0 &#x3D; 0; 
1 ^ 0 &#x3D; 1; 
0 ^ 1 &#x3D; 1;</code></pre>

<p>C++ 中也有备选关键字，就是 <code>xor</code>。<code>10 ^ 3</code> 等价于 <code>10 xor 3</code>。<br>例如：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;matrix&#125;
&amp; 1011001 \\
\text&#123;\textasciicircum&#125; &amp; 0111101 \\
\hline
&amp; 1100100
\end&#123;matrix&#125;</code></pre>

<p>转为十进制就是 <span style="font-family:monospace;">89 ^ 61 &#x3D; 100</span>。</p>
<h3 id="左移"><a href="#左移" class="headerlink" title="左移 &lt;&lt; 右移 &gt;&gt;"></a>左移 <code>&lt;&lt;</code> 右移 <code>&gt;&gt;</code></h3><p>将所有二进制位全部左移，也就是将最左边的二进制位丢弃，右边补上一个 0。例如：<br><code>10110011 &lt;&lt; 1 = 01100110</code>。<br>右移也是一样，不过负数往左边补 1，正数补 0。</p>
<div class="note info"><p>P.S. 位运算时赋值</p>
<p>同 <code>+=</code> <code>-=</code> 等符号一样，位运算也可以在符号后面加上 <code>=</code>，<code>&gt;&gt;=</code> <code>^=</code> <code>&amp;=</code> <code>&lt;&lt;=</code> <code>|=</code> 等运算符都是可以的。</p>
</div>

<div class="note info"><p>P.S. 位运算的一些使用技巧</p>
<p>位运算其实有很多奇怪的应用。例如：</p>
<ol>
<li><strong>判断偶数奇数</strong>（能否被 2 整除）。0 是偶数 1 是奇数。<code>([number] &amp; 1) == 1</code> 相当于 <code>([number] % 2) == 1</code>，平常还是写 <code>[number] &amp; 1</code>。举个例子，<code>10 &amp; 1 = 0</code>、<code>13 &amp; 1 = 1</code>。</li>
<li><strong>求 2 的几次方</strong>，<code>1 &lt;&lt; [number]</code> 就是求 2 的 [number] 次方。例如 <code>1 &lt;&lt; 10 = sqrt(2, 10) = 1024</code>。</li>
<li><strong>交换 <code>a b</code> 两个数字</strong>。可以 <code>a ^= b; b ^= a; a ^= b</code>，效率比普通交换要高。</li>
<li><strong>正数变负数，负数变正数</strong>。假设一个数字 <code>n</code>，只需要 <code>~n + 1</code> 就可以转变该数正负号。例如 <code>~1024 + 1 = -1024</code>、<code>~-114 + 1 = 114</code>。（在 “补码” 中，详见下面的二进制编码）</li>
<li><strong>除以 2</strong>，使用 <code>[number] &gt;&gt; 1</code>。例如 <code>100 &gt;&gt; 1</code> 等价于 <code>100 / 2</code>，再比如 <code>int a = 1024; a &gt;&gt;= 1; printf(&quot;%d\n&quot;, a);</code> 输出 <code>512</code>。</li>
</ol>
<p>其他的应用，这里不写了，有兴趣可以去网上找更多的。</p>
</div>

<h2 id="二进制的编码"><a href="#二进制的编码" class="headerlink" title="二进制的编码"></a>二进制的编码</h2><p>其实，刚才讲的（个别除外）二进制都是二进制中编码的一种：<strong>原码</strong>。二进制一共有三个编码：<strong>原码</strong>、<strong>反码</strong>和<strong>补码</strong>，计算机中真正使用的是<strong>补码</strong>。<br>这些编码都要规定它们的位数，否则就弄不清楚到底是正数还是负数了。在下面的随记中，我用的是<strong>8 位整型</strong>。其实在 C++ 中，<code>int</code> 是 32 位整型。确定位数很重要，例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span>       a <span class="token operator">=</span> <span class="token number">0b11111111111111111111111111111111</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token number">0b11111111111111111111111111111111</span><span class="token punctuation">;</span> <span class="token comment">// int a 格式化了一下，更方便看</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %lld\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>会输出 <code>-1 4294967295</code>。因为 <code>int</code> 是 32 位整型，而 <code>long long 是</code> 64 位。补码的第一位是符号位，若为 1 就是负数。而我给的二进制是 32 位，第一位是 1，<code>int</code> 就是负数。</p>
<p>原码、反码、补码的表示是将二进制用中括号括起来，再右下角写上 “原” “反”或“补”。例如 $[00001010]_{\text{原}}$、$[11101110]_{\text{补}}$。</p>
<h3 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h3><p>原码、反码以及补码的最左边的那一位都是<strong>符号位</strong>。例如 $[00000001]_{\text{原}}$ 是十进制的 1，而 $[10000001]_{\text{原}}$ 是十进制的 -1。</p>
<p>在原码中，除符号位外，剩下的二进制都是按照 <a href="#二进制-gt-十进制"> <i class="fa-solid fa-hashtag" style="font-size:15px;"></i> 二进制转十进制</a> 一样。若符号位是 1 那就将转换的十进制加个负号。例如：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
(5)_&#123;10&#125; &amp;&#x3D; [00000101]_&#123;\text&#123;原&#125;&#125; \\
(-12)_&#123;10&#125; &amp;&#x3D; [10001100]_&#123;\text&#123;原&#125;&#125;
\end&#123;aligned&#125;</code></pre>

<h3 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h3><p>原码变成反码，若原码是正数（符号位为 0）则不需要做任何改变；若原码是负数（符号位为 1）则将除符号位以外的位全部取反。例如：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
(24)_&#123;10&#125; &amp;&#x3D; [00011000]_&#123;\text&#123;原&#125;&#125; &#x3D; [00011000]_&#123;\text&#123;反&#125;&#125; \\
(-17)_&#123;10&#125; &amp;&#x3D; [10010001]_&#123;\text&#123;原&#125;&#125; &#x3D; [11101110]_&#123;\text&#123;反&#125;&#125;
\end&#123;aligned&#125;</code></pre>

<h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>其实这才是计算机真正使用的二进制编码，前面的两种编码基本上只供学习和理解用。</p>
<p>若那个二进制为正数，原码、反码和补码相同；若为负数，那么它的补码是它的反码加一。（请注意，二进制加法逢二进一）例如：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
(27)_&#123;10&#125; &amp;&#x3D; [00011011]_&#123;\text&#123;原&#125;&#125; &#x3D; [00011011]_&#123;\text&#123;反&#125;&#125; &#x3D; [00011011]_&#123;\text&#123;补&#125;&#125; \\
(-53)_&#123;10&#125; &amp;&#x3D; [10110101]_&#123;\text&#123;原&#125;&#125; &#x3D; [11001010]_&#123;\text&#123;反&#125;&#125; &#x3D; [11001011]_&#123;\text&#123;补&#125;&#125;
\end&#123;aligned&#125;</code></pre>

<div class="note info"><p>P.S. 补码的快速转十进制方法</p>
<p>同普通二进制转十进制一样，可以弄一张差不多一样的表，不同的是，这张表的最左边的数（符号位）是负数。<br>还是以 8 位整型为例，这张表是这样的：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">-128 \ \ 64 \ \ 32 \ \ 16 \ \ 8 \ \ 4 \ \ 2 \ \ 1</code></pre>

<p>刚才的 -53 就可以以这种方法转换：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
&amp;[11001011]_&#123;\text&#123;补&#125;&#125; \\
&#x3D; &amp;-128 + 64 + 0 + 0 + 8 + 0 + 2 + 1 \\
&#x3D; &amp;(-53)_&#123;10&#125;
\end&#123;aligned&#125;</code></pre>
</div>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>命名空间</title>
    <url>//posts/namespace/</url>
    <content><![CDATA[<h2 id="C-命名空间的概念"><a href="#C-命名空间的概念" class="headerlink" title="C++命名空间的概念"></a>C++命名空间的概念</h2><p><strong>在同一个作用域中，不同的数据不能起同一个名字</strong>，但是C++命名空间概念的出现，提供了解决问题的方案。在不同的命名空间中，可以随意定义相同的名字。命名空间就是为了避免你包含的头文件中与你自己定义的任意类，数据，函数重名，造成令人迷惑的错误而产生的。</p>
<span id="more"></span>

<h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h2><p>我们可以自己定义一个命名空间，并且使用它。定义命名空间使用 <code>namespace</code> 关键字，使用命名空间使用 <code>namespace::subject</code> 使用命名空间中的函数，数据等。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> <span class="token comment">// 方便演示，使用了C头文件</span></span>

<span class="token keyword">namespace</span> mylib
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">namespace</span> libbb
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">30</span> <span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"HELLO WORLD!!!!\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> mylib<span class="token double-colon punctuation">::</span>a<span class="token punctuation">,</span> mylib<span class="token double-colon punctuation">::</span>b<span class="token punctuation">,</span> mylib<span class="token double-colon punctuation">::</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> libbb<span class="token double-colon punctuation">::</span>a<span class="token punctuation">,</span> libbb<span class="token double-colon punctuation">::</span>b<span class="token punctuation">,</span> libbb<span class="token double-colon punctuation">::</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    mylib<span class="token double-colon punctuation">::</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    libbb<span class="token double-colon punctuation">::</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>输出 <code>1 2 3\n 10 20 30\n Hello World!\n HELLO WORLD!!!!\n</code>。在命名空间 $mylib$ 和 $libbb$ 中，三个变量和一个函数的名字相同，但是所调用的命名空间不同，结果也不一样。</p>
<p>在C++中，大部分函数都在命名空间 $std$ 中，全称 $stdandard$ 。</p>
<h2 id="using使用命名空间"><a href="#using使用命名空间" class="headerlink" title="using使用命名空间"></a><code>using</code>使用命名空间</h2><p>在上段程序中，我们可以在包含头文件后加入几句：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> mylib <span class="token punctuation">;</span></code></pre>

<p>这样 $mylib$ 命名空间里的 $a ~ b ~ c ~ hello()$ 可以直接写为它原本的样子，不用加上 <code>mylib::</code> 。这很方便。但是这种方法也有他的局限性，比如我再加入一句：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> libbb<span class="token double-colon punctuation">::</span>a <span class="token punctuation">;</span></code></pre>

<p>这样 $libbb$ 命名空间里的 $a$ 使用时也不用加上 <code>libbb::</code> 了。但是再次出现了两个同样的 $a$ ，谁也分不清使用的到底是 $mylib$ 命名空间里的 $a$ 还是 $libbb$ 命名空间里的 $a$ ，因此会引发错误，这也是 <code>using</code> 的弊端。但是有时候只会用到一个命名空间里的东西时，就比如 $std$ ，就可以直接加上一句 <code>using namespace std ;</code> 这样子更方便，省的 <code>cin</code> 也要 <code>std::</code> ， <code>string</code> 也要 <code>std</code> 。</p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>//posts/recursion/</url>
    <content><![CDATA[<blockquote>
<p><strong>写递归的要点</strong><br>明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节， 否则就会陷入无穷的细节无法自拔，人脑能压几个栈啊。<br><span style="display:block;text-align:right;">—— <a target="_blank" rel="noopener" href="https://oi-wiki.org/basic/divide-and-conquer/#%E5%86%99%E9%80%92%E5%BD%92%E7%9A%84%E8%A6%81%E7%82%B9">OI-wiki</a></span></p>
</blockquote>
<p>递归，就是一个函数自身调用自身。递归起到类似与循环的效果。但是，与循环不同，递归可以<strong>分支</strong>。如果循环一定是一条直线，那么递归可能是树形结构。</p>
<h2 id="循环-递归"><a href="#循环-递归" class="headerlink" title="循环 -&gt; 递归"></a>循环 -&gt; 递归</h2><p>前面说了，循环和递归很像。那么，我们可以将 <code>for</code> 循环尝试转为递归。先来一个循环的示例：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"qwq, %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>首先，让我们来想一想，<code>for</code> 循环的括号中 3 个语句分别是干什么的呢？</p>
<ol>
<li><code>int i = 1;</code> 这是循环的<strong>初始化</strong>，定义了一个变量 $i$，将其赋值为 $1$。</li>
<li><code>i &lt;= n;</code> 这是循环<strong>每次进行下去的条件</strong>，当 $i&gt;n$ 时即退出循环。</li>
<li><code>i++</code> 这是循环<strong>每次结束后干的事</strong>，当执行完循环体时， $i$ 则加 $1$。</li>
</ol>
<p>这样回忆下来，可以发现，在 <code>for</code> 循环的括号中 3 个语句其实可以拆分出来。<span id="more"></span>如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// int i = 1;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// i &lt;= n;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"qwq, %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span> <span class="token punctuation">;</span> <span class="token comment">// i++</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>那么，直接将 <code>for( ; ; )</code> 改一下就好了吧？就像这样子：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">rcsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"qwq, %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>等等，只将 <code>for( ; ; )</code> 改为 <code>void rcsn()</code> 似乎不太对，少了什么语句，函数不会自动循环（递归）啊。还有，函数哪儿来的 <code>break;</code>？<br>是的，递归，就是要自己调用自己。函数的结束，是该使用 <code>return</code>。应该这样修改：</p>
<pre class="language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> int i = 1;
</span><span class="token prefix unchanged"> </span><span class="token line"> void rcsn()
</span><span class="token prefix unchanged"> </span><span class="token line"> &#123;
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     if(i > n) break;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     if(i > n) return;
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     printf("qwq, %d\n", n);
</span><span class="token prefix unchanged"> </span><span class="token line">     i++ ;
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     rcsn();
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span></code></pre>
<p>好了，这样就可以完整地运行了：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">rcsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"qwq, %d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token function">rcsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">rcsn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="递归的分步思想"><a href="#递归的分步思想" class="headerlink" title="递归的分步思想"></a>递归的分步思想</h2><p>前面说了，递归是可以分支的。那么，它其实比循环方便的多。就比如说，输入一个整数 $n$，按照字典序输出 $1 \sim n$ 数字不重复的排列。$1 \le n \le 9$。</p>
<p>总不可能用 <code>if</code> 一个一个判断，然后来一个“循环 $n$ 嵌套”吧。而递归是<strong>可分支</strong>的。可以创建一个递归函数，在递归中使用 <code>for</code> 循环确定递归次数。用一个数组记录是否重复。代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">bool</span> flag<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> n<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"    "</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        
        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
    <span class="token function">dg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>但是，递归并不是刚完成就返回，而是<strong>完成了整个分支</strong>才返回。以 $n&#x3D;3$ 为例，画个上面那个递归函数的图：<br><img src="https://mermaid.ink/svg/pako:eNqNVE1vgzAM_SsoJ1eiU81HPzjstON22W4Tl6ikLVKBKg2aprb_fSHVYhPUaRwQzzbvPduBi9h2lRKF2B27r-1BahO9vpdtZK-zsQjcfXaP1BUC4MyjBCAhlAKkhDKAjFAOkBNaAiwJrQBWhNYAa0IbgA0hXFj5BcODHeYHrSFkjtBaQuYJrSlkrtDaQueLdRzN589XvA5pX-diyRBLfO8ulg6x1E8gmj_ZoFam121YPc4E3I4n87MjvdxPMGTg1Y-5eca1N-3V6Sz9bqj_ld8QeVz7PYWqvHqcCbgdz8ZvmM17QYsOOXj9Y_Z_dOvUkUaETD-hg0STwZSO02TSozeCXKhxZ8voMDLlnI7khGf0xl8ak-5FLBqlG1lX9gO_DKWlMAfVqFIU9rFSO9kfTSnK9mZLZW-6j-92KwqjexWL_lRJo15qudey-Q2qqjadfrv_M9yvIxYn2X52nS3ZyeNZ3X4Adj46Eg"><br>（说明：圆圈中的数字是前进的顺序，从小到大；实线箭头和虚线箭头先走实线，走完以后再走虚线；箭头上的数字代表输出的值。</p>
<h2 id="递归的分治思想"><a href="#递归的分治思想" class="headerlink" title="递归的分治思想"></a>递归的分治思想</h2><p>分治，就是将一个问题分解为多个问题，然后再进行解决。<del>用咱们老师的</del>一个词概括，就是：</p>
<blockquote>
<p style="text-align:center;">分而治之</p>
</blockquote>
<p>举个例子：一件工程做 100 个零件，接活的找了 10 个人帮忙，那 10 个人又去找了 10 个人，每一组的 10 个人做完了向上头汇报，上头 10 个人又向接活的人汇报。<br>这其实就是一个递归分治的过程，这么一个例子体现了分治的基本步骤：</p>
<ol>
<li><strong>分解</strong>：“接活的找了 10 个人帮忙，那 10 个人又去找了 10 个人” -&gt; 将原问题分解成子问题</li>
<li><strong>解决</strong>：“每一组的 10 个人做完了” -&gt; 子问题独立求解</li>
<li><strong>合并</strong>：“（10 个人做完了）向上头汇报，上头 10 个人又向接活的人汇报。” -&gt; 将子问题合并为原问题</li>
</ol>
<p>当分解到指定条件时，就开始解决——通常是直接返回特定的数据。</p>
<p>题目举例：<a href="https://codeforces.com/problemset/problem/1829/D">CodeForces 1829D</a><br>这道题目要分解为两个任务，第一是总金币数的三分之一，第二是总金币数的三分之二。分解停止开始解决的的条件有三个，分别是 $x&#x3D;&#x3D;m$（符合条件），$x&lt;m$（不符合条件），$x % 3 \ne 0$（不符合条件）。<br>可以这样想：若符合条件返回 $1$，不符合返回 $0$，将返回结果相加。若最终结果大于零，输出 <code>YES</code>，否则输出 <code>NO</code>。<br>代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>   
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> m <span class="token operator">||</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    
    <span class="token keyword">int</span> ans1 <span class="token operator">=</span> <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans2 <span class="token operator">=</span> <span class="token function">dg</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// printf("ans1:%d, ans2:%d\n", ans1, ans2);</span>
    
    <span class="token keyword">return</span> ans1 <span class="token operator">+</span> ans2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">dg</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// printf("ans:%d\n", ans);</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"YES\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h2><p><del>题外话：感觉和递归有关的分类都一团乱了，感觉 <a href="/posts/dfs" style="border-bottom:none">DFS</a> 原本应该放在同一篇文章里的，剪枝和分治也应该独立说一篇。</del></p>
<p>简短的概述：<br>可以说，递归也就是<strong>暴力</strong>。暴力有两个代名词：枚举、递归。同枚举差不多，递归也有优化的方案，那就是<strong>剪枝</strong>。剪枝，顾名思义，就是把不需要的分支剪掉，把不可能的选项排除，在递归中，可以大大提升运行速度。  </p>
<p>题目举例：<br><a href="https://www.luogu.com.cn/problem/P1219">洛谷 P1219</a><br>这道题目是 <a href="/posts/dfs" style="border-bottom:none">DFS</a> 中比较经典的八皇后问题。在每行、每列、每个对角线上都只能有一个棋子（皇后）。那么，以下剪枝的几点可以确定：  </p>
<ul>
<li>当这一行放过以后，就开始放下一行，将这一行排除。</li>
<li>当这一列放过以后，就将这一列打上标记，不再将棋子放在这一列。</li>
<li>这一个对角线放过后，打上标记，不再将棋子放到对角线上</li>
</ul>
<p>但是，对角线的标记比较难弄，对角线似乎无法打标记。对角线的标记并不是无解，对角线的 (x,y) 是有规律的。引用原文图片来找规律。<br><strong>先看右斜的对角线有什么规律：</strong><br><img src="https://s2.loli.net/2023/12/16/K1HvhlyVkfStFWY.jpg" alt="blue-bhh"><br>可以看到，中间一条蓝色的线对应圈起来的坐标，(3,3) (5,5)；靠左一条蓝色的线对应划线的坐标，(4,2) (6,4)。不难看出，$3-3&#x3D;0&#x3D;5-5&#x3D;0; \hspace{5px} 4-2&#x3D;2&#x3D;6-4&#x3D;2$。可见，同一条右斜对角线上，x 坐标减 y 坐标的绝对值相等。但是相对的对角线上x 坐标减 y 坐标的绝对值也一样，这就比较麻烦。C++ 不能用负数，也不能两条对角线都是同一个标记。老师给了我们一个办法，将他们的差加上 20（别的数也行），问题就解决了。<br><strong>再看左斜的对角线有什么规律：</strong><br><img src="https://s2.loli.net/2023/12/16/IzMv2uQLaJOfNqw.jpg" alt="red-bhh"><br>同上，中间一条对应 (2,5) (5,2)，左上一条对应 (1,3) (3,1)。与右斜的对角线不同，它们不是差有规律而是和有规律。$2+5&#x3D;7&#x3D;5+2&#x3D;7; \hspace{5px} 1+3&#x3D;4&#x3D;3+1&#x3D;4$。那么，打标记时将 x+y 作为下标即可。</p>
<p>加上<a href="/posts/dfs" style="border-bottom:none">深搜</a>，代码就出来了：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">bool</span> flagy<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flagzx<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flagyx<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		sum<span class="token operator">++</span> <span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#123;</span>
				<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>flagy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flagzx<span class="token punctuation">[</span>x <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flagyx<span class="token punctuation">[</span>x <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			flagy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			flagzx<span class="token punctuation">[</span>x <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			flagyx<span class="token punctuation">[</span>x <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			s<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
			<span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			flagy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			flagzx<span class="token punctuation">[</span>x <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			flagyx<span class="token punctuation">[</span>x <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>前缀和</title>
    <url>//posts/qianzhuihe/</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>前缀和是一种<strong>优化算法</strong>，用于求区间和。若数据范围特别大，写 <code>for</code> 循环很可能会爆时间复杂度，就可以用上前缀和了。前缀和有<strong>一维前缀和</strong>和<strong>二维前缀和</strong>，我暂时还没有学二位前缀和，故在此不多赘述。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一维前缀和需要把一个数组比如数组 $a[1]$ 到 $a[n]$ （$n$ 为 $a$ 数组长度）储存到另一个数组中比如 数组 $b$。那么：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">b[i] \ (i \le n) &#x3D; \displaystyle\sum_&#123;j &#x3D; 1&#125;^&#123;i&#125; a[j]</code></pre>

<span id="more"></span>

<p>我们发现：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">b[1] &#x3D; a[1] \\
b[2] &#x3D; a[1] + a[2] \\
b[3] &#x3D; a[1] + a[2] + a[3] \\
... \\ 
b[i - 1] &#x3D; a[1] + a[2] + ... + a[i - 1] \\ 
b[i] &#x3D; a[1] + a[2] + ... + a[i - 1] + a[i] \\
~\\
\therefore b[i] &#x3D; b[i - 1] + a[i]</code></pre>

<p>这正好是一个<strong>递推</strong>的过程，$b[1] &#x3D; a[1], \ b[2] &#x3D; b[1] + a[2] \ …$</p>
<p>同时，若 $l$ 为左边界， $r$ 为又边界，$b[r] - b[l - 1] &#x3D; a[r]$ 到 $a[l]$ 的区间和。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="前缀和模板"><a href="#前缀和模板" class="headerlink" title="前缀和模板"></a>前缀和模板</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给出一个数字$n$表示有个数字，</p>
<p>给出$n$个整数$a_1$,$a_2$,…$a_n$;</p>
<p>给出一个数字$m$ 有$m$个询问：<br>每次询问给出两个整数$s$,$e$，请求出 $a_s + a_{s+1}…a_e$</p>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行一个整数$n$</p>
<p>第二行$n$个整数$a_1$,$a_2$,…$a_n$;</p>
<p>第三行一个整数$m$</p>
<p>随后m行每行两个整数 s，e，($e &gt;&#x3D; s$)</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>m个整数，每一个换一行</p>
<h4 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h4><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h5><pre class="language-none"><code class="language-none">5
1 2 3 4 5
3
1 2
2 3
1 5</code></pre>

<h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h5><pre class="language-none"><code class="language-none">3
5
15</code></pre>

<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>$n &lt;&#x3D; 10^5$,$a_i &lt;&#x3D; 10^4$。</p>
<hr>

<p>这道题目应该这样写：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">int</span> s<span class="token punctuation">,</span> e <span class="token punctuation">;</span>
		<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">)</span> <span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>e<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	
	<span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>前缀和，差分</tag>
      </tags>
  </entry>
  <entry>
    <title>区间最大/小值</title>
    <url>//posts/rmq/</url>
    <content><![CDATA[<p>求区间最大&#x2F;小值，即<strong>Range maximum&#x2F;minimum query</strong>(RMQ)。可以通过几种方法实现。<br>最简单实现的方法就是直接遍历。假设有 q 次查询，平均每次查询的长度为 n，则时间复杂度为 O(nq)。简单遍历自然是不行的。</p>
<p>通常用几种更快的方法实现，缺点各不同，如下。（单调栈，ST 表）</p>
<span id="more"></span>

<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>用栈实现。但是栈中的元素是单调递增或递减的。<br>为了实现，当要压入的元素使栈不再单调递增或递减时，需要将栈顶的元素尽量少地弹出，再将元素压入。<br>如单调递增栈从栈顶到栈底的元素依次为 {1, 3, 6}，压入 2，需要先将 1 弹出（为 {2, 3, 6}）。再压入 5，需要将 2, 3 都弹出，最终栈为 {5, 6}。</p>
<p>与 RMQ 的关系：对于栈顶到栈底从小到大的单调递增栈，可以求出第 i 个元素之后第一个大于 i 的元素。</p>
<h3 id="实现-例题"><a href="#实现-例题" class="headerlink" title="实现 &amp; 例题"></a>实现 &amp; 例题</h3><p>对于普通单调栈，实现如下（直接用 STL 给的 stack 了）：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> t<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> t<span class="token punctuation">)</span> <span class="token comment">// 递增</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 对于 stk.top() 来说，t 就是长度为 n 的数列中之后第一个大于它的元素</span>
        stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>例题模板：(洛谷 P5788 单调栈)[<a href="https://www.luogu.com.cn/problem/P5788]">https://www.luogu.com.cn/problem/P5788]</a><br>如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">,</span> id<span class="token punctuation">;</span> <span class="token comment">// val: 值，id: 编号</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
stack<span class="token operator">&lt;</span>node<span class="token operator">></span> stk<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">3000003</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        node t<span class="token punctuation">;</span>
        t<span class="token punctuation">.</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 栈空</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">>=</span> t<span class="token punctuation">.</span>val<span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// </span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    ans<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="ST-表"><a href="#ST-表" class="headerlink" title="ST 表"></a>ST 表</h2><p>基于倍增。即以 2 的 x 次方增加求解，可以直接给出答案。但是 ST 表不支持修改操作，即只能求静态区间的最值。<br>这其实就是区间动态规划。</p>
<p><a href="https://www.luogu.com.cn/problem/P3865">洛谷 P3865 ST表</a></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1 &lt;&lt; j 就是 2 的 j 次方</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> TMP <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> st<span class="token punctuation">[</span>TMP<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// st[i][j] 从 i 开始到 (2^j)-1 的区间最大值</span>
<span class="token comment">//          ^ 这里只有 20 是因为 log_2^100000 只约为 17，否则开 [TMP][TMP] 在测评机上会 RE（尽管实际没有用那么多）</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 处理</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tm <span class="token operator">=</span> <span class="token function">log2</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>tm<span class="token punctuation">]</span><span class="token punctuation">,</span> st<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> tm<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tm<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 两个 max 覆盖了区间</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>数论：质数筛法</title>
    <url>//posts/shaifa/</url>
    <content><![CDATA[<p><strong>筛法</strong>是快速找出质数的一种方法。平常没有使用任何筛法的的找质数的时间复杂度通常为 $O(\sqrt n)$，比较慢，但是筛法更快一些。我们学的筛法是埃氏筛和欧拉筛(线性筛)。<br>平常的找质数方法是判断一个数是否能被 1 和它本生以外的数整除，但是筛法的思想不一样。筛法可以说是通常方法的逆向思维，挨个儿寻找当前数的倍数，打上标记，再继续寻找，最后没有被打上标记的就是质数。这种思想的时间复杂度快很多。</p>
<span id="more"></span>

<h2 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h2><p><strong>埃氏筛</strong>，全称其实是<strong>埃拉托斯特尼筛法</strong> <strong>(Eratosthenes)</strong>。它的时间复杂度为 $O(n \log_2 \log_2 n)$，其实也就是刚才说的方法。这里放一个演示：</p>
<p style="overflow-x:auto; white-space:nowrap;"><span style="font-family:Consolas, Menlo, Monaco, 'Andale Mono', 'Ubuntu Mono', 'Courier New', monospace;">
    2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &ensp;&ensp;&ensp; <span style="font-family: lxgw;">这是初始的表</span>
    <br>
    <span style="font-weight:bold; color:#000000;">2</span> 3 <del style="color:#d9d9d9;">4</del> 5 <del style="color:#d9d9d9;">6</del> 7 <del style="color:#d9d9d9;">8</del> 9 <del style="color:#d9d9d9;">10</del> 11 <del style="color:#d9d9d9;">12</del> 13 <del style="color:#d9d9d9;">14</del> 15 <del style="color:#d9d9d9;">16</del> 17 <del style="color:#d9d9d9;">18</del> 19 <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: lxgw;">2 筛掉了 4 6 8 10 12 14 16 18 20，2 是质数</span>
    <br>
    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> 5 <del style="color:#d9d9d9;">6</del> 7 <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> 11 <del style="color:#d9d9d9;">12</del> 13 <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> 17 <del style="color:#d9d9d9;">18</del> 19 <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: lxgw;">3 筛掉了 6 9 12 15 18，3 是质数</span>
    <br>
    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> <span style="font-weight:bold; color:#000000;">5</span> <del style="color:#d9d9d9;">6</del> <span style="font-weight:bold; color:#000000;">7</span> <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> <span style="font-weight:bold; color:#000000;">11</span> <del style="color:#d9d9d9;">12</del> <span style="font-weight:bold; color:#000000;">13</span> <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> <span style="font-weight:bold; color:#000000;">17</span> <del style="color:#d9d9d9;">18</del> <span style="font-weight:bold; color:#000000;">19</span> <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: lxgw;">5 筛掉了 10 15 20，其实 5 已经大于 根号 20，剩下的数都是质数，可以退出了，但在这儿继续演示下去</span>
    <br>
    <span style="color:#e74c3c">-------------------- break; --------------------</span>  &ensp;&ensp;&ensp; <span style="font-family:lxgw; color:#e74c3c">实际循环已经在这儿之前就退出了，但这里继续演示下去</span>
    <br>
    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> <span style="font-weight:bold; color:#000000;">5</span> <del style="color:#d9d9d9;">6</del> <span style="font-weight:bold; color:#000000;">7</span> <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> <span style="font-weight:bold; color:#000000;">11</span> <del style="color:#d9d9d9;">12</del> <span style="font-weight:bold; color:#000000;">13</span> <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> <span style="font-weight:bold; color:#000000;">17</span> <del style="color:#d9d9d9;">18</del> <span style="font-weight:bold; color:#000000;">19</span> <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: lxgw;">7 筛掉了 14，7 是质数</span>
    <br>
    <span style="font-weight:bold; color:#000000;">2</span> <span style="font-weight:bold; color:#000000;">3</span> <del style="color:#d9d9d9;">4</del> <span style="font-weight:bold; color:#000000;">5</span> <del style="color:#d9d9d9;">6</del> <span style="font-weight:bold; color:#000000;">7</span> <del style="color:#d9d9d9;">8</del> <del style="color:#d9d9d9;">9</del> <del style="color:#d9d9d9;">10</del> <span style="font-weight:bold; color:#000000;">11</span> <del style="color:#d9d9d9;">12</del> <span style="font-weight:bold; color:#000000;">13</span> <del style="color:#d9d9d9;">14</del> <del style="color:#d9d9d9;">15</del> <del style="color:#d9d9d9;">16</del> <span style="font-weight:bold; color:#000000;">17</span> <del style="color:#d9d9d9;">18</del> <span style="font-weight:bold; color:#000000;">19</span> <del style="color:#d9d9d9;">20</del>  &ensp;&ensp;&ensp; <span style="font-family: lxgw;">11 13 17 19 的倍数都不在数列中，它们都是倍数</span>
</span></p>

<p>最终，筛选出了 <code>2 3 5 7 11 13 17 19</code> 这 8 个质数。  </p>
<p>埃氏筛的代码也比较简单：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> TEMP <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 需要筛的数字的数量</span>
<span class="token keyword">int</span> flag<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 记录是否是质数</span>
<span class="token keyword">void</span> <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 和普通的找质数一样</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 找质数的倍数</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span> <span class="token comment">// 从 i * 2 开始是因为不能标记质数，+= i 就是倍数</span>
            <span class="token punctuation">&#123;</span>
                flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">is_prime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"./ans.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 测试文件用，可以注释掉。</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 未被标记过，是质数</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 测试文件用，可以注释掉。</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>埃氏筛很快，上面数据 1000000 的代码一下就好了。<br>更具体的，可以去看一下 <a href="https://oi-wiki.org/math/number-theory/sieve/">OI Wiki</a>。</p>
<h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><p>线性筛也叫<strong>欧拉筛</strong>，它的出现就是为了找到比埃氏筛还要快的筛法，是由欧拉发现的。在埃氏筛中，一个数可能会被筛很多次，上面的演示也表现出来了。而线性筛每个数只会筛一次，是 $O(n)$ 的时间复杂度。只不过一般来说埃氏筛也够用，一些卡掉埃氏筛的毒瘤数据除外，例如 <a href="https://www.luogu.com.cn/problem/P3383">洛谷 P3383</a>。</p>
<p>就按照 洛谷 P3383 来，代码是这样的：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> TEMP <span class="token operator">=</span> <span class="token number">1e8</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pri<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">is_prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            pri<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">*</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> n<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            vis<span class="token punctuation">[</span>i <span class="token operator">*</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> ns<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
<span class="token keyword">int</span> ans<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ns<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">is_prime</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// printf("done.\n");</span>
    
    <span class="token comment">// int cnt = 0;</span>
    <span class="token comment">// for(int i = 2; i &lt;= ns; i++)</span>
    <span class="token comment">// &#123;</span>
    <span class="token comment">//     if(vis[i] == 0)</span>
    <span class="token comment">//     &#123;</span>
    <span class="token comment">//         printf("%d\n", i);</span>
    <span class="token comment">//     &#125;</span>
    <span class="token comment">// &#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> pri<span class="token punctuation">[</span>temp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>一些随笔记录和想法</title>
    <url>//posts/seventh-lianbi/</url>
    <content><![CDATA[<style>
    .hide-blur {
        filter: blur(5px);
        transition: filter .1s
    }
    .hide-blur:hover {
        filter: none;
    }
    .lianbi-block p:not(.pinyu) {
        text-indent: 2ic;
        line-height: 1.5;
        margin-bottom: .2em;
    }
    .lianbi-block .lianbi-title {
        font-weight: bold;
        text-align: center;
        display: block;
    }
    .lianbi-block .gdg {
        text-decoration: #d60000 wavy underline;
        text-decoration-thickness: 1px;
    }
    .lianbi-block .pinyu {
        color: #d60000;
        font-family: fangsong;
        font-weight: 900;
        line-height: 1.5;
        text-align: right;
        margin: 0 0 1em;
        display: block;
    }
    .lianbi-block#lianbi3 del {
        background-color: #999;
    }
</style>

<p><strong>写在前面的废话：</strong><br>又是一篇分类于“琐碎”的文章。<br>加上这篇文章，这个分类下<del>才</del>有三篇文章。想来这个博客在运行 <code>hexo init</code> 之初，我就没想过写生活向的文章。如今“琐碎”下，一篇是画，两篇是作文收集，勉强算是透露了点生活向。<br>想想自己喜欢的，是 HTML, CSS, JavaScript 给我带来的<strong>样式美化</strong>、<strong>多样性</strong>和<strong>自主性</strong>。不然我怎么不记到 .txt 里呢？也不知初衷是什么，唉，这样弄又有些喧宾夺主了。多年后看到，也就微微一笑，笑自己写出的东西<span class="hide-blur" balloon-shown="up" aria-label="看它有什么用呢">古怪？</span>吧。</p>
<span id="more"></span>

<p>下面，红字和红色波浪线都是老师做的标记。红字是批语。红线大概是老师认为有想法的句子吧。<br><strong>按时间排序的文章：</strong></p>
<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><blockquote class="lianbi-block">
    <span class="lianbi-title" aria-label="这篇文章有些假，自己不太喜欢" balloon-shown="up">运动会跳高随记</span>
    <p>我在操场上观看男子跳高。哪怕只讲跳高场地的气氛也是十分紧张激烈得了。运动员刚跳完，学生裁判和助理就飞快地冲上去把杆子重新架好，再用手推或脚踢将软垫重新压紧实，另一位运动员又跑步向前，一跃而起，脸上带着坚定和紧张。节奏之快，把观众观赛的热情都点燃了。</p>
    <p>这时，一位跳高运动员吸引了我的注意。根据他服装上的号码牌，我得知他是四班的一名运动员。他起跳了，但没有跳过，带着杆子跌向软垫。我感觉，他脸上写满不甘心与不服输，他和教师裁判要求再跳一遍。于是，我看到他咬紧牙关，再次冲向调高杆，似乎把腿尽可能地抬高，落向软垫——但他又失败了，脚带动杆子滑落下来，杆子落到地上发出哗啦一声。这声音对他来说可能是震天动地的，意味着失败的响声。我看到他再一次向裁判要求重新跳。我从我们班作为跳高裁判助理的施同学口中得知，如果失败，这次起跳是最后一次了。<span class="gdg">忽地，我联想到了一个人的坚定和决绝，这是不太容易做到的。这一次，他像鸟儿一样轻捷，越过杆子，似乎还有些紧张，但稳稳地落到软垫上，他成功了。</span></p>
    <p style="margin:0">我知道，在把杆子升高增加难度后，他最后一次失败了，退出了比追逐战还要激烈的跳高比赛。但能这样重复要求重新跳一次，连续跳三次的精神已经很好了，这是运动员的精神，因而留给我很深的印象。我坐在看台上喝奶茶时想到，尽管他是四班的，而我是三班的人。</p>
    <p class="pinyu" style="margin-right:12ch;">运动精神感染每一个人.</p>
</blockquote>

<h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><p>这篇文章是开完运动会老师叫写的<del>（废话）</del>。个人认为这届初中运动会不如小学的时候有那种热情、激动、高兴等等开运动会的感觉了。一方面因为<strong aria-label="流感横行" balloon-shown="up" style="border-bottom:1px dotted">延期</strong>和<strong aria-label="三天缩水成两个下午" balloon-shown="up" style="border-bottom:1px dotted">运动会时间的缩短</strong>，更重要的另一方面<strong>运动会项目减少</strong>、就在<strong>一个操场</strong>看、<strong>不写通讯稿</strong>，对于我来说<span aria-label="从第一次运动会到现在，我就没参加过比赛" balloon-shown="up" style="border-bottom:1px dotted">乐趣</span>都没了。这篇作文 30% 都不算真实感受。<br>至于真实事件，主要是因为有同班同学在跳高场地那儿当助理（也就是扶扶杆子）便跑到那儿和同学聊聊天。男子跳高我们班没人参加，去那儿只为<strong>聊天</strong>（还顺便当好人帮同学扔橘子皮？）。四班体委跳高，看了看，感觉那种跳了三次的事件适合写到作文里，回家一想到就写了。</p>
<p>至于老师的评语嘛，<span aria-label="包括句尾的一点" balloon-shown="up" style="border-bottom:1px dotted">原话是这样写的</span>，也不知道老师写这个是不是想到了什么。大概没什么别的深意。</p>
<p><strong>题外话：</strong>那天有奶茶和泡芙供应，只喝了一瓶不知名品牌普通奶茶，味道还好。其他同学吃喝也蛮开心的。</p>
<h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><h3 id="记录-1"><a href="#记录-1" class="headerlink" title="记录"></a>记录</h3><blockquote class="lianbi-block">
    <span class="lianbi-title" aria-label="不好说自己写这篇文章时的精神状态" balloon-shown="up">周五那些琐碎事</span>
    <p>此刻，我正坐在微格教室里，写这篇随记。自修的时间大家都很安静，只有教室里不知什么设备发出低沉且有规律的“咚咚”声，正是回忆和写作的耗时间，想想在一个半小时之前发生的琐事，我想。</p>
    <p>下午，五点，同学们乱哄哄地换完了座位，准备排队出校。而包括我的四个人却还要留在学校里，这真的是一种很奇特的感觉，我在独自去往食堂时想到。几个同学吃完了饭回到教室，有打扫一会儿卫生才去微格教室准备上课。来到微格教室，看到教室的布局，让我想到了母校的微格教室，给人一种很宁静的感觉。原本着急上完课，着急回家的心绪也平静下来。在现在想，<span class="gdg">大概是这种平静才是名词里“素养”与“提升”的感觉，竟有一种置身世外的超然感。</span></p>
    <p>这次科学老师上课，居然没有数学课那样急切，没有争分夺秒的感觉，甚至没有往常的节奏快。不知是我心里的主观认为还是微格教室的影响。还是给人一种宁静感，甚至悠闲，但又不是。现在想，那种感觉确实是<span class="gdg">安心学习的基础啊，不急功近利，而是宁静平和，甚至有限，轻松，太急躁反而容易犯错呢。我想。</span></p>
    <p>平时的课一般上一个小时，数学课通常还要拖几分钟，因为任务太多了。但这次不一样，宁静的教室，没有是么非常紧迫的任务。科学老师只上了半个小时的课，刚好在第一节晚自习一半的铃声响起时讲完了作业，剩下的时间老师让我们自修。一切都是平静的。于是，我开始写随记，也就是开头呈现的景象，一切都给人以平静，安静的感觉。</p>
    <p>想着想着，自修已经到了末尾，班里的同学开始吵闹起来，打破了原有的宁静，以及原有的那份奇特的心境。我意识到，我还要进行枯燥、有条不紊、节奏快的生活。生活的节奏很快，这种宁静是很难再找到了。我想找一句话来总结我的所思所想所写，但周围不再宁静，脑海中全是纷乱的思绪，如同一大片散乱的拼图，十分烦躁。突然几句话拨开纷乱的拼图“夫学须静也，才须学也。”“淫慢则不能励精，险躁则不能治性”。是的，无论干什么，都需要平静，需要宁静专一。宁静，不仅让人放松，还让人奋斗。</p>
    <p>正准备盖上笔合上本子，却又有一个想法冒出来，我翻到前面看了看开头的自己，抿嘴笑了，添上一句话：</p>
    <p style="margin:0">从本文开头到结尾，细微的自己变化和涂改状况能看出，这间教室和我在写这篇文章时的宁静与否吧？</p>
    <span class="pinyu" style="margin-right:15ch">“静能生慧”，一直觉得你是个能<br>“沉得住气”的孩子，很棒哦！</span>
</blockquote>

<h3 id="想法-1"><a href="#想法-1" class="headerlink" title="想法"></a>想法</h3><p>因为那天开家长会，照理说是所有学生都不用上<span aria-label="“双减”政策，你值得拥有！" balloon-shown="up" style="border-bottom:1px dotted">晚自习</span>五点就回家的。但是我非常遗憾地参加了<del>光明<strong>优倍</strong>鲜牛奶班</del><strong aria-label="某重点中学搞出的“提前批”政策，导致所谓培优班出现" balloon-shown="up" style="border-bottom:1px dotted" class="hide-blur">培优班</strong>，得继续留在学校，上一个小时的<span class="hide-blur">培优班</span>，再写作业写到八点晚自习放学。就感觉很离谱，吐槽一下。<br>实际上，我们四个<span class="hide-blur">培优班</span>的同学吃完了饭确实<em>受老师委托</em>回到教室打扫卫生，才去的微格教室。平常的课都在二班旁边的普通教室上，这次去微格教室<span aria-label="家长会先在报告厅开，后来到各班教室开" balloon-shown="up" style="border-bottom:1px dotted">大概是为了不打扰家长会</span>吧。<br>那天语文课和科学课换了，上的是科学课。老师说就讲三十分钟作业，剩下时间自修，就那样做了。我大概写了五十分钟的其他作业，剩下的时间都拿来写上面这篇作文了。当时想不到写什么好，<span aria-label="每次我都这样做" balloon-shown="up" style="border-bottom:1px dotted">干脆直接写当时场景了</span>。其实也是想在作文里“诉说不易”吧。</p>
<p>至于老师的评价。。。很难确定老师理解到的是我想写什么，甚至连我自己也不清楚了。也不知道老师为什么评价的字写得比上一篇大。</p>
<p>附：真不想写“<span class="hide-blur">培优班</span>”三个字。</p>
<h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><div class="note danger"><p>地名替换</p>
<p>原作文中有真实地名，为了避免泄露信息，使用划掉的“占位”进行了替换。<br>显示为这样：<span style="text-decoration:line-through;background-color:#999;">占位</span></p>
</div>

<h3 id="记录-2"><a href="#记录-2" class="headerlink" title="记录"></a>记录</h3><blockquote class="lianbi-block" id="lianbi3">
    <span class="lianbi-title"><del>占位</del>旅途记</span>
    <p>在<del>占位</del>，说起<del>占位岛</del>就让人想起连接<del>占位岛</del>与大陆的那座桥和“海洋”这个字眼来。又是两天后，坐在教室里，细细地回想两到四天前的事。</p>
    <p>海洋和桥，自然是在路上看到的。从<del>占位</del>海边到<del>占位岛</del>上的路就值得一提。经过<del>（占位占线）</del>和<del>占位占路</del>，我看到了海、海港和船只。基本只在城区待着的我没见过这般略显壮观的景象，立刻被吸引了：<span class="gdg">一排排轮船靠在岸边，船身下的水些许浑黄，仿佛同船一起睡着。海港在休息，但不减其威严气势，自然很引人注目。</span>和庞大的轮船与广阔无垠的海比起来，“小”客车自然没趣。突然间想到“海洋文化”正是这种意蕴。客车走上山路，越走越高。刹那间，眼前凭空出现一座仿佛横跨海面的桥。我的目光立刻又被桥捉了去。桥的支点是在两边的山上的，桥下面没有柱子支撑，所以看起来仿佛悬浮在海面上，桥也很高。车接近了桥，越发显得小了。还没上桥，就已觉得桥下海之广袤。走在桥上，仿佛神话中天神自由在空中行走，越过海洋。</p>
    <p>过了桥，便上了岛。又走了一会儿，到了活动基地。基地中发生的事反而没让我想到大海的悠远，似乎没什么特别让人印象深刻的事。海边桥上车中，自我上的一节课更让我印象深刻得多。</p>
    <p style="margin:0">海的<span class="gdg">广阔，如广阔得胸怀，容纳着船只和桥。船只和桥也容纳着其他事物。它们相互包容，相对广阔包容相对渺小的。这是海洋的精神：</span>包容。同样地，我们也得学习传承海洋文化精神。想来，这也算是<del>占位</del>之旅给我带来的收获——包容和责任。</p>
    <span class="pinyu" style="margin-right:3ch">多去外面走走，会有记很多不一样<br>的启示.</span>
</blockquote>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>作文</tag>
      </tags>
  </entry>
  <entry>
    <title>时间复杂度和空间复杂度</title>
    <url>//posts/shijianfuzaduhekongjianfuzadu/</url>
    <content><![CDATA[<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>时间复杂度，就是<strong>电脑运行一段程序所需要的时间</strong>。</p>
<p>另外，电脑每秒可以运行<code>1e8</code>次。($x$ e $y$代表$x$乘10的$y$次方，即<code>100000000</code>次)</p>
<p>时间复杂度记作 $O(n)$。</p>
<hr>

<p>普通的时间复杂度<strong>(常数时间)</strong>记作 $O(1)$，为一段最简单的程序的时间复杂度。</p>
<p>如以下程序的时间复杂度为 $O(1)$：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>没错，什么都没有干，只创建了一个变量。</p>
<span id="more"></span>

<hr>

<p>其他时间复杂度(我所知道的很少，只会 $O(n^n)$)，有几个循环时间复杂度就为 $n$。</p>
<p>如以下程序的时间复杂度为 $O(i^2)$</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<hr>

<p><del>老师的</del>练习:</p>
<p><a href="https://www.luogu.com.cn/problem/U262459">U262459 数位和3 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<p>注意注意:</p>
<p>这道题的数据范围很大，($0\le x \le10^6$)，双重循环直接炸。($O(1000000^2)$)</p>
<p>所以需要:</p>
<p><a href="https://www.luogu.com.cn/record/96951779">记录详情 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>和时间复杂度差不多，只不过这个是和<strong>内存</strong>有关的。</p>
<p><del>不多讲了。</del>就比如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这里，我们定义了一个类型为<code>int</code>的数组，<code>int</code>占4字节，产生的空间就为$4 \times 1000$字节。</p>
<p>这就是<strong>空间复杂度</strong>。</p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>//posts/sort/</url>
    <content><![CDATA[<h2 id="一些说在前面的要点"><a href="#一些说在前面的要点" class="headerlink" title="一些说在前面的要点"></a>一些说在前面的要点</h2><ul>
<li><strong>稳定性</strong><ul>
<li>在我们以下学过的排序算法中，只有<strong>选择排序</strong>和<strong>快速排序</strong>不是稳定的。</li>
<li>稳定性，就是有两个相同的数字，在排序后两个数字的相对位置不变。（前面的在前面，后面的在后面）</li>
</ul>
</li>
<li><strong>逆序对</strong><ul>
<li>前面的一个数字大于后面一个数字，这就叫做逆序对。</li>
<li>例如 $5\ 1\ 2\ 3\ 4$ 中，有 $4$ 对逆序对。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>选择排序</strong>，顾名思义，就是选出所有元素中最小的元素，然后再放到前面。这个排序非常好理解，但是，时间复杂度为 $O(n^2)$ ，数据一大就要炸了。（ $n$ 为数组长度）</p>
<p>我们可以使用一个变量来记录其中一个最小数的下标，然后再进行第一个数与最小的数的交换。<br>由于不断地将最小的数往前放，最终完成排序。但由于第 $i$ 次遍历之后，第 $i$ 个元素就是最小的元素，因此由 $i + 1$ 个元素开始判断。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>例如有这样一个数组：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">8 \ 5 \ 7 \ 9 \ 2 \ 6</code></pre>

<p>遍历后得知 $2$ 是最小的，与第一个元素 $8$ 进行交换。</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">&#123;\color&#123;red&#125;2&#125; \ 5 \ 7 \ 9 \ &#123;\color&#123;red&#125;8&#125; \ 6</code></pre>

<p>以此类推：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">&#123;\color&#123;green&#125;2&#125; \ &#123;\color&#123;red&#125;5&#125; \ 7 \ 9 \ 8 \ 6 \\
&#123;\color&#123;green&#125;2&#125; \ &#123;\color&#123;green&#125;5&#125; \ &#123;\color&#123;red&#125;6&#125; \ 9 \ 8 \ &#123;\color&#123;red&#125;7&#125; \\
&#123;\color&#123;green&#125;2&#125; \ &#123;\color&#123;green&#125;5&#125; \ &#123;\color&#123;green&#125;6&#125; \ &#123;\color&#123;red&#125;7&#125; \ 8 \ &#123;\color&#123;red&#125;9&#125; \\
&#123;\color&#123;green&#125;2&#125; \ &#123;\color&#123;green&#125;5&#125; \ &#123;\color&#123;green&#125;6&#125; \ &#123;\color&#123;green&#125;7&#125; \ &#123;\color&#123;green&#125;8&#125; \ 9 \\
&#123;\color&#123;green&#125;2&#125; \ &#123;\color&#123;green&#125;5&#125; \ &#123;\color&#123;green&#125;6&#125; \ &#123;\color&#123;green&#125;7&#125; \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \\</code></pre>

<h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">3002</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> th <span class="token operator">=</span> i <span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>th<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                th <span class="token operator">=</span> j <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>th<span class="token punctuation">]</span> <span class="token punctuation">;</span>
        a<span class="token punctuation">[</span>th<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// printf("\n"); </span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> 
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="演示网址"><a href="#演示网址" class="headerlink" title="演示网址"></a>演示网址</h3><p>演示网址：<a href="https://visualgo.net/zh/sorting?slide=8"><code>https://visualgo.net/zh/sorting?slide=8</code></a></p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><strong>冒泡排序</strong>，将前面一个元素和后面一个元素做对比，若前面的元素大于后面的元素即进行交换。时间复杂度也为 $O(n^2)$。</p>
<p>由于不断地将前一个元素大于后一个元素的一组交换，假设数组中有 $n$ 个元素，第 $i$ 次遍历后，第 $n$ 个元素就是最大的数，因此下一次遍历由 $i$ 至 $n - i$ 。</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>还是上面的那个例子，利用冒泡排序：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">8 \ 5 \ 7 \ 9 \ 2 \ 6 \ \\ \\
&#123;\color&#123;red&#125;5&#125; \ &#123;\color&#123;red&#125;8&#125; \ 7 \ 9 \ 2 \ 6 \ \\
5 \ &#123;\color&#123;red&#125;7&#125; \ &#123;\color&#123;red&#125;8&#125; \ 9 \ 2 \ 6 \ \\
5 \ 7 \ &#123;\color&#123;red&#125;8&#125; \ &#123;\color&#123;red&#125;9&#125; \ 2 \ 6 \ \\
5 \ 7 \ 8 \ &#123;\color&#123;red&#125;2&#125; \ &#123;\color&#123;red&#125;9&#125; \ 6 \ \\
5 \ 7 \ 8 \ 2 \ &#123;\color&#123;red&#125;6&#125; \ &#123;\color&#123;red&#125;9&#125; \ \\
&#123;\color&#123;red&#125;5&#125; \ &#123;\color&#123;red&#125;7&#125; \ 8 \ 2 \ 6 \ &#123;\color&#123;green&#125;9&#125; \ \\
5 \ &#123;\color&#123;red&#125;7&#125; \ &#123;\color&#123;red&#125;8&#125; \ 2 \ 6 \ &#123;\color&#123;green&#125;9&#125; \ \\
5 \ 7 \ &#123;\color&#123;red&#125;2&#125; \ &#123;\color&#123;red&#125;8&#125; \ 6 \ &#123;\color&#123;green&#125;9&#125; \ \\
5 \ 7 \ 2 \ &#123;\color&#123;red&#125;6&#125; \ &#123;\color&#123;red&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\
&#123;\color&#123;red&#125;5&#125; \ &#123;\color&#123;red&#125;7&#125; \ 2 \ 6 \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\
5 \ &#123;\color&#123;red&#125;2&#125; \ &#123;\color&#123;red&#125;7&#125; \ 6 \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\
5 \ 2 \ &#123;\color&#123;red&#125;6&#125; \ &#123;\color&#123;red&#125;7&#125; \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\
&#123;\color&#123;red&#125;2&#125; \ &#123;\color&#123;red&#125;5&#125; \ 6 \ &#123;\color&#123;green&#125;7&#125; \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\
2 \ &#123;\color&#123;red&#125;5&#125; \ &#123;\color&#123;red&#125;6&#125; \ &#123;\color&#123;green&#125;7&#125; \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\
&#123;\color&#123;red&#125;2&#125; \ &#123;\color&#123;red&#125;5&#125; \ &#123;\color&#123;green&#125;6&#125; \ &#123;\color&#123;green&#125;7&#125; \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\
&#123;\color&#123;green&#125;2&#125; \ &#123;\color&#123;green&#125;5&#125; \ &#123;\color&#123;green&#125;6&#125; \ &#123;\color&#123;green&#125;7&#125; \ &#123;\color&#123;green&#125;8&#125; \ &#123;\color&#123;green&#125;9&#125; \ \\</code></pre>

<h3 id="示例程序-1"><a href="#示例程序-1" class="headerlink" title="示例程序"></a>示例程序</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">3002</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> 
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> j<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
                a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    
    <span class="token comment">// printf("\n"); </span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> 
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="演示网址-1"><a href="#演示网址-1" class="headerlink" title="演示网址"></a>演示网址</h3><p>演示网址：<a href="https://visualgo.net/zh/sorting?slide=7"><code>https://visualgo.net/zh/sorting?slide=7</code></a></p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><p><strong>插入排序</strong>，是在冒泡排序的基础上做的改进。它将整个数列分为两个部分：已排序的与未排序的。</p>
<p>由于一个数本身就没有任何顺序，所以我们可以假设元素 $a[1]$ （假设 $1$ 为数组第一个元素）就是一个已经排列好的数列。<br>随后，将 $a[2]$ 插入进已排序好的数列中。若 $a[2] &gt; a[1]$ 则不交换，否则则交换。这就是一个循环的过程。插入进已排列好的数列中时，这个比较就是冒泡排序的过程：</p>
<blockquote>
<p>将前面一个元素和后面一个元素做对比，若前面的元素大于后面的元素即进行交换。</p>
</blockquote>
<h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>依然是前面那个样例，在这里，我们假设有一个空间是已排序空序列，另一个是未排序序列。</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\boxed&#123;
\begin&#123;aligned&#125;
&amp;\text&#123;说明:&#125; \\
&amp;? \ \text&#123;代表未排序序列&#125; \\
&amp;! \ \text&#123;代表已排序序列&#125; \\
\end&#123;aligned&#125;
&#125;</code></pre>


<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">\begin&#123;aligned&#125;
? \ &amp;8 \ 5 \ 7 \ 9 \ 2 \ 6 \ \\
! \ &amp;[Empty] \\ \\
? \ &amp;5 \ 7 \ 9 \ 2 \ 6 \ \\
! \ &amp;&#123;\color&#123;yellow&#125;8&#125; \\ \\
? \ &amp;7 \ 9 \ 2 \ 6 \ \\
! \ &amp;&#123;\color&#123;yellow&#125;8&#125; \ &#123;\color&#123;yellow&#125;5&#125; \\ \\
? \ &amp;7 \ 9 \ 2 \ 6 \ \\
! \ &amp;&#123;\color&#123;yellow&#125;5&#125; \ &#123;\color&#123;yellow&#125;8&#125; \\ \\
? \ &amp;9 \ 2 \ 6 \ \\
! \ &amp;&#123;\color&#123;yellow&#125;5&#125; \ &#123;\color&#123;yellow&#125;8&#125; \ &#123;\color&#123;yellow&#125;7&#125; \\ \\
? \ &amp;9 \ 2 \ 6 \ \\
! \ &amp;&#123;\color&#123;yellow&#125;5&#125; \ &#123;\color&#123;yellow&#125;7&#125; \ &#123;\color&#123;yellow&#125;8&#125; \\ \\
&amp;...(\text&#123;不再详细演示&#125;)
\end&#123;aligned&#125;</code></pre>


<h3 id="示例程序-2"><a href="#示例程序-2" class="headerlink" title="示例程序"></a>示例程序</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100010</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
                a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span> <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>可以看到，它比普通冒泡排序快在当前一个元素大于等于后一个元素时会退出循环。但最坏的情况还是 $O(n^2)$ （也是平均情况），因为如果他时一个倒序序列的话，这样排序每次都要从头到尾比较一遍，这和冒泡排序是一样的。</p>
<h3 id="演示网址-2"><a href="#演示网址-2" class="headerlink" title="演示网址"></a>演示网址</h3><p>演示网址：<a href="https://visualgo.net/zh/sorting?slide=9"><code>https://visualgo.net/zh/sorting?slide=9</code></a></p>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><p>计数排序需要用到<strong>前缀和</strong>的知识，简单来说就是将每一个数字出现的次数记录到一个数组中（这里称为计数数组），然后再按照这个计数数组将答案数组赋值好。还是比较好理解的。只是也许没有冒泡排序来的码量小。<br>计数排序适用于<strong>排序数据量较大</strong>的排序，但数字不能过大。如果数字上限很高的话，计数排序就无能为力了，因为数组不能开太大，否则内存不够用。<br>同时，最好不要有<strong>负数</strong>，要不然计数数组要开两倍大，虽说也可以通过处理达到“负下标”的效果，但还是上面说的三个排序比较好。</p>
<h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p>假设有这样一个数组 $a$ ：</p>
<pre class="language-mathKatex" data-language="mathKatex"><code class="language-mathKatex">8 \ 8 \ 8 \ 5 \ 5 \ 7 \ 5 \ 2 \ 2 \ 6 \ 6 \ 2</code></pre>

<p>统计结果是这样的：<br>$8$ 出现了 <code>3</code> 次， $5$ 出现了 <code>3</code> 次， $7$ 出现了 <code>1</code> 次， $6$ 出现了 <code>2</code> 次， $2$ 出现了 <code>3</code> 次。</p>
<p>那么，就可以将这些数按顺序赋值到答案数组中，然后再输出答案数组。在此处不演示了。<del>手都敲酸了</del></p>
<h3 id="示例程序-3"><a href="#示例程序-3" class="headerlink" title="示例程序"></a>示例程序</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> TEMP <span class="token operator">=</span> <span class="token number">1e7</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>
        <span class="token keyword">int</span> r <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> l<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="演示网址-3"><a href="#演示网址-3" class="headerlink" title="演示网址"></a>演示网址</h3><p>演示网址：<a href="https://visualgo.net/zh/sorting?slide=15"><code>https://visualgo.net/zh/sorting?slide=15</code></a></p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><p>归并排序其实是<strong>分治</strong>的思想，将一个数列分成两份，再分，直至每个数列的长度都为一为止。然后再将每一个数列按照大小放回数组里。时间复杂度为 $O(n \log_{2}{n})$，和上面的几个排序比较，已经很好了。  </p>
<h3 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h3><p>一个数列 $8 \ 5 \ 7 \ 9 \ 2 \ 6$ 的归并排序：</p>
<p><img src="https://mermaid.ink/svg/pako:eNpVkrtuhDAQRX9lNJUjsRIGzKug2jZVUgVSWGB2kQCviFEUrfbfY7DNg2rOncu85CfWshGYY9vL3_rOJwWf12oE_VGSAoMEMgggfjNaYDRLITnmIlKm3zZmZHfFpMycnpDdnxJmo4w4L_VJ4EJKnJMGpNT1XBEarghbN6pb67obshVh60rjRWBa0j8Z2SbgcikgOEJoF9WwYLRjAcyubXPxjgUkdvEV0iNkdvUVqH8i6iZJDdtRshNFhkJ3jDP6BiN3tRPGhpi70xnN5DR2Z7OIHg5iGnjX6HfxXJIVqrsYRIW5DhvR8rlXFVbjS1v5rOTH31hjrqZZeDg_Gq7EteO3iQ-Yt7z_0apoOiWnd_PW1ifn4YOPX1I6z-sfpwSWLQ"></p>
<h3 id="示例程序-4"><a href="#示例程序-4" class="headerlink" title="示例程序"></a>示例程序</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> TEMP <span class="token operator">=</span> <span class="token number">5e5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">dg</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">!=</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dg</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">int</span> l1 <span class="token operator">=</span> l<span class="token punctuation">,</span> l2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> cnt <span class="token operator">=</span> l<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l1<span class="token punctuation">]</span> <span class="token operator">>=</span> a<span class="token punctuation">[</span>l2<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            b<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l2<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l1<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>l2<span class="token punctuation">]</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> mid <span class="token operator">-</span> l1<span class="token punctuation">;</span>
            <span class="token keyword">else</span> sum <span class="token operator">+=</span> mid <span class="token operator">-</span> l1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            l2<span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            b<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l1<span class="token punctuation">]</span><span class="token punctuation">;</span>
            l1<span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        cnt<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        b<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l1<span class="token punctuation">]</span><span class="token punctuation">;</span>
        l1<span class="token operator">++</span> <span class="token punctuation">;</span>
        cnt<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        b<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>l2<span class="token punctuation">]</span><span class="token punctuation">;</span>
        l2<span class="token operator">++</span> <span class="token punctuation">;</span>
        cnt<span class="token operator">++</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">dg</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="演示网址-4"><a href="#演示网址-4" class="headerlink" title="演示网址"></a>演示网址</h3><p>演示网址：<a href="https://visualgo.net/en/sorting?slide=11"><code>https://visualgo.net/en/sorting?slide=11</code></a></p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><p>“快速”和快速排序的名字没有关系。<br>快速排序的实现就是寻找一个中间数（类似于二分的 <code>mid</code>），确保左边的最大值比中间数小，右边的最小值比中间数大。即将数列分成两部分，<strong>左边的所有数大于右边</strong>。</p>
<div class="note warning"><p>注意</p>
<p>快速排序是<strong>不稳定</strong>的，它的时间复杂度自然也不稳定。平均时间复杂度为 $O(n \log n)$，但是最差可退化到 $O(n^2)$。</p>
</div>

<h3 id="示例程序-5"><a href="#示例程序-5" class="headerlink" title="示例程序"></a>示例程序</h3><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> TMP <span class="token operator">=</span> <span class="token number">5e6</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>TMP<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> r<span class="token punctuation">,</span> flag <span class="token operator">=</span> a<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// flag: 中间数</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> flag<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 让左区间增大</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> flag<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// 让右区间增大</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 交换是左边小于右边</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 分段递归</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">qsort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="头文件-sort-排序"><a href="#头文件-sort-排序" class="headerlink" title="&lt;algorithm&gt; 头文件 sort() 排序"></a><code>&lt;algorithm&gt;</code> 头文件 <code>sort()</code> 排序</h2><p>这么多排序算法，头都要晕了。为什么不用别人现成的函数来排序呢？看， <code>C++</code> 就有一个超级好用的头文件 -&gt; <code>&lt;algorithm&gt;</code> ，用它里面的 <code>sort()</code> 函数就可以啦！并且，它支持<strong>自定义排序</strong>。</p>
<p>从小到大排序时，还有一个更方便的方法：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><code>greater</code> 是一个模板，可以把它理解为在这个函数中把大于号和小于号的含义交换。</p>
<p>两个重载：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token operator">></span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">)</span></code></pre>

<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">_RandomAccessIterator</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">_Compare</span><span class="token operator">></span>
    <span class="token keyword">inline</span> <span class="token keyword">void</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>_RandomAccessIterator __first<span class="token punctuation">,</span> _RandomAccessIterator __last<span class="token punctuation">,</span>
	 _Compare __comp<span class="token punctuation">)</span></code></pre>

<p>想要用的时候，就直接 <code>sort(&amp;a[0], &amp;a[n])</code> 或者 <code>sort(a, a + n)</code> 就可以了。写排序函数 <code>cmp</code> 时，想交换就 <code>return true</code> ，否则就 <code>return false</code> 。</p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>优化</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路</title>
    <url>//posts/shortest-pth/</url>
    <content><![CDATA[<p>最短路即从某一结点到另一结点的路径，使其权值最小。这是一个动态规划问题。</p>
<span id="more"></span>

<h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Floyd 解决任意两点之间的最短路路径问题，但是图中不能有负环（无向图中不能有负路径权值）。<br>主要实现是确定一个点，如果起始点与结束点经过这个点的距离比原来距离要小，即更新两点间的距离。<br>代码如下：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment">// n 为节点数</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 中转点</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 起</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 终</span>
            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://www.luogu.com.cn/problem/B3647">洛谷 B3647 Floyd</a></p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> dis<span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">103</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 邻接表和实现数组</span>
<span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment">// 结点数，边数</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> <span class="token comment">// 邻接表存图</span>
        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> w<span class="token punctuation">;</span> <span class="token comment">// u, v 之间有权值为 w 的无向边</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断重边</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>w <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span> dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>
        dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// Floyd</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 从节点自己到本身，距离一定为 0</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// i -> k -> j 路径存在（0 即不存在)</span>
                <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 转移方程</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="SPFA-代码（仅记录）"><a href="#SPFA-代码（仅记录）" class="headerlink" title="SPFA 代码（仅记录）"></a>SPFA 代码（仅记录）</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">typec</span> <span class="token expression"><span class="token keyword">int</span></span></span>
<span class="token keyword">const</span> typec INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Edge</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> v<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cost<span class="token punctuation">;</span>
    <span class="token function">Edge</span><span class="token punctuation">(</span><span class="token keyword">int</span> _v <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> _cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">v</span><span class="token punctuation">(</span>_v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cost</span><span class="token punctuation">(</span>_cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>Edge<span class="token operator">></span> E<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    E<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">Edge</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 在队列标志</span>
<span class="token keyword">int</span> cnt<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 每个点的入队列次数</span>
typec dis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">bool</span> <span class="token function">SPFA</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> <span class="token comment">// 附带判定负环</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    vis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    dis<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> que<span class="token punctuation">;</span>
    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cnt<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> E<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> v <span class="token operator">=</span> E<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> E<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                dis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> dis<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> E<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">&#123;</span>
                    vis<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>cnt<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">)</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token comment">// cnt[i] 为入队列次数，判定是否存在负环</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="Dijkstra-代码"><a href="#Dijkstra-代码" class="headerlink" title="Dijkstra 代码"></a>Dijkstra 代码</h2><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">2e6</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">typec</span> <span class="token expression"><span class="token keyword">int</span></span></span>
<span class="token keyword">const</span> typec INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span> <span class="token comment">// 防止后面溢出，这个不能太大</span>
<span class="token keyword">bool</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pre<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span>typec cost<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> typec lowcost<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> beg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INF<span class="token punctuation">;</span>
        vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    lowcost<span class="token punctuation">[</span>beg<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> Min <span class="token operator">=</span> INF<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> Min<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                Min <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                k <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token operator">?</span><span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            vis<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                lowcost<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lowcost<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构：队列和栈</title>
    <url>//posts/stackandqueue/</url>
    <content><![CDATA[<p>队列和栈都是线性数据结构，它们一个是先进先出，一个是先进后出，有着不同的使用场景。这两个数据结构基于链表，也可以用数组模拟这样的数据结构，通过 C++ 中 STL 提供的容器也可以更加方便快捷地实现。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><strong>队列 (queue)</strong> 是在一端插入另一段删除的线性表，遵循<strong>先进先出</strong>，类似于排队，可以称为先进先出 (FIFO) 表。队列中，允许入队 (enqueue) 的一端为队尾，允许出队 (dequeue) 的一端为队头。以后的<a style="border-bottom:none;">广度优先搜索</a>就会用到它。</p>
<span id="more"></span>

<h3 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h3><p>使用数组模拟队列需要一个存储数据的数组，同时用变量标记队头和队尾。<br>假设队列数组名为 <code>q</code>，头指针为 <code>ql</code>，尾指针为 <code>qr</code>，则：</p>
<p><strong>插入元素</strong>时，需要将队尾加上 1，假设元素为 <code>x</code>。结果：<code>q[++qr] = x;</code>；<br><strong>删除元素</strong>时，需要将队头指向下一个元素，由于这不是链表，直接执行即可。结果：<code>ql++;</code>；<br><strong>访问队首</strong>，直接 <code>q[ql];</code>；<br><strong>访问队尾</strong>，直接 <code>q[qr];</code>；<br><strong>清空队列</strong>时，头指针尾指针初始化，<code>ql = 1; qr = 0;</code>。</p>
<p>可见，数组模拟队列和数组模拟链表的缺点一样，内存不是动态分配的。这导致若数据过大则内存可能超出限制，若比数组的大小还大那就越界了，队列就溢出了。</p>
<h3 id="队列的溢出"><a href="#队列的溢出" class="headerlink" title="队列的溢出"></a>队列的溢出</h3><p>但由于数组是直接将队首队尾加来加去，可能会有队列（数组）前面还空着，但是队列溢出的情况这就叫做<strong>假溢出</strong>。若假溢出则需要使用循环队列，也就是说当尾指针超出数组，则将这一个元素从数组的开头放起。当然，若是真的全部存完了那有用的数据也会覆盖掉，这就是真溢出了。</p>
<h3 id="STL-queue"><a href="#STL-queue" class="headerlink" title="STL queue"></a>STL queue</h3><p>STL 提供的容器 <code>queue</code>，需要引入 <code>&lt;queue&gt;</code> 头文件。通过模板，定义形式是这样：<code>queue&lt;[value type]&gt; name</code>。<br>成员函数的使用：</p>
<ul>
<li><code>front()</code> 返回队首值。</li>
<li><code>back()</code> 返回队尾值。</li>
<li><code>push([value])</code> 元素入队。</li>
<li><code>pop()</code> 元素出队。</li>
<li><code>empty()</code> 返回布尔值，表示队列是否为空。</li>
<li><code>size()</code> 返回数值，表示队列里元素的数量。</li>
</ul>
<p>容器不会假溢出，但是若队列为空还要 <code>pop()</code> 就会溢出。</p>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><strong>栈 (stack)<strong>是在同一端插入同一端弹出的表。元素可插入弹出的一段称为栈顶，另一端是栈底，遵循</strong>先进后出</strong>。</p>
<p>STL stack 容器需要引入 <code>&lt;stack&gt;</code> 头文件。成员函数有：<br><code>top()</code> 返回栈顶值<br><code>push([value])</code> 插入<br><code>pop()</code> 弹出<br><code>empty()</code> 是否为空栈<br><code>size()</code> 返回元素数量</p>
<p>同样的，容器没有上限，不会上溢出。但是若栈已空还要 <code>pop()</code> 就会造成<strong>下溢出</strong>。</p>
<hr>
<p><strong>附</strong>：visualgo 演示：  </p>
<ul>
<li>栈 <a href="https://visualgo.net/en/list?slide=4">https://visualgo.net/en/list?slide=4</a></li>
<li>队列 <a href="https://visualgo.net/en/list?slide=5">https://visualgo.net/en/list?slide=5</a></li>
</ul>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>队列</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>样式过渡动画</title>
    <url>//posts/trast-styl/</url>
    <content><![CDATA[<p>一些可以用到 <code>:hover</code> 状态上的样式过渡。</p>
<p>以下的效果主要是通过 <strong>伪元素</strong> 实现的。感觉麻烦，直接加上 <code>transition: all .4s ease-in-out</code>。把下面那些记在这儿是方便自己以后用。<del>“感觉麻烦…”这句话也是给自己看的（逃</del></p>
<span id="more"></span>

<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>这里的样式过渡适用于<strong>从无下划线到有下划线</strong>的样式过渡。</p>
<h3 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h3><p>这里更改下划线的颜色，或者说是 <code>border-bottom-color</code>。因为直接设置过渡 <code>border</code> 不会有效果。</p>
<style>
    .post-body span.egunlcolor {
        border-bottom: 1px solid transparent;
        cursor: pointer;
        transition: border-bottom-color .2s;
    }
    .post-body span.egunlcolor:hover {
        border-bottom-color: #555;
    }
</style>

<p>代码比较简单：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">span</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 这里的选择器改成要用的元素，所有的状态、颜色和数值也是，下同 */</span>
    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid transparent<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> border-bottom-color .2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">span:hover</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border-bottom-color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><span class="egunlcolor">鼠标放在这里，效果就是这个样子</span></p>
<h3 id="从某个方向出现"><a href="#从某个方向出现" class="headerlink" title="从某个方向出现"></a>从某个方向出现</h3><p>这里更改下划线（伪元素）的长度，或者说是 <code>transform:scaleX()</code>。</p>
<style>
    .post-body div.egunderline span {
        margin-bottom: 5px;
        cursor: pointer;
        position: relative;
    }
    .post-body div.egunderline span::before {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        height: 2px;
        width: 100%;
        background-color: #555;
        transform: scaleX(0);
        transform-origin: inherit;
        transition: transform .2s;
    }
    .post-body div.egunderline span:hover::before {
        transform: scaleX(1);
    }
    .post-body div.egunderline span#egleftirighto:hover::before {
        transform-origin: left;
    }
</style>

<p>代码是这样的：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">span</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">span::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transform-origin</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token comment">/* , center, left */</span> <span class="token comment">/* 更改这里可以把动画的位置改变 */</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> transform .2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">span:hover::before</span> <span class="token punctuation">&#123;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* transform-origin: left; */</span> <span class="token comment">/* 上一处设为 right  这里设为 left  有左进右出的效果 */</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>效果：</p>
<div class="egunderline" style="margin-bottom:20px;">
    <span style="transform-origin:left;">下划线从<strong>左</strong>出现：<code>transform-origin:left;</code></span><br>
    <span style="transform-origin:center;">下划线从<strong>中间</strong>出现：<code>transform-origin:right;</code></span><br>
    <span style="transform-origin:right;">下划线从<strong>右</strong>出现：<code>transform-origin:right;</code></span><br>
</div>

<p>还可以把未触发状态下的 <code>transform-origin</code> 与触发状态下的值分别改成 <code>left</code> 和 <code>right</code>，像这样子：</p>
<div class="egunderline" style="margin-bottom:20px;"><span style="transform-origin:right;" id="egleftirighto">左边出现，右边消失&ensp;的效果</span></div>

<h2 id="下划线上升到背景色"><a href="#下划线上升到背景色" class="headerlink" title="下划线上升到背景色"></a>下划线上升到背景色</h2><p>比较适用于链接。其实是通过 <code>box-shadow</code> 的 <code>inset</code> 和 y偏移量 实现的。</p>
<p>代码是：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">.post-body span.egultobg</span> <span class="token punctuation">&#123;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px -1px 0 0 #555<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> box-shadow .2s<span class="token punctuation">,</span> color .2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">.post-body span.egultobg:hover</span> <span class="token punctuation">&#123;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px -1lh 0 0 #555<span class="token punctuation">;</span> <span class="token comment">/* 注意：lh 单位一些浏览器还不支持 */</span>
    <span class="token property">color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<style>
    .post-body span.egultobg {
        box-shadow: inset 0px -1px 0 0 #555;
        transition: box-shadow .2s, color .2s;
        cursor: pointer;
    }
    .post-body span.egultobg:hover {
        box-shadow: inset 0px -1.5em 0 0 #555;
        color: #eee;
    }
</style>

<p><span class="egultobg">下划线上升为背景色</span></p>
<h2 id="模拟按钮"><a href="#模拟按钮" class="headerlink" title="模拟按钮"></a>模拟按钮</h2><p>就是加上一些 <code>box-shadow</code> 和 <code>padding</code> 啦。代码：</p>
<pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">button.egprsbtn</span> <span class="token punctuation">&#123;</span>
    <span class="token property">--egprs-bgcolor</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
    <span class="token property">--egprs-color</span><span class="token punctuation">:</span> #555<span class="token punctuation">;</span>
    <span class="token property">--egprs-hvbgc</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>
    <span class="token property">--egprs-btnhei</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>
    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 15px 15px <span class="token function">calc</span><span class="token punctuation">(</span>15px + <span class="token function">var</span><span class="token punctuation">(</span>--egprs-btnhei<span class="token punctuation">)</span><span class="token punctuation">)</span> 15px<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 2px solid <span class="token function">var</span><span class="token punctuation">(</span>--egprs-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--egprs-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--egprs-bgcolor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 <span class="token function">var</span><span class="token punctuation">(</span>--egprs-btnhei<span class="token punctuation">)</span> 0 0 <span class="token function">var</span><span class="token punctuation">(</span>--egprs-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> transform .2s<span class="token punctuation">,</span> color .2s<span class="token punctuation">,</span> box-shadow .2s<span class="token punctuation">,</span> background-color .2s<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">button.egprsbtn:hover</span> <span class="token punctuation">&#123;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--egprs-hvbgc<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">button.egprsbtn:active</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--egprs-bgcolor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--egprs-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--egprs-btnhei<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code></pre>

<style>
    button.egprsbtn {
        --egprs-bgcolor: #fff;
        --egprs-color: #555;
        --egprs-hvbgc: #eee;
        --egprs-btnhei: 4px;
        cursor: pointer;
        padding: 15px 15px calc(15px + var(--egprs-btnhei)) 15px;
        border-radius: 8px;
        border: 2px solid var(--egprs-color);
        color: var(--egprs-color);
        background-color: var(--egprs-bgcolor);
        box-shadow: 0 var(--egprs-btnhei) 0 0 var(--egprs-color);
        transition: transform .2s, color .2s, box-shadow .2s, background-color .2s;
    }
    button.egprsbtn:hover {
        background-color: var(--egprs-hvbgc);
    }
    button.egprsbtn:active {
        color: var(--egprs-bgcolor);
        background-color: var(--egprs-color);
        box-shadow: none;
        transform: translateY(var(--egprs-btnhei))
    }
</style>

<p><button class="egprsbtn">按钮的样式</button></p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>C++类（结构体）</title>
    <url>//posts/struct-class/</url>
    <content><![CDATA[<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>结构体使用 <code>struct</code> 关键字定义。<del>对于目前的我来说，没什么要记的。</del>例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">,</span> num<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>a<span class="token punctuation">;</span>
a<span class="token punctuation">.</span>val<span class="token punctuation">;</span></code></pre>

<span id="more"></span>

<p>需要记的是：<br>当使用该类型的指针变量时，访问其子元素应使用 <code>-&gt;</code> 而不是直接使用 <code>.</code>，也可以通过解地址（但比较麻烦）的写法：<code>(*a).val</code>。<br>例子：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
test a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> <span class="token comment">// b 是指针变量</span>

b <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
a<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">114</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>val<span class="token punctuation">,</span> b<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 因为 b 存储 a 的地址，又 `b->val` 和 `(*b).val` 相同，输出为：</span>
<span class="token comment">// 114 114 114</span>

c<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">810</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> b<span class="token operator">-></span>val<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同上解释。输出为：</span>
<span class="token comment">// 810 810 810</span>

b<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span> <span class="token comment">// 相当于 `(*b).val=70;`。由于 b 存储 c 的地址，c 的 val 的值被改变了。</span>
b <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment">// 同上，相当于 `b->val=80;`。b 存 a 的地址，a.val 被改变了。</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> b<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b 还指向 a，a, c 分别被改为 80, 70。则输出为：</span>
<span class="token comment">// 80 70 80</span></code></pre>


<h2 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h2><p><strong>类</strong>类似于结构体，只不过他是C++独有的而已。对于我这个入门者来说，类几乎等于结构体，只不过他出现了一种概念：公有 <code>public</code> 私有 <code>private</code> 受保护的 <code>protected</code> 。当然，对于我来说，除了 <code>public</code> 能用，其他的<strong>都不能用</strong>。<del>我还是<strong>太蒻了</strong>。捂脸.jpg</del> 但是继承类似乎可以用。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">myclass</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token operator">:</span>
        <span class="token keyword">int</span> a <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token operator">:</span>
        <span class="token keyword">int</span> b <span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token operator">:</span>
        <span class="token keyword">int</span> c <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>对于我来说，除了 a 都不能用。<br>好像也没啥能记的了。再次捂脸.jpg</p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>双指针-快慢指针</title>
    <url>//posts/two-pointers/</url>
    <content><![CDATA[<blockquote>
<p>双指针其实不是真正的指针，而是有两个变量在序列上进行一些操作。<br>——Lqingyi(Lxandqi)</p>
</blockquote>
<h2 id="思想分类"><a href="#思想分类" class="headerlink" title="思想分类"></a>思想分类</h2><ul>
<li>普通双指针 也就是两个普通的 <code>for</code> （也可以是其他的）循环嵌套。</li>
<li>左右指针 其实就是二分搜索，一个变量指向开头，一个变量指向末尾，根据条件向中间遍历，直到指针相遇或满足某种条件。（也就是逼近答案）</li>
<li>快慢指针 两个指针（变量）开始同时开头，但一个遍历的快，一个慢，直到条件满足或指针到末尾。</li>
</ul>
<span id="more"></span>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>双指针是二重循环。</p>
<p>一般来说，快慢指针的第二个指针（快指针）的变量是在 <code>for</code> 循环体之外定义的。因为 <code>for</code> 循环会初始化变量。快慢指针的变量是不可以初始化的，因为已经遍历过的就不用遍历了，再遍历一遍就变成普通双指针（暴力枚举）了。</p>
<p><del>怎么感觉只有例题才能讲清楚？？？</del></p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>给定一个长度为 $n$ 的整数序列 $a_1,a_2,…,a_n$ 以及一个长度为 $m$ 的整数序列 $b_1,b_2,…,b_m$。<br>请你判断 $a$ 序列是否为 $b$ 序列的子序列。<br>子序列指序列的一部分项按原有次序排列而得的序列，例如序列 $a_1,a_3,a_5$ 是序列 $a_1,a_2,a_3,a_4,a_5$ 的一个子序列。</p>
<p><strong>输入时：</strong><br>第一行包含两个整数 $n,m$。<br>第二行包含 $n$ 个整数，表示 $a_1,a_2,…,a_n$。<br>第三行包含 $m$ 个整数，表示 $b_1,b_2,…,b_m$。<br><strong>输出时：</strong><br>如果 $a$ 序列是 $b$ 序列的子序列，输出一行 <code>Yes</code>。<br>否则，输出 <code>No</code>。</p>
<p><strong>数据保证：</strong><br>$1 \le n \le m \le 10^5$<br>$−10^9 \le a_i,b_i \le 10^9$</p>
<hr>
<p><strong>解题：</strong><br>数据那么大，暴枚肯定不行。那么就用今天学的双指针。<br>一个指针 $i$ 遍历数组 $a$ 的元素，指针 $j$ 遍历数组 $b$ 的元素。写一个 <code>while(1)</code> 死循环， $j$ 在 <code>while</code> 中每次 <code>++</code>，如果 $a_i &#x3D; b_j$ ，则 <code>break</code> ，如果 $j &gt; m$ 则输出 <code>No</code> 。 $j$ 变量（指针）的定义要写在循环之外。</p>
<p><strong>代码：</strong>  </p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> m <span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">></span> m<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                j<span class="token operator">++</span> <span class="token punctuation">;</span>
                <span class="token keyword">break</span> <span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            j<span class="token operator">++</span> <span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
        <tag>解题思想</tag>
      </tags>
  </entry>
  <entry>
    <title>Waline 评论加入记录</title>
    <url>//posts/waline-set/</url>
    <content><![CDATA[<p>看了看“<a href="/archives">归档</a>”页面才发现自己没有在 2024 <strong>发布</strong>过文章。最近寒假作业写累了（思维导图太烦啦），就更新了下留言板，从 <a href="https://giscus.app/zh-CN">giscus</a> 换成了 <a href="https://waline.js.org/">waline</a>，不用登录就可以留言了，管理也更方便。  </p>
<span id="more"></span>

<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>按照官方文档，我注册了 <a href="https://console.leancloud.app/register">LeanCloud</a> <strong>国际版</strong> 账号（华东或华北节点需要备案域名，可我没有钱买域名）。随后点击“创建应用”，填写应用名称（计费方式选择“开发版”）。<br>创建应用完毕后依次点击 <code>设置  -&gt;  应用凭证</code>，三个 KEY 等下要使用。</p>
<p>随后我选择了 <a href="https://deta.space/signup">DetaSpace</a> 部署。注册账号，随后<a href="https://deta.space/discovery/@lizheming/waline">下载 Waline 应用</a>，点击“Install on Space”等待完成。随后返回首页，点击底部任务栏 deta 图标呼出菜单，依次点击 <code>Add Card to Horizon  -&gt;  Installed App  -&gt;  Waline</code>。<br>鼠标悬浮到新增加的卡片上，点击灰色的 deta 图标点击 “Open Settings”，点击“Configuration”选项卡，将 LeanCloud 中 <code>AppID</code>, <code>AppKey</code>, <code>MasterKay</code> 依次加入到 <code>LEAN_ID</code>, <code>LEAN_KEY</code>, <code>LEAN_MASTER_KEY</code> 中。滑动到底部点击“Save Changes”。服务端完成。</p>
<p>可以通过“Configuration”中 <code>GRAVATAR_STR</code> 更改用户默认头像。更改 <code>DISABLE_REGION</code> <code>DISABLE_USERAGENT</code> 为 true 隐藏评论下方用户代理和位置。</p>
<p>鼠标悬浮到卡片上，点击右上角“Waline”及其徽标，在 url 后增加 <code>/ui/register</code>，也就是 <code>https://waline-x-xxxxxxx.deta.app/ui/register</code>，注册一个账号成为管理员，就可以点击“管理”选项卡管理用户和评论了。</p>
<div class="note info"><p>直接使用</p>
<p>不需要 LeanCloud，直接将 Waline 部署到 DetaSpace 上，Waline 会自动将数据存储到 DetaBase 里。<br>点击灰色的 deta 图标，选择 <code>View App Data -&gt; Base</code> 选项卡，这里就是 Waline 直接存储的数据。</p>
</div>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>通过 CDN 引入 <a href="https://cdnjs.cloudflare.com/ajax/libs/waline/2.15.8/waline.js">waline.js</a> 和 <a href="https://cdnjs.cloudflare.com/ajax/libs/waline/2.15.8/waline.css">waline.css</a>，在想加入评论框的页面引入。<br>新增 script 标签，可参考：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'/comments/waline.js'</span><span class="token punctuation">;</span>
    
Waline<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#waline"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">path</span><span class="token operator">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>
    <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">"zh-CN"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">serverURL</span><span class="token operator">:</span> <span class="token string">"https://yoursite.deta.app"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">locale</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* 自己更改 */</span>
        <span class="token literal-property property">admin</span><span class="token operator">:</span> <span class="token string">"管理员"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">login</span><span class="token operator">:</span> <span class="token string">"管理员登录"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">"友善的评论会收获更多美好"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>一些六年级的小练笔</title>
    <url>//posts/xiaolianbi/</url>
    <content><![CDATA[<p>一些六年级写的小作文（小练笔），留作纪念。</p>
<h2 id="主题：点面结合写“体检”300字以上"><a href="#主题：点面结合写“体检”300字以上" class="headerlink" title="主题：点面结合写“体检”300字以上"></a>主题：点面结合写“体检”300字以上</h2><p>同学们紧张地等待着，一年一度的体检开始了。<br>与往常不同的是，这次体检要抽血。验血区里，紧张的气氛非常明显。我一拿到<em><strong>条形码</strong></em>(当时验血有一个条形码，用来验证身份和当作标签)，就直奔验血区,怕时间长了自己会害怕。很快就轮到了我。我卷起袖子，将胳膊往桌上一放，马上扭过头闭上眼，不敢看针扎进我的胳膊里的样子。<span id="more"></span>医生开始抹酒精了，我觉得我一直在发抖。等了一会儿，我感到一丝疼痛，但很快就没有了。只听见软管松开的声音。“好了。”旁边的同学提醒我。我睁开眼，看见医生正在往试管上贴标签，我长舒一口气。幸好一次性就完成了。旁边同学问我：“疼吗？”我按紧棉花，苦笑道：“都一样”。<br>另外一边儿正在测血压，气氛很轻松，毕竟同学们习惯测血压了。她卷起袖子，医生帮她把仪器连接好，按下了“开始”键。只见那块连接仪器的布不断收缩、绷紧，仪器上的数字不断跳动、变化，然后定格，布又松弛了。医生在表格上龙飞凤舞地写下一行数字，又开始忙其他的了。<br>各种各样的检查结束了，同学们兴高采烈地走回了教室，如释重负。</p>
<h2 id="主题：未知"><a href="#主题：未知" class="headerlink" title="主题：未知"></a>主题：未知</h2><p>老师一走，原本安静的班级马上热闹起来，比十个菜市场还吵。调皮大王马上抓住这一时机，放声大吼起一首歌“大河向东流啊……”一些同学被调皮大王逗得哈哈大笑，根本就不去写作业本了，也愉快地聊起天来。大组长，班长怎么管也没用。调皮大王更起劲了，拿起书本卷成筒状，凑到同学耳边大吼大唱。许多“小调皮”被吸引了，也毫无顾忌地转来转去，和旁边的同学愉快地大声聊天。随着调皮大王“嘿”地一声大吼，一位女同学差点儿被吓哭。跑操铃声想起，新任体育委员地调皮大王又来了兴致，催促吵吵闹闹的班级马上出来，在外面排好了歪歪扭扭的队伍。“小调皮”们在教室外还是安静不下来，直至别的班的老师过来，那吵吵闹闹的一群人才一哄而散。</p>
<h2 id="主题：点面结合-大扫除-400字"><a href="#主题：点面结合-大扫除-400字" class="headerlink" title="主题：点面结合 大扫除 400字"></a>主题：点面结合 大扫除 400字</h2><p>很快，一盆盆水端了进来，同学们都拿着工具，对教室里脏的地方发动了“攻击”。同学们忘乎所以地忙碌着，仿佛这个世界上只有他手中的事情了。<br>他拿着一把扫帚，卖力地扫角落里一个落满灰尘的夹缝。地上那些明显的纸片都被他扫走了，他扫门后面，灰尘弥漫，但他手握扫帚，用力去扫角落的墙灰，很快，门后干干净净。这里的角落有一个柜子，他俯下身子，仔细地查看着柜子后面的灰尘，发现灰尘有一尺多高。他马上把扫帚探进柜子后面，半个身子差点儿都倒下去了，艰难的把一丁点儿灰尘扫了出来。他不甘心，拿了把小扫帚，用力搬开了柜子，手拿小扫帚，将所有灰尘都扫了出来。他还觉得不够干净，干脆直接上手，地上几块顽固的胶带就被他死了下来，丢进了灰尘堆。垃圾桶里虽然没有什么大型垃圾，灰尘却堆成了小山，这大部分是他的功劳。<br>她拿着一块湿抹布，握着小铲刀，擦着墙上的污垢和双面胶带。瓷砖已经有些发黑了，还有一些水笔的字迹，被摘除的布告后留下双面胶的痕迹。她不慌不忙，从容地擦着那些水笔的痕迹。手所滑过的地方，一切都亮了起来。但也有非常顽固的污垢，她用手指盖着布，上上下下用力地擦。扣。污垢撑不住，很快，墙上的污点完全没有了。双面胶牢牢地粘在墙上，经过长时间的风化，又硬又黏。她先用湿布擦那些胶，这样用铲子更好铲，“斩草除根”后，再用力擦一擦，墙上的双面胶一点也没有了。结白明亮的瓷砖倒映着她满意的微笑。<br>经过每一个同学的努力，教室里焕然一新。每个同学露出的，都是满意的微笑。</p>
]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>作文</tag>
      </tags>
  </entry>
  <entry>
    <title>一些有用的东西有没有用的东西</title>
    <url>//posts/yixieyouyongdedongxiyoumei/</url>
    <content><![CDATA[<h2 id="宏定义和类型定义"><a href="#宏定义和类型定义" class="headerlink" title="宏定义和类型定义"></a>宏定义和类型定义</h2><p><em>宏定义</em>，<strong>将一个指令导向另一个指令</strong>。宏定义属于<strong>预处理指令</strong>，使用规范为：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token punctuation">[</span>标识符<span class="token punctuation">]</span> <span class="token punctuation">[</span>常量<span class="token punctuation">]</span></span></span></code></pre>

<span id="more"></span>

<p>与变量不同的是：宏定义可以理解为把一个文本<strong>替换</strong>成另一个文本。比如说：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">a</span> <span class="token expression"><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>和</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>使用了 <code>#define</code> 的输出 $9$ ，使用了 <code>int</code> 的输出 $15$ 。这是因为 <code>#define</code> 只是把 $a$ 替换为了 $3+2$ ，因此先算 $2 \times 3&#x3D;6$ ，再算 $6+3&#x3D;9$ ，而 <code>int</code> 将 $a$ 定为 $5$ ，再算 $5 \times 3&#x3D;15$ 。从这些角度来看，<code>define</code> 只是一个“替换”的操作。</p>
<hr>
<p><em>类型定义</em>，<strong>将变量类型导向简单的标识符</strong>。类型定义属于<strong>语句</strong>，使用规范为：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token punctuation">[</span>变量类型<span class="token punctuation">]</span> <span class="token punctuation">[</span>标识符<span class="token punctuation">]</span> <span class="token punctuation">;</span></code></pre>

<p>与 <code>#define</code> 不同的是：<code>#define</code> 属于<strong>预处理指令</strong>，需要在预处理器处理。而且 <code>#define</code> 可以将任何指令或字符指向标识符；而 <code>typedef</code> 属于<strong>语句</strong>，需要在编译器中编译。且 <code>typedef</code> 只支持将变量类型指向标识符。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pnt</span> <span class="token expression">printf </span><span class="token comment">// printf可以写成pnt</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">scn</span> <span class="token expression">scanf </span><span class="token comment">// scanf可以写成scn</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll <span class="token punctuation">;</span> <span class="token comment">// long long可以写成ll</span>
    <span class="token comment">// typedef scanf scn ; -> 这句话是错误的</span>
    ll a <span class="token punctuation">;</span> <span class="token comment">// 定义了变量a，类型为long long</span>
    <span class="token function">scn</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">pnt</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>无论是 <code>int</code> 还是 <code>double</code> 类型，他们都是变量，即随时可以改变。当想用到不用改变的量时，就要用到<strong>常量</strong>了。</p>
<p>定义一个常量很简单，只需要在变量类型前加上一个 <code>const</code> 就行了。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在这里，我们建立了一个名为 $a$ 的常量，其值为 $100$ 。随后定义一个名为 $b$ 的数组，大小为 $a$ ， $a&#x3D;100$ ， $b$ 数组的大小就是 $100$ 。</p>
<p><del>一般来说</del>对于我来说，常量的作用不算特别大，但是拿来定义数组却很方便。</p>
<h2 id="有符号和无符号"><a href="#有符号和无符号" class="headerlink" title="有符号和无符号"></a>有符号和无符号</h2><p><em>有符号</em>， <code>signed</code> ，符号即为 $-$ ，在一般的数据定义中，<strong>都是</strong>有符号的类型。<em>无符号</em>， <code>unsigned</code> ，即<strong>没有</strong>复数，正数数据范围会大很多。比如普通的 <code>int</code> （ <code>signed int</code> ）数据范围是 $-2147483648 \sim 2147483647$ 而无符号 <code>int</code> （ <code>unsigned int</code> ）数据范围是 $0 \sim 4294967295$ ，这是因为 <code>unsigned int</code> 将附属部分拿来存正数部分，所以可以存的正数会大很多。</p>
<p>在变量类型中，只有 <code>signed</code> 会被认作 <code>signed int</code> ；只有 <code>unsigned</code> 也会被认作 <code>unsigned int</code> ；不带 <code>signed</code> 和 <code>unsigned</code> 的任何数据类型都会被认做有符号 <code>signed</code> 数据类型。因此，在某些时候主函数 <code>int main()</code> 也可以写成 <code>signed main()</code> </p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
  <entry>
    <title>指针</title>
    <url>//posts/zhizhen/</url>
    <content><![CDATA[<h2 id="指针的作用"><a href="#指针的作用" class="headerlink" title="指针的作用"></a>指针的作用</h2><p>指针，顾名思义，就是指向某一东西的标志。</p>
<p>当我们想存地址时，就可以使用指针变量：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token punctuation">;</span></code></pre>

<p><code>b</code>就是一个指针变量，存着<code>a</code>的地址。</p>
<span id="more"></span>

<h2 id="普通指针"><a href="#普通指针" class="headerlink" title="普通指针"></a>普通指针</h2><p>普通指针就是上面的例子中的<code>b</code>，它存着<code>a</code>的地址，因此<code>&amp;a</code>和<code>b</code>的输出结果是一样的。</p>
<h2 id="存指针地址的指针"><a href="#存指针地址的指针" class="headerlink" title="存指针地址的指针"></a>存指针地址的指针</h2><p>当我们想存指针地址时那该怎么办呢？</p>
<p>很简单，嵌套：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>c <span class="token operator">=</span> <span class="token operator">&amp;</span>b <span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这样就不会出错了。</p>
<h2 id="取地址和解地址"><a href="#取地址和解地址" class="headerlink" title="取地址和解地址"></a>取地址和解地址</h2><p><code>*</code>既可以是乘号，又可以是解地址，还可以是指针变量；</p>
<p><code>&amp;</code>既可以是按位与运算，又可以是取地址。</p>
<p>解地址，与取地址相反，就是<strong>按照地址去找地址里存的数</strong>。</p>
<p>我们可以使用指针变量解地址得到原本的数，例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">&amp;</span>a <span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>c <span class="token operator">=</span> <span class="token operator">&amp;</span>b <span class="token punctuation">;</span>
    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这段代码输出的应该是三个同样<code>10</code>，我们一个一个来：</p>
<ul>
<li><code>a</code>，就是<code>a</code>本身，输出<code>10</code>；</li>
<li><code>*b</code>，就是解地址<code>b</code>，等于解地址<code>&amp;a</code>，等于<code>a</code>，输出<code>10</code>；</li>
<li><code>**c</code>，就是解地址<code>c</code>，等于解地址<code>&amp;b</code>，等于解地址<code>&amp;a</code>，等于<code>a</code>，输出<code>10</code>。</li>
</ul>
<p>画个图更清晰：</p>
<p><code>**c=*(&amp;b) → b=*(&amp;a) → a = 10 → printf(10)</code></p>
<p>因此，解地址也是可以嵌套的。</p>
<h2 id="指针数组和数组指针"><a href="#指针数组和数组指针" class="headerlink" title="指针数组和数组指针"></a>指针数组和数组指针</h2><p>指针数组，用来存指针的数组；</p>
<p>数组指针，数组的首地址。</p>
<p>我们使用时<code>*a[100]</code>代表数组<code>a</code>的地址，因为数组的优先级更高。弄一个指针数组应该写<code>(*a)[100]</code>。</p>
<p>同样的，<code>a</code>代表<strong>数组中第一个元素的首地址</strong>，<code>&amp;a</code>代表<strong>整个数组的首地址</strong>，我们是不是还可以这样写？</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std <span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span> <span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>输出<code>1 2 3 4</code>，这与<code>a[n]</code>的效果是一样的。</p>
<p>因此，我们得出结论：<strong>数组的本质就是指针</strong>。</p>
]]></content>
      <categories>
        <category>CourseNotes</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>scanf 和 printf 的格式符</title>
    <url>//posts/stdoi-snf-pnt/</url>
    <content><![CDATA[<p>又是一个随记，方便自己的使用。C++ 中的 <code>scanf</code> 和 <code>printf</code> 其实有很多比 <code>cin</code> <code>cout</code> 好用的地方，放在这里。</p>
<span id="more"></span>

<h2 id="scanf-的使用"><a href="#scanf-的使用" class="headerlink" title="scanf 的使用"></a>scanf 的使用</h2><h3 id="读入的格式"><a href="#读入的格式" class="headerlink" title="读入的格式"></a>读入的格式</h3><p>就直接上表格吧，先把一些特定的读入格式符放在这儿：</p>
<div class="tabs" id="scanf"><ul class="nav-tabs"><li class="tab active"><a href="#scanf-1">整数</a></li><li class="tab"><a href="#scanf-2">小数</a></li><li class="tab"><a href="#scanf-3">其他</a></li></ul><div class="tab-content"><div class="tab-pane active" id="scanf-1"><table>
<thead>
<tr>
<th align="center">格式符</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>%d</code></td>
<td align="left">读入 int 整型</td>
</tr>
<tr>
<td align="center"><code>%ld</code></td>
<td align="left">读入 long 整型</td>
</tr>
<tr>
<td align="center"><code>%lld</code></td>
<td align="left">读入 long long 整型</td>
</tr>
<tr>
<td align="center"><code>%hd</code></td>
<td align="left">读入 short 整型</td>
</tr>
<tr>
<td align="center"><code>%u</code></td>
<td align="left">读入 unsigned int 整型</td>
</tr>
<tr>
<td align="center"><code>%lu</code></td>
<td align="left">读入 unsigned long 整型</td>
</tr>
<tr>
<td align="center"><code>%llu</code></td>
<td align="left">读入 unsigned long long 整型</td>
</tr>
</tbody></table></div><div class="tab-pane" id="scanf-2"><table>
<thead>
<tr>
<th align="center">格式符</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>%f</code></td>
<td align="left">读入 float 类型</td>
</tr>
<tr>
<td align="center"><code>%lf</code></td>
<td align="left">读入 double 类型</td>
</tr>
<tr>
<td align="center"><code>%Lf</code></td>
<td align="left">读入 long double 类型</td>
</tr>
</tbody></table></div><div class="tab-pane" id="scanf-3"><table>
<thead>
<tr>
<th align="center">格式符</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>%c</code></td>
<td align="left">读入 char 类型</td>
</tr>
<tr>
<td align="center"><code>%s</code></td>
<td align="left">读入字符串，也就是 char 数组</td>
</tr>
<tr>
<td align="center"><code>%o</code></td>
<td align="left">读入八进制整型</td>
</tr>
<tr>
<td align="center"><code>%x</code></td>
<td align="left">读入十六进制整型</td>
</tr>
</tbody></table></div></div></div>

<p>以上其实都是一些读入的格式。还有一些能让读入的格式更加丰富的格式化。</p>
<h3 id="限制位数"><a href="#限制位数" class="headerlink" title="限制位数"></a>限制位数</h3><p>在以上的任何格式符的 % 后面加上数字 n，即读入的位数就是 n。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%1d %1d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>假设输入 10345 则会输出 1 0。</p>
<h3 id="只读入，不赋值"><a href="#只读入，不赋值" class="headerlink" title="只读入，不赋值"></a>只读入，不赋值</h3><p>在任何格式符的 % 后加上 *，就不会赋值给任何变量。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token keyword">long</span> <span class="token keyword">long</span> b<span class="token punctuation">;</span>
<span class="token keyword">short</span> c<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %*lld %lld %hd"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %lld %hd"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>假设输入：</p>
<pre class="language-none"><code class="language-none">2147483647 4294967295 11415612712638 128</code></pre>

<p>则输出：</p>
<pre class="language-none"><code class="language-none">2147483647 11415612712638 128</code></pre>

<p>可见，scanf 忽略了第二个数字 4294967295。</p>
<h2 id="printf-的使用"><a href="#printf-的使用" class="headerlink" title="printf 的使用"></a>printf 的使用</h2><p>其实它和 scanf 差不多。但是有多了精度，对齐什么的。</p>
<h3 id="标识和宽度"><a href="#标识和宽度" class="headerlink" title="标识和宽度"></a>标识和宽度</h3><pre class="language-none"><code class="language-none">%[标识][宽度]</code></pre>

<p>宽度其实和上面一样，只不过默认左对齐。标识就可以更改。</p>
<table>
<thead>
<tr>
<th align="center">标识</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>-</code></td>
<td align="left">将宽度的数字右对齐</td>
</tr>
<tr>
<td align="center"><code>+</code></td>
<td align="left">正数显示正号</td>
</tr>
<tr>
<td align="center"><code>#</code></td>
<td align="left">和 <code>%o</code> 带有八进制前缀 0，和 <code>%x</code> 带有十六进制前缀 0x</td>
</tr>
<tr>
<td align="center"><code>0</code></td>
<td align="left">将宽度的空格变成 0</td>
</tr>
</tbody></table>
<p>例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%010d|%10d|%-10d|\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// |往左填零      |宽度为十            |靠左                 |</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"|%+10d|%#10o|%#10x|\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// |若正数显示正号|更改为八进制，有0前缀|更改为十六进制，有0x前缀|</span>
<span class="token comment">// 宽度全部为十。</span></code></pre>

<p>假设输入：</p>
<pre class="language-none"><code class="language-none">19283 1983 1283 12873 83287 7283</code></pre>

<p>则会输出：</p>
<pre class="language-none"><code class="language-none">|0000019283|      1983|1283      |
|    +12873|   0242527|    0x1c73|</code></pre>

<h3 id="精度"><a href="#精度" class="headerlink" title="精度"></a>精度</h3><p>用于小数，用 .n 标识保留 n 为小数。例如：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> p<span class="token punctuation">;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 保留三位小数</span></code></pre>

<p>假设输入 114514.1919810 会输出 114514.192。</p>
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>语言入门</tag>
      </tags>
  </entry>
</search>
